<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git通讲-第二章（1）：快照和不可变对象模型</title>
      <link href="/tangBlog/2024/11/03/Git%E9%80%9A%E8%AE%B2-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%881%EF%BC%89%EF%BC%9A%E5%BF%AB%E7%85%A7%E5%92%8C%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/"/>
      <url>/tangBlog/2024/11/03/Git%E9%80%9A%E8%AE%B2-%E7%AC%AC%E4%BA%8C%E7%AB%A0%EF%BC%881%EF%BC%89%EF%BC%9A%E5%BF%AB%E7%85%A7%E5%92%8C%E4%B8%8D%E5%8F%AF%E5%8F%98%E5%AF%B9%E8%B1%A1%E6%A8%A1%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章主要介绍些Git起源背后的一些故事背景，从这篇开始将逐渐讲解Git的设计理念，包括分布式控制、快照管理、不可变对象模型和分支模型。其实上述概念都不是孤立的，在讲解中会发现它们是相辅相成的有机整体，实现1+1大于2的效果。<br>接下来预计会按照<strong>快照模型与不可变对象模型</strong>、<strong>分支模型</strong>、<strong>分布式控制</strong>这样的顺序讲解，其用意到后面自会明了。<br>本人总是从中能看到区块链的影子，之后会引入区块链的相关知识进行补充，也当是拓展了🫠。</p><h2 id="快照存储模型"><a href="#快照存储模型" class="headerlink" title="快照存储模型"></a>快照存储模型</h2><p>快照模型与传统的版本控制系统（如SVN等）不同。传统系统通常基于文件的差异（diff）来管理版本，而Git则使用快照（snapshot）的方式来记录项目的每个版本。</p><h3 id="快照模型的主要特点："><a href="#快照模型的主要特点：" class="headerlink" title="快照模型的主要特点："></a>快照模型的主要特点：</h3><ol><li><strong>快照而非差异</strong>：<ul><li>Git会在每次提交时保存项目的当前状态，称为“快照”。这意味着每次提交都是整个项目的完整状态，而不是仅保存变化部分。</li></ul></li><li><strong>只保存变更</strong>：<ul><li>虽然每个提交实际上是一个完整的快照，但Git为了节省空间，内部实现上只存储更改过的文件的内容，而未改变的文件只保存一次。这使得Git非常高效。</li></ul></li><li><strong>对象存储</strong>：<ul><li>Git将文件和目录的快照存储为对象，每个对象都有一个唯一的SHA-1哈希值。这种方式不仅提供了数据的完整性，还能有效管理版本。</li></ul></li><li><strong>树（Tree）和Blob</strong>：<ul><li>在Git中，目录结构被称为“树”（tree），每个文件被称为“Blob”（binary large object）。每次提交都会创建一个新的树对象，指向当前提交的文件状态。</li></ul></li><li><strong>提交（Commit）对象</strong>：<ul><li>每次提交不仅包含快照，还包含提交信息、作者信息、时间戳和指向父提交的指针。这使得Git可以轻松地追踪历史和分支。</li></ul></li><li><strong>高效的分支管理</strong>：<ul><li>因为每个提交都是一个独立的快照，创建分支实际上只需要创建一个新的指针，指向当前的提交。这使得分支操作非常轻量级，极大地方便了开发过程中的实验和合并。</li></ul></li></ol><h2 id="不可变对象模型"><a href="#不可变对象模型" class="headerlink" title="不可变对象模型"></a>不可变对象模型</h2><p>其实这就是上述在快照模型中提到Git对象数据库的具体展开，主要就是三大对象类型结合SHA-1来保证数据的不可变性。</p><blockquote><p>Git的内部数据结构依赖于 **[[加密哈希函数|SHA-1]]**，为每个对象（如文件和提交）生成唯一标识。这种设计确保了数据的不可变性：</p><ul><li><strong>数据完整性</strong>：每个对象的内容会被哈希处理，任何对内容的修改都会导致哈希值的变化，从而提示开发者数据已被更改。</li><li><strong>一致性</strong>：由于对象的内容与其哈希值紧密关联，Git能够保证版本库的一致性，防止数据丢失或损坏。这种机制使得任何用户都可以安全地信任本地的Git仓库。</li></ul></blockquote><p>Git中的哈希值通过对对象内容和元数据进行特定格式的组合，然后应用SHA-1哈希函数生成。这个过程确保了每个对象都有唯一的标识符，同时也保证了数据的完整性和安全性。我们先来看下它们的具体的步骤和原理：</p><h3 id="三大对象"><a href="#三大对象" class="headerlink" title="三大对象"></a>三大对象</h3><h4 id="1-对象类型"><a href="#1-对象类型" class="headerlink" title="1. 对象类型"></a>1. 对象类型</h4><p>Git中的对象主要有三种类型：</p><ul><li><strong>Blob</strong>：表示文件内容。</li><li><strong>Tree</strong>：表示目录，可以包含指向其他blob或tree对象的指针。</li><li><strong>Commit</strong>：表示一次提交，包含指向tree对象的指针、作者信息、提交信息等。</li></ul><h5 id="提交对象（commit）"><a href="#提交对象（commit）" class="headerlink" title="提交对象（commit）"></a><strong>提交对象（commit）</strong></h5><p>提交对象是每次提交时生成的一个对象，记录了：</p><ul><li><strong>提交元数据</strong>：如提交信息、作者、时间戳等。</li><li><strong>父提交</strong>：上一个提交的引用（一个提交可以有多个父提交，用于表示合并）。</li><li><strong>树对象的引用</strong>：提交对象会指向一个根树对象，代表当时项目的整体文件系统快照。<br>提交对象是 Git 的历史记录，通过它可以追踪项目的每个版本、作者、提交时间等信息。</li></ul><h5 id="树对象（tree）"><a href="#树对象（tree）" class="headerlink" title="树对象（tree）"></a><strong>树对象（tree）</strong></h5><p>树对象表示文件系统的目录结构。它：</p><ul><li><strong>包含多个引用</strong>：每个引用要么指向一个文件对象（blob），要么指向另一个子目录的树对象。</li><li><strong>记录文件名和路径</strong>：树对象会保存项目中所有文件和子目录的结构信息，包括文件的名字、类型（文件或目录），以及它们在仓库中的位置。<br>树对象可以嵌套，类似文件系统中的目录结构，一个树对象可以包含其他树对象（子目录），也可以包含文件对象（表示具体的文件内容）。</li></ul><h5 id="文件对象（Blob）"><a href="#文件对象（Blob）" class="headerlink" title="文件对象（Blob）"></a><strong>文件对象（Blob）</strong></h5><p>Blob（Binary Large Object）对象保存了实际的文件内容，Blob 对象本身不包含文件名或路径等元数据。它：</p><ul><li><strong>存储文件内容</strong>：无论是文本文件还是二进制文件，Blob 对象只存储文件的内容本身。</li><li><strong>与文件名、路径无关</strong>：文件名和路径信息都在树对象中管理，因此相同内容的文件在不同的目录或提交中，只需要存储一份 Blob 对象。</li></ul><h5 id="关系总结：如何构成一个提交"><a href="#关系总结：如何构成一个提交" class="headerlink" title="关系总结：如何构成一个提交"></a><strong>关系总结：如何构成一个提交</strong></h5><ul><li><strong>提交对象（commit）</strong> 是顶层对象，指向一个 <strong>树对象（tree）</strong>，代表当时项目的目录结构。</li><li><strong>树对象（tree）</strong> 维护着目录和文件的结构，并通过引用指向文件对象或子目录（另一个树对象）。</li><li><strong>文件对象（Blob）</strong> 存储文件的实际内容，树对象通过引用连接到 Blob 对象。<br>因此，Git 通过提交对象、树对象和Blob对象的层层指向，构成了完整的项目快照。例如，每次提交时：</li></ul><ol><li>Git 会生成一个 <strong>提交对象</strong>，指向项目当前的根 <strong>树对象</strong>。</li><li><strong>树对象</strong> 代表整个项目的目录结构，并指向多个文件对象（Blob）或子目录的树对象。</li><li><strong>Blob 对象</strong> 保存文件内容。<br>这三者相互关联，形成了完整的项目历史和快照。</li></ol><h3 id="图示：对象关系"><a href="#图示：对象关系" class="headerlink" title="图示：对象关系"></a><strong>图示：对象关系</strong></h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">提交对象（<span class="keyword">commit</span>）</span><br><span class="line">    <span class="operator">|</span></span><br><span class="line">    └── 树对象（tree）</span><br><span class="line">           ├── <span class="type">Blob</span> 对象（文件<span class="number">1</span>内容）</span><br><span class="line">           ├── <span class="type">Blob</span> 对象（文件<span class="number">2</span>内容）</span><br><span class="line">           └── 子树对象（子目录）</span><br><span class="line">                   ├── <span class="type">Blob</span> 对象（子目录中的文件<span class="number">1</span>内容）</span><br><span class="line">                   └── <span class="type">Blob</span> 对象（子目录中的文件<span class="number">2</span>内容）</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这种分层结构，Git 能够快速检索项目的历史版本，并且因为Blob对象可以被多个树对象引用，所以相同的文件内容在不同的提交中只需要存储一次，大大提高了存储效率。<br>可以通过 <code>git cat-file -p</code> 命令查看这些对象的关系和详细内容，比如查看提交、树对象和Blob对象的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -p &lt;commit-hash&gt;</span><br><span class="line">git cat-file -p &lt;tree-hash&gt;</span><br><span class="line">git cat-file -p &lt;blob-hash&gt;</span><br></pre></td></tr></table></figure><p>可以通过 <code>git cat-file -t</code> 命令查看这些对象的实际类型</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git cat-file -t &lt;commit-hash&gt;</span><br><span class="line">git cat-file -t &lt;tree-hash&gt;</span><br><span class="line">git cat-file -t &lt;blob-hash&gt;</span><br></pre></td></tr></table></figure><h4 id="2-计算哈希值的步骤"><a href="#2-计算哈希值的步骤" class="headerlink" title="2. 计算哈希值的步骤"></a>2. 计算哈希值的步骤</h4><p>在让我们对于每种对象，Git都是如何生成一个唯一的哈希值。计算哈希值的步骤如下：</p><h5 id="Blob（文件内容）"><a href="#Blob（文件内容）" class="headerlink" title="Blob（文件内容）"></a>Blob（文件内容）</h5><ol><li><strong>准备数据</strong>：首先，Git会将文件内容与其类型信息和长度信息组合在一起，形成一个字符串。格式如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blob &lt;size&gt;\0&lt;content&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;size&gt;</code>是文件的字节数。</li><li><code>\0</code>是一个空字符，用于分隔大小和内容。</li><li><code>&lt;content&gt;</code>是文件的实际内容。</li></ul></li><li><strong>计算哈希</strong>：将上述字符串传递给SHA-1哈希函数，生成一个40字符的十六进制哈希值。</li></ol><h5 id="Tree（目录）"><a href="#Tree（目录）" class="headerlink" title="Tree（目录）"></a>Tree（目录）</h5><ol><li><strong>准备数据</strong>：一个tree对象由多个条目组成，每个条目包含文件模式、文件名和指向blob或子tree对象的SHA-1哈希值。格式如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tree &lt;size&gt;\0&lt;entries&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;size&gt;</code>是tree中条目的数量。</li><li><code>&lt;entries&gt;</code>是所有条目的组合，每个条目都是类似于<code>&lt;mode&gt; &lt;filename&gt;\0&lt;sha1&gt;</code>的格式。</li></ul></li><li><strong>计算哈希</strong>：同样，将字符串传递给SHA-1哈希函数。</li></ol><h5 id="Commit（提交）"><a href="#Commit（提交）" class="headerlink" title="Commit（提交）"></a>Commit（提交）</h5><ol><li><strong>准备数据</strong>：一个commit对象包含指向tree对象的指针、作者信息、提交时间和提交信息。格式如下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">commit &lt;size&gt;\0&lt;tree&gt;\n&lt;parent&gt;\n&lt;author&gt;\n&lt;committer&gt;\n&lt;timestamp&gt;\n&lt;message&gt;</span><br></pre></td></tr></table></figure><ul><li><code>&lt;size&gt;</code>是commit对象的字节数。</li><li><code>&lt;tree&gt;</code>是指向tree对象的SHA-1。</li><li><code>&lt;parent&gt;</code>（如果存在）指向父提交的SHA-1。</li><li><code>&lt;author&gt;</code>和<code>&lt;committer&gt;</code>包含提交者的信息。</li><li><code>&lt;timestamp&gt;</code>是提交时间。</li><li><code>&lt;message&gt;</code>是提交信息。</li></ul></li><li><strong>计算哈希</strong>：将上述字符串传递给SHA-1哈希函数，生成该提交对象的哈希值。</li></ol><h4 id="3-哈希值的存储"><a href="#3-哈希值的存储" class="headerlink" title="3. 哈希值的存储"></a>3. 哈希值的存储</h4><p>Git会将计算出来的哈希值作为对象的唯一标识符，存储在<code>.git/objects</code>目录中。每个对象的内容及其哈希值被保存在文件系统中，以便后续快速检索和验证。</p><h3 id="SHA-1算法"><a href="#SHA-1算法" class="headerlink" title="SHA-1算法"></a>SHA-1算法</h3><p>看了这么多一定对SHA到底什么感到困惑吧，其实没什么高深的，Git就是根据相应对象的具体内容（本质是二进制）算出一个 40 字符的 16 进制字符串，这个字符串就被称为 “散列值” 或 “哈希值”。<br>Git 使用 SHA-1（Secure Hash Algorithm 1）作为其核心机制来唯一标识每个提交、文件对象和目录树。<br>哈希值具有以下特性：</p><ul><li><strong>不可逆性</strong>：从哈希值无法反推原始数据。</li><li><strong>抗碰撞性</strong>：很难找到两个不同的输入产生相同的哈希值。</li><li><strong>小改动大变化</strong>：输入数据的微小变化会导致哈希值的巨大变化。<br>Git利用这个特性实现如下它的几个关键作用：</li></ul><ol><li><p><strong>唯一标识对象</strong>：Git 中的每个文件、每次提交、以及每个目录树的状态都会生成一个 SHA-1 哈希值。Git 通过这个哈希值来区分每个提交，确保同样的文件内容和文件结构不会生成重复的 ID。</p></li><li><p><strong>内容完整性校验</strong>：SHA-1 的<strong>不可逆特性</strong>使得它非常适合<strong>检测文件是否被篡改</strong>。Git 在传输和存储文件时使用 SHA-1 来校验数据的完整性，如果一个文件的内容被改动，它的哈希值也会发生变化，这样可以有效防止数据损坏。</p></li><li><p><strong>分布式优势</strong>：SHA-1 哈希值在 Git 中有一个不可忽视的好处：因为哈希值是根据内容生成的，<strong>不同的开发者对同样的内容会产生相同的哈希值</strong>，这使得 Git 的分布式模型更加高效。</p></li><li><p><strong>不可逆性和冲突</strong>：虽然 SHA-1 理论上会有哈希冲突的可能，但在实际开发中，这种冲突几乎不可能影响到项目的正常运作。SHA-1 的设计保证了它的安全性和性能。</p></li></ol><p>我之前了解过一些区块链的知识，就感觉似曾相识。Git是使用SHA-1而区块链使用的SHA-256，但SHA-256和SHA-1都是加密哈希函数，可以简单的理解为SHA-1是简单版而SHA-256是plus版。因为比特币算是金融领域，需要更高的安全性，区块链算是把hash玩出了花，相较Git有更复杂的数据结构和运算方法。</p><blockquote><p>Git诞生于2005年，是由Linus Torvalds开发的一种分布式版本控制系统，设计之初主要是为了解决Linux内核开发的版本管理需求。它的核心理念是去中心化的分布式存储：每个人可以有一个完整的项目历史副本，且各副本通过哈希值（SHA-1）确保每次变更的唯一性和完整性。<br>区块链则是在2008年中本聪提出的比特币白皮书中被首次介绍的技术，它建立在许多类似Git的去中心化和不可篡改的核心理念上。</p></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇文章大致讲解了git中的两个主要模型<strong>快照存储模型</strong>和<strong>不可变对象模型</strong>，略微引出了下哈希，而这两个模型理念的集中应用就是在 <code>.git/objects</code> 目录，下一篇文章会围绕其展开。<br>也是写爽了，发现Git这个坑是越挖越大，越挖越深😓😓😓，或许能出本书呢。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git通讲-第一章：起源</title>
      <link href="/tangBlog/2024/11/02/Git%E9%80%9A%E8%AE%B2-%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%B5%B7%E6%BA%90/"/>
      <url>/tangBlog/2024/11/02/Git%E9%80%9A%E8%AE%B2-%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%9A%E8%B5%B7%E6%BA%90/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这一篇文章其实我筹谋了好久了，从七月暑假开始之时突然对git的源码感兴趣，想要深入了解一下，也确实看了些资料，但最后还是战线拖太长了，注意力转移到其他处了，写博文的事情就一直在todolist呆到现在🫠。<br>之前也略微写了两篇博文，第一篇大致的记录了git的基础知识包含一些vim的基础知识，第二篇则是主要关注git本地和远程仓库之间的操作，感兴趣的可以爬楼去看。<br>本打算一篇博客就讲完的，但是学了一下，发现可讲的东西确实有些丰富，就打算开一个系列，系统地讲讲Git。这篇文章也是系列的开始之作，希望能有头有尾吧orz。也算给我锻炼下文笔，努力给大家讲得明明白白的。</p><h2 id="引文"><a href="#引文" class="headerlink" title="引文"></a>引文</h2><p>要讲Git是什么，我打算还是先让大家了解下git诞生的目的是什么——<strong>版本控制</strong>🗄️</p><h3 id="版本控制简介"><a href="#版本控制简介" class="headerlink" title="版本控制简介"></a>版本控制简介</h3><p>版本控制系统（Version Control System，简称VCS）是一种软件工具，用于跟踪文件的更改历史，记录代码在不同时间点的状态。它的核心功能是允许开发者保存项目的多个版本，并能够在需要时<strong>回溯、对比、合并</strong>这些版本。通过版本控制，团队中的每个开发者都可以轻松地协同工作，同时确保代码的版本历史清晰可追溯。</p><h3 id="为什么版本控制对软件开发至关重要？"><a href="#为什么版本控制对软件开发至关重要？" class="headerlink" title="为什么版本控制对软件开发至关重要？"></a>为什么版本控制对软件开发至关重要？</h3><ol><li><strong>保护代码历史</strong>：开发者可以在任意时间回滚到之前的某个版本，避免因误操作或错误改动而损坏项目。</li><li><strong>多人协作的基础</strong>：VCS 使得多位开发者可以同时在同一个项目中工作，不必担心互相覆盖或干扰彼此的修改。</li><li><strong>管理和追踪更改</strong>：每次提交代码都会生成一个记录，包括改动内容、时间和贡献者信息，方便审查和调试。</li><li><strong>支持并行开发</strong>：开发者可以在不同的分支上进行并行开发，将不同的功能、修复或实验隔离开，最终可以通过合并整合这些分支。</li></ol><h3 id="传统方式的局限性：手动备份和集中式VCS"><a href="#传统方式的局限性：手动备份和集中式VCS" class="headerlink" title="传统方式的局限性：手动备份和集中式VCS"></a>传统方式的局限性：手动备份和集中式VCS</h3><ul><li><p><strong>手动备份</strong>：在没有版本控制工具的时代，开发者往往通过复制文件夹来保存项目的不同版本。例如，将文件夹命名为 <code>project_v1</code>, <code>project_v2</code> 来手动记录不同的代码版本。然而，这种方式效率低下，容易混淆，难以快速对比不同版本间的差异。而且，随着项目的复杂度增加，手动管理多个副本变得愈发困难。</p></li><li><p><strong>集中式版本控制系统（CVS&#x2F;Subversion）</strong>：像Subversion (SVN) 这样的早期VCS采取集中式的架构，所有代码和历史记录都存储在中央服务器上，开发者需要实时连接服务器才能访问历史版本。集中式VCS有几个明显的缺点：</p><ol><li><strong>单点故障</strong>：如果服务器发生故障，所有开发者的工作都会停滞，且有可能丢失数据。</li><li><strong>操作效率低</strong>：每次提交、检出或同步都依赖于服务器，操作速度受限于网络延迟。</li><li><strong>协作复杂</strong>：多人同时对同一文件进行修改时，往往容易导致冲突，而集中式系统的分支管理能力较弱，难以灵活处理。</li></ol></li></ul><h2 id="Git的起源故事"><a href="#Git的起源故事" class="headerlink" title="Git的起源故事"></a>Git的起源故事</h2><p>之后我们就来简单的了解一下git的历史起源，当然不想听故事的同学可以直接略过，想当故事听的我推荐下<strong>B站up主北游老土</strong>的相关视频<a href="https://www.bilibili.com/video/BV1uK4y1k79t?vd_source=4cc56f82cd176a294e65e1a6c2943db6">诸神传说：Git的诞生（1）</a>这一系列讲Git和Github的发展历史的视频，我觉得还是蛮有意思的。最让我震惊的还是其中讲到的微软收购github的行为吧，让我对闭源和开源之间的关系有了新的认知，印象中的闭源地头蛇微软居然还维持这开源世界的扛把子github。</p><h4 id="背景故事"><a href="#背景故事" class="headerlink" title="背景故事"></a>背景故事</h4><p>在2005年，Linux内核项目的开发团队面临着一个巨大的挑战。作为开源社区中最活跃和复杂的项目之一，Linux内核项目依赖于一个名为 <strong>[[BitKeeper]]</strong> 的版本控制系统（VCS）。然而，BitKeeper并非开源工具，它是由商业公司提供的，并免费提供给Linux开发者使用。Andrew Tridgell通过逆向工程试图破解其协议，以便在不违反许可条款的情况下使用BitKeeper。这引起了BitKeeper公司（由Larry McVoy领导）的不满，导致他们决定撤回向开源社区免费提供BitKeeper的许可。这一事件直接推动了 <strong>Linus Torvalds</strong> 创建Git。<br>（<strong>Andrew Tridgell</strong>，他也是一位非常著名的开源软件开发者。他最为人知的成就是开发[[Samba]]，一个开源的软件套件，能够在不同的操作系统之间实现文件和打印共享。）<br>Linus，作为Linux内核的创始人和主要维护者，意识到Linux内核开发迫切需要一种高效、可靠且适合开源社区的版本控制工具。而当时市场上现有的版本控制工具，比如CVS和Subversion（SVN），都无法满足大规模、快速变化的开源项目的需求。出于对这些工具的性能不满，Linus决定自己开发一款新的工具—— <strong>Git</strong>。<br><strong>2005年4月3日</strong>：Linus Torvalds正式开始开发 Git。这是在 BitKeeper 停止免费向开源项目提供支持之后，他决定创建一个新的分布式版本控制系统的起点。<strong>2005年4月7日</strong>：仅仅四天后，Linus 发布了 Git 的第一个可用版本（0.1）。这个初始版本包含了 Git 的核心功能，如基本的数据结构和操作。 <strong>接下来的几周内</strong>： Linus 和其他早期贡献者对 Git 进行了快速迭代和改进，逐步完善了其稳定性和功能，以确保它能够胜任管理 Linux 内核代码库的任务。<br>虽然 Git 的初始版本在四天内发布，但要达到真正用于管理 Linux 内核项目的成熟程度，大约花费了一个月的时间。这包括了持续的优化、功能添加以及社区的反馈和贡献，确保 Git 能够高效、稳定地支持大型项目的需求。<br>Git之所以能够迅速获得广泛认可，也正是因为它在Linux内核项目这种超大规模、分布式协作项目中展现了极强的性能和稳定性。这种环境对版本控制系统提出了极高的要求，例如高并发、多分支的并行开发以及快速的代码合并，而Git的设计正是为了满足这些需求。因此，Git在开发Linux内核时的表现，验证了它在处理大型代码库时的稳定性和高效性，证明了它的性能下限。</p><h2 id="Git的设计原则"><a href="#Git的设计原则" class="headerlink" title="Git的设计原则"></a>Git的设计原则</h2><p>一款好的工具应该设计目的明确，针对特定的问题和痛点需求进行解决，否则只会将精力白白浪费在开发出一些无关痛痒、毫无关联乃至是一些画蛇添足的功能上。</p><h4 id="开源社区的需求"><a href="#开源社区的需求" class="headerlink" title="开源社区的需求"></a>开源社区的需求</h4><p>Git 之所以诞生，不仅仅是为了替代BitKeeper，更是为了解决Linux开发过程中面对的两个核心问题：</p><ol><li><strong>分布式开发</strong>：开源项目往往分散在全球各地，多个开发者同时在不同的时间段、不同的地点贡献代码，因此需要一个能支持 <strong>分布式开发</strong> 的版本控制工具。</li><li><strong>非线性开发流程</strong>：在内核开发中，不同的功能、bug修复、优化等需要同时进行，版本控制工具必须具备强大的 <strong>分支与合并</strong> 能力，以便开发者能在不同分支上并行工作，并最终将这些工作无缝合并到主线代码中。</li></ol><h4 id="Linus对现有工具的不满"><a href="#Linus对现有工具的不满" class="headerlink" title="Linus对现有工具的不满"></a>Linus对现有工具的不满</h4><p>Linus 对现有集中式版本控制工具（如CVS、Subversion）的不满主要集中在几个方面：</p><ol><li><strong>性能问题</strong>：现有工具在处理大型代码库时效率较低，提交、合并操作往往非常缓慢，不能满足Linux内核项目的需求。</li><li><strong>分支管理不灵活</strong>：传统工具的分支管理模型复杂且笨重，创建或合并分支的成本高昂。对于频繁需要分支和合并的开源项目，无法做到灵活处理。</li><li><strong>中央服务器的依赖</strong>：这些工具依赖中央服务器，这意味着每一次提交、拉取都需要与服务器交互，降低了开发效率。而且，中央服务器一旦故障，整个开发流程可能会瘫痪。<br>在这些不满的推动下，Linus决定从根本上重构版本控制工具的架构，创造一种全新的分布式系统，这就是Git。</li></ol><h4 id="设计原则"><a href="#设计原则" class="headerlink" title="设计原则"></a>设计原则</h4><p>Linus在设计Git时，确立了几个核心目标，这些目标奠定了Git的基础：</p><ol><li><p><strong>快速</strong>：Git的每个操作（如提交、合并、分支切换等）都需要非常高效，能够快速处理数以千计的文件和海量代码。Linus的目标是让Git的基本操作比现有工具快一个数量级。</p></li><li><p><strong>高效处理大型代码库</strong>：Linux内核是一个庞大的项目，Git需要能够轻松管理数百万行代码，同时保证资源占用少，操作流畅。</p></li><li><p><strong>支持非线性开发</strong>：Git必须能够处理复杂的并行开发工作流，支持开发者自由创建、切换和合并分支。Git的分支和合并操作设计得极为轻量，让开发者可以毫无顾虑地频繁创建和合并分支。</p></li><li><p><strong>数据完整性与安全性</strong>：Git的每一次提交都会通过SHA-1哈希生成唯一的ID，确保每个提交的内容不可篡改，同时保障代码历史记录的完整性。</p></li></ol><h2 id="Git核心理念"><a href="#Git核心理念" class="headerlink" title="Git核心理念"></a>Git核心理念</h2><p>之后就是引入我们这系列的重头戏了，Git的设计理念围绕着分布式控制、快照管理、不可变对象模型和灵活的分支策略关键概念展开，我会在接下的文章逐个讲解这些核心理念的实现原理。</p><h4 id="1-分布式版本控制"><a href="#1-分布式版本控制" class="headerlink" title="1. 分布式版本控制"></a>1. 分布式版本控制</h4><p>与传统的集中式版本控制系统（如Subversion）不同，Git是一个分布式版本控制系统。这意味着每个开发者在自己的机器上都有一个完整的代码库和历史记录副本，而不依赖于中央服务器。这种设计带来了几个重要优势：</p><ul><li><strong>本地操作</strong>：开发者可以在没有网络连接的情况下进行提交、查看历史和创建分支等操作，极大提高了操作的灵活性和效率。</li><li><strong>数据冗余</strong>：即使中央服务器出现故障，开发者依然可以从本地仓库中获取完整的项目历史和版本，这降低了数据丢失的风险。</li><li><strong>协作效率</strong>：多个开发者可以同时在不同的本地仓库上进行工作，最后将更改合并到主仓库，避免了集中式系统中可能出现的竞争与冲突。</li></ul><h4 id="2-快照与差异"><a href="#2-快照与差异" class="headerlink" title="2. 快照与差异"></a>2. 快照与差异</h4><p>Git采用的核心理念之一是通过 <strong>快照</strong> 来记录文件的状态，而不是简单记录文件的差异（diff）。在每次提交时，Git会保存当前工作区的快照，记录项目的完整状态。这一机制带来了以下优势：</p><ul><li><strong>高效存储</strong>：虽然Git保存的是每次提交的快照，但它只会存储自上次快照以来发生变化的部分。这意味着即使是大型项目，Git也能有效管理存储空间。</li><li><strong>版本回溯</strong>：由于每次提交都是一个完整的快照，开发者可以轻松地回溯到任何历史版本，无需担心文件之间的复杂差异。<br>Git使用的 <code>.git</code> 文件夹是版本控制的核心，里面包含了所有的版本历史、对象和元数据。开发者在项目根目录下的 <code>.git</code> 文件夹中，可以找到有关每个提交的详细信息，包括树状结构、作者、时间戳等。这使得Git能够快速检索和还原任何历史版本。</li></ul><h4 id="3-不可变对象模型"><a href="#3-不可变对象模型" class="headerlink" title="3. 不可变对象模型"></a>3. 不可变对象模型</h4><p>Git的内部数据结构依赖于 <strong>加密哈希函数（SHA-1）</strong>，为每个对象（如文件和提交）生成唯一标识。这种设计确保了数据的不可变性：</p><ul><li><strong>数据完整性</strong>：每个对象的内容会被哈希处理，任何对内容的修改都会导致哈希值的变化，从而提示开发者数据已被更改。</li><li><strong>一致性</strong>：由于对象的内容与其哈希值紧密关联，Git能够保证版本库的一致性，防止数据丢失或损坏。这种机制使得任何用户都可以安全地信任本地的Git仓库。</li></ul><h4 id="4-分支模型"><a href="#4-分支模型" class="headerlink" title="4.分支模型"></a>4.分支模型</h4><p>Git的分支模型是其另一大核心优势，采用 <strong>轻量级分支</strong> 的设计，允许开发者快速、灵活地创建和管理分支：</p><ul><li><strong>快速创建与切换</strong>：在Git中，创建一个新分支几乎是瞬时的，因为它仅仅是一个指向提交的指针。开发者可以毫不犹豫地创建多个分支，用于开发不同功能、修复bug或进行实验。</li><li><strong>无成本的分支管理</strong>：由于创建和切换分支的成本极低，Git鼓励开发者频繁使用分支。这使得团队能够在开发过程中保持清晰的结构，轻松地进行并行开发。</li><li><strong>便捷的合并操作</strong>：Git提供了强大的合并工具，使得将不同分支的工作合并变得简单。开发者可以轻松地将功能分支合并到主分支，或者处理合并冲突。</li></ul><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这篇博文主要还是想从Git诞生的故事开始，简单探讨一些Git的设计原则和核心理念，或许会有些文绉绉的，但是我想任何一个伟大的事情诞生都不是凭空冒出来的，都是背负着过往的历史，立足当下的现实，努力去开创未来的前行方向的。Git的成功不是人为的偶然，而是历史的必然。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>成为Git高手--读源码</title>
      <link href="/tangBlog/2024/10/24/%E6%88%90%E4%B8%BAGit%E9%AB%98%E6%89%8B-%E8%AF%BB%E6%BA%90%E7%A0%81/"/>
      <url>/tangBlog/2024/10/24/%E6%88%90%E4%B8%BAGit%E9%AB%98%E6%89%8B-%E8%AF%BB%E6%BA%90%E7%A0%81/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Obsidian个人知识管理工具体验分享</title>
      <link href="/tangBlog/2024/10/24/Obsidian%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%93%E9%AA%8C%E5%88%86%E4%BA%AB/"/>
      <url>/tangBlog/2024/10/24/Obsidian%E4%B8%AA%E4%BA%BA%E7%9F%A5%E8%AF%86%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E4%BD%93%E9%AA%8C%E5%88%86%E4%BA%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>之前都是在用Typora作为我的文字记录工具，但暑期的时候看到RSS突发奇想，想要搞一套完整的<strong>信息流</strong>，于是就在寻找合适我的笔记软件，最后选择了Obsidian。<br>obsidian自从9月初使用以来了已将近两个月了，当初忘记写初体验了，现在补上一篇充分体验后的产品报告。</p><h1 id="竞品比较"><a href="#竞品比较" class="headerlink" title="竞品比较"></a>竞品比较</h1><p>当初本就抱着all in one的目的，想找一个功能全面的笔记软件，能满足我的“跨平台记录阅读”的需求，当时比较了市面上主流的几款笔记软件——Notion、Obsidian、印象、Flomo。当然还有幕布、、Bear、石墨、Logseq，但这些都因为精力有限，各种原因导致没能在一开始吸引我进行更深入的体验。</p><h3 id="印象笔记"><a href="#印象笔记" class="headerlink" title="印象笔记"></a>印象笔记</h3><p>印象笔记就纯纯炮灰🤦‍♂️，弹广告我就接受不了一点，各种功能都要付费，更其他俩个一比就是垃圾，特别是国产收购后就开始日渐臃肿发福。还是那句话“我本可以忍受黑暗，如果我不曾见过光明”。</p><h3 id="Flomo"><a href="#Flomo" class="headerlink" title="Flomo"></a>Flomo</h3><p>Flomo的设计的核心理念是“卡牌笔记”，适合碎片化、片段性的文字记录，经过轻度体验不切我本人需求，但是其产品概念还是不错的，很有发展前途，或许将来我会使用。个人感觉flomo和anki联动一下或许能有更好的体验。</p><h3 id="Notion"><a href="#Notion" class="headerlink" title="Notion"></a>Notion</h3><p>确实是个好工具，适合捣鼓的人，有无限可能的人，我愿称之为<strong>最强赛博手账</strong></p><ul><li><strong>优点</strong><ul><li><strong>多功能性</strong>：Notion算是一个很有个性的笔记软件，将<strong>数据库</strong>的概念融入的笔记中，带来了无限的可能。</li><li><strong>高颜值</strong>：Notion的<strong>审美</strong>确实一绝，简单一搞就相当有质感，使用Notion的时候有种做手账的感觉。</li><li><strong>模板</strong>：提供丰富的模板库，用户可以轻松创建不同类型的页面。</li><li><strong>协作功能</strong>：支持多人实时协作，适合团队使用，允许评论、提及等互动。</li></ul></li><li><strong>缺点</strong><ul><li><strong>复杂性</strong>：若需求只是想记录一下文字而言，我认为其功能<strong>过于丰富</strong>，我怕我一搞起来就上头了，不在关注文字本身而是各种形式。其的上手也有较为陡峭的学习曲线。</li><li><strong>通用性</strong>：此外也因为notion形式上的创新，导致了其不像别的软件那样可以轻易的导出md。</li><li><strong>云存储</strong>：数据存储在云端，方便访问，但需要关注隐私和数据安全。考虑到数据安全，我还是有些忌惮。</li></ul></li></ul><h3 id="Obsidian"><a href="#Obsidian" class="headerlink" title="Obsidian"></a>Obsidian</h3><p><strong>地表最强个人知识管理工具</strong></p><ul><li>优点<ul><li><strong>双链</strong>：最吸引我的就是其笔记中的双链功能，当然使用双链是现代笔记的一个趋势并非obsidian特有，但是其把双链的位置摆在了较高的优先级，围绕其开发了许多有特点的功能，像是graph view，反向链接</li><li><strong>插件系统</strong>：Obsidian 拥有丰富的插件生态，官方和社区开发的插件极大扩展了其功能。用户可以根据需求选择不同插件，几乎可以无限制地自定义 Obsidian 的功能。通过插件按需安装的特点就可以让ob变成你喜欢的样子，完美贴合你的需求。可以通过插件实现思维导图，md转word······</li><li><strong>主题和样式自定义</strong>：Obsidian 支持用户使用 CSS 自定义界面样式，此外也有丰富的社区主题供用户选择，帮助打造个性化的笔记体验。</li><li><strong>跨设备同步</strong>：Obsidian 默认将笔记存储在本地，但它支持通过多种方式实现跨设备同步，我就通过使用Remotely插件白嫖坚果云，实现云同步。此外obsidian适配安卓、ios、windows、mac，通过这办法就可以在每个终端上记录并同步笔记，发挥移动端和桌面端不同使用场景的优势。我认为，移动端码长篇文章过去痛苦，但是却可以满足随记的需求，将瞬时的思想抓住。</li></ul></li><li>缺点<ul><li><strong>没有在线协作</strong>：Obsidian 的设计主要面向个人使用，缺乏实时在线协作的功能。如果需要多人同时编辑文档，Notion 等其他工具可能更合适。</li><li><strong>界面简约但不够直观</strong>：虽然 Obsidian 的界面简洁，但对于一些用户来说，可能会感到缺乏视觉上的吸引力。此外，部分功能的访问方式（如命令面板）可能不够直观。和notion比较起来还是能感受都审美上的差距。</li></ul></li></ul><p>notion和obsidian就像在两个不同的方向生长，notion是向内生长，通过自身的架构，带来功能的丰富性；而obsidian则是向外生长，靠插件来拓张功能，来满足不同需求。</p><h1 id="个人使用体验"><a href="#个人使用体验" class="headerlink" title="个人使用体验"></a>个人使用体验</h1><p>我现在基本上将所有要码字的笔记都转移到了ob上去了，包括撰写个人博客，记录平时网络上看到的优秀观点、灵感一现的想法等等。</p><h1 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h1><p>此外不得不提到是关于前言的callback，最近在github上发现了基于RSS开发的<strong>Follow</strong>，试图将所有<strong>信息源all in one</strong>，同时follow支持obsidian保存。无敌了😍，这真的无敌了😍，我暑假设想的信息流齐全了，同时是满足了信息的收集、呈现、记录和输出。Follow我也会持续关注其发展，有机会的也可以写下分享。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 科技分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tailwind CSS初体验</title>
      <link href="/tangBlog/2024/10/10/Tailwind-CSS%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/tangBlog/2024/10/10/Tailwind-CSS%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<p>还是把我想说的话放前面吧，对于独立React小项目的快速开发来说，Tailwind是值得尝试的，我也就仅仅讨论在我目前的状态下（苦逼大学生🤓，个人独立项目（没前端队友，没专业设计）），被拉去打比赛，最后还是“能者多劳”，前端的活最终还是一个人大包大揽🚬🚬🚬。</p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>好久没写博文了，最近在努力从安卓转前端，一直都在学（技术力不够不配写博文）。看了<a href="https://www.robinwieruch.de/react-css-styling/">如何在 React 中使用 CSS 样式 — How to CSS Style in React (robinwieruch.de)</a>这篇文章，了解了下Tailwind Css，被其的高效惊喜到了。</p><p>我个人的感觉Tailwind是在传统的css上抽象了一层，一切优缺点都是有此带来的。不像是Sass，只是作为css的一个拓展超集，爱用就用，不用不用。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><h3 id="团队配合"><a href="#团队配合" class="headerlink" title="团队配合"></a>团队配合</h3><p>本来奇怪为什么没看到什么主流项目在用，搜索了下主要争议点还是在-目前不适合团队配合，毕竟原子化CSS是学习成本的东西也没流行到成为一种规范，在需要多人配合中大型项目不好合作。目前这东西还得是公司自上而下的推行才有可能在团队项目里使用。<br>这一点是不得不去考虑的，毕竟偏离主流的技术在大型项目中是没有用武之地的，这东西在开源社区中也很难融入，仍然得写回Sass。</p><h3 id="复杂性转移"><a href="#复杂性转移" class="headerlink" title="复杂性转移"></a>复杂性转移</h3><p>这其实我感觉也不能算缺点。<br>虽然有些人也有提到tw在实现某些业务方面（不同主题切换）会比较繁琐，但我认为是属于次要的，毕竟其本质任务还是负责view的部分。tw将某些常用的任务简化后不可避免的将复杂性转移到其他地方，只要不是致命的缺陷（无法通过技术解决），将常用的功能简化，不常用的功能复杂化也是可以接受的，平均下来仍然是好事。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><h3 id="写起来爽"><a href="#写起来爽" class="headerlink" title="写起来爽"></a>写起来爽</h3><p>我一个独狗🚬🤓写起来怎么爽怎么来（bushi），官网介绍的就挺准确的“只需书写 HTML 代码，无需书写 CSS，即可快速构建美观的网站”，主要还是得接受这种unocss思想，我现在还说不准其对错，感受就完事了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>究竟tw这类Utility-First-CSS能不能发展完善，将来有什么发展的方向还是值得瞻望的</p>]]></content>
      
      
      
        <tags>
            
            <tag> 科技分享 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C盘扩容</title>
      <link href="/tangBlog/2024/08/24/C%E7%9B%98%E6%89%A9%E5%AE%B9/"/>
      <url>/tangBlog/2024/08/24/C%E7%9B%98%E6%89%A9%E5%AE%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="C盘扩容"><a href="#C盘扩容" class="headerlink" title="C盘扩容"></a>C盘扩容</h1><blockquote><p>核心理念就是将与C盘相邻近的磁盘彻底清空, 然后通过磁盘管理的拓展卷现实C盘扩容.</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>鄙人不才，分盘的时候C盘分的不够大，导致C盘一直处于爆红状态，遂借加装硬盘（当然如果内存够用可以不加）之机给C盘扩容一下。没想到遇到不少问题，于是有了这篇文章。希望能给有相关需要的xdm一定的帮助。</p><h2 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h2><h3 id="1-复制文件"><a href="#1-复制文件" class="headerlink" title="1.复制文件"></a>1.复制文件</h3><ul><li><p><strong>打开磁盘管理器</strong>：右键任务栏的🪟windows图标</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/1.jpg" alt="1"></p></li><li><p>这是我改后的磁盘分区，如果你的C盘右边紧挨的磁盘(之后文章里默认是D盘)里没安装什么流氓软件（360,百度网盘之类的）,那你很幸运,很简单就能把目标完成了。</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/2.jpg" alt="2"></p><p>如果很不幸你像我一样安装了<strong>百度网盘,360zip,迅雷</strong>之类的会在后台偷偷运行的软件，在后面的删除文件环节你就得好好看了🤷‍♂️</p></li><li><p><strong>分盘</strong>：右键D盘（我这里因为已经改好了，所有是G盘），点击<strong>压缩卷</strong>，分出足够空间，然后<strong>新加卷</strong></p></li><li><p><strong>转移资源</strong>：将D盘的资源全部复制到<strong>新加卷</strong>中</p></li></ul><h3 id="2-清空D盘"><a href="#2-清空D盘" class="headerlink" title="2.清空D盘"></a>2.清空D盘</h3><blockquote><p>这是本篇文章的初始写作的目的，有些文件是真的逆天，无法正常彻底删除</p></blockquote><p>接下来下内容根据本人的亲身体会，大致麻烦程度逐渐递增，致敬传奇耐删王🖖</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/3.jpg" alt="3"></p><h4 id="I-普通文件"><a href="#I-普通文件" class="headerlink" title="I.普通文件"></a>I.普通文件</h4><p>直接删就完事了，一股脑扔垃圾桶里</p><h4 id="II-NUL"><a href="#II-NUL" class="headerlink" title="II.NUL"></a>II.NUL</h4><p>应该还有别的删除方法，我是用git bash</p><ul><li><p><strong>使用Git Bash</strong>： 右键，使用git bash 。有git应该知道怎么用，没git的话可以下一个，或者网上在查查别的办法</p></li><li><p><strong>使用命令行</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim NUL</span><br></pre></td></tr></table></figure></li><li><p><strong>退出</strong>什么都不用干,输入<code>:wq</code>退出就行了</p></li></ul><p>就奇迹般✨的消失了，具体原因我也不知道</p><h4 id="III-运行程序"><a href="#III-运行程序" class="headerlink" title="III.运行程序"></a>III.运行程序</h4><p>有些文件由于还在后台运行，无法直接删除，需要先杀进程</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/5.jpg" alt="5"></p><ul><li><strong>打开任务管理器</strong>：Ctrl+Shift+Esc</li></ul><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/8.jpg" alt="8"></p><ul><li><strong>结束任务</strong>：<ul><li>有些文件删除时会提示什么XX进程还在运行无法删除，根据其给的提示，在任务管理器中找到相应进程，右键点击结束进程。</li><li>有些流氓软件会隐藏具体名称，那就得搜索一下对症下药了</li></ul></li></ul><p>结束进程占用后一般软件就可以删除了</p><h4 id="IV-删注册表"><a href="#IV-删注册表" class="headerlink" title="IV.删注册表"></a>IV.删注册表</h4><p>像是360和百度网盘这俩个病毒就得更进一步，除了杀进程外还要在注册表里删除</p><ul><li><p><strong>打开注册表</strong>：Win+R   输入regedit</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/6.jpg" alt="6"></p></li><li><p><strong>删除：</strong> 在<code>计算机\HKEY_CURRENT_USER\Software\</code>路径下,看到baidu删就完事了,看到360删就完事了</p></li></ul><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/7.jpg" alt="7"></p><p>如此再试试，就会发现360zip可以删除了，但是百度网盘还是不可以删除，恭喜<strong>百度网盘</strong>🎉🎉🎉，成为活到最后的传奇耐删王</p><h4 id="V-删除百度网盘"><a href="#V-删除百度网盘" class="headerlink" title="V.删除百度网盘"></a>V.删除百度网盘</h4><p>不得不是百度网盘是真dog，打开文件一看吼，还有个<code>YunShellExtV164.dll</code>文件还活着，好家伙在<strong>资源管理器</strong>打开，这种通过正常重启是没用的。</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/9.jpg" alt="9"></p><ul><li><p><strong>记住文件位置</strong>：把这个.dll文件的位置记住，因为接下来你就不能用资源管理器了</p></li><li><p><strong>打开任务管理器</strong>：Ctrl+Shift+Esc</p></li><li><p><strong>关闭资源管理器</strong>：搜索explorer.exe文件，右键结束进程</p><p>​oops！放轻松黑屏是正常的，会回来的</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/10.jpg" alt="10"></p></li><li><p><strong>运行新任务：</strong> 右上角有个运行新任务，点他，然后输入<code>cmd</code>打开命令行</p></li><li><p><strong>输入命令</strong>: 如图,根据之前记住的绝对路径，把它删掉</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/11.jpg" alt="11"></p></li><li><p><strong>重启资源管理器</strong>：点击运行新任务，输入explorer.exe，成功打赢复活赛了</p></li></ul><p>打开百度网盘的文件再看看，没辣！</p><h3 id="3-删除虚拟内存"><a href="#3-删除虚拟内存" class="headerlink" title="3.删除虚拟内存"></a>3.删除虚拟内存</h3><p>此时D盘应该彻底清空了，里面什么文件都没有了，但有可能还会碰到一个问题</p><p>重新打开磁盘管理器，对D：仍然无法使用<strong>删除卷</strong>，打开资源管理器一看，发现D：还是有些内存，这就可能是由于<strong>虚拟内存</strong>的原因了</p><p>没问题直接第4步</p><ul><li><strong>打开高级系统设置：</strong>右下角🪟搜索高级系统设置</li></ul><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/12.jpg" alt="12"></p><p>在 性能 里点击 设置</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/13.jpg" alt="13"></p><p>点击更改</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/14.jpg" alt="14"></p><p>选择D：盘，再点击<strong>无分页文件</strong>，最后点击设置</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/15.jpg" alt="15"></p><h3 id="4-删除卷-扩展卷"><a href="#4-删除卷-扩展卷" class="headerlink" title="4.删除卷+扩展卷"></a>4.删除卷+扩展卷</h3><ul><li><p><strong>打开磁盘管理器</strong>：右键任务栏的🪟windows图标，点击磁盘管理</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/1.jpg" alt="1"></p></li><li><p><strong>删除卷</strong>：右键D盘，点击删除卷</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/2.jpg" alt="2"></p></li><li><p><strong>拓展卷</strong>：右键C盘，点击<strong>拓展卷</strong>，分配你觉得合适的大小</p></li></ul><p>ok了，这大致就好了，C盘也打赢复活赛了</p><h3 id="5-重新分配磁盘路径"><a href="#5-重新分配磁盘路径" class="headerlink" title="5.重新分配磁盘路径"></a>5.重新分配磁盘路径</h3><p>有些教程说把原来从D：导出的资源重新再导回D：去，可以是可以这样，但不如直接改磁盘路径👍</p><ul><li><p><strong>打开磁盘管理</strong></p></li><li><p><strong>重新分配磁盘驱动号</strong>：右键之前D盘转移文件的磁盘，点击重新分配磁盘驱动号</p></li><li><p><strong>更改为D盘</strong>：点击更改，将字符选择为D</p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/16.jpg" alt="16"></p><p>这样之前文件配置好的依赖路径就不会改变了，原先装在D盘的程序也可以正常运行了</p></li></ul><hr><p>我这也遇到了一些麻烦，不让我这么操作，于是乎又得改注册表了&#x2F;(ㄒoㄒ)&#x2F;~~</p><ul><li><p><strong>打开注册表</strong>：Win+R   输入<strong>regedit</strong></p><p><img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/6.jpg" alt="6"></p></li><li><p><strong>更改：</strong> 在<code>计算机\HKEY_LOCAL_MACHINE\SYSTEM\MountedDevices</code>路径下，更改相应的文件名，我这里是把G改成D<img src="/tangBlog/../images/C%E7%9B%98%E6%89%A9%E5%AE%B9/17.jpg" alt="17"></p></li><li><p><strong>重启电脑</strong></p></li></ul><p>这是真没问题了</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>第一次写这种教程真累ouo，觉得好就给个赞吧，有问题可以评论（我看到如果会的话会回）</p>]]></content>
      
      
      
        <tags>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机科学概论】程序设计层</title>
      <link href="/tangBlog/2024/08/10/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E3%80%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%B1%82/"/>
      <url>/tangBlog/2024/08/10/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E3%80%91%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="程序设计层"><a href="#程序设计层" class="headerlink" title="程序设计层"></a>程序设计层</h1><p>程序设计层讨论的是如何使用计算机系统，引出机器语言</p><ul><li><strong>低级程序设计语言</strong><ul><li><strong>计算机操作</strong><ul><li><strong>可编程&amp;存储&amp;检索&amp;处理</strong></li></ul></li><li><strong>[[机器语言（Machine Language）]]</strong>:由计算机直接使用的二进制编码指令构成的语言<ul><li><strong>[[硬件依赖性]]</strong>: 机器代码因机器的不同而不同,即每种类型的CPU都有它能理解的机器语言</li><li><strong>[[解决机器语言不同的方法]]</strong><ul><li><strong>[[虚拟机（Virtual Machine，VM）]]</strong><ul><li><strong>[[JVM]]</strong></li><li><strong>Pep&#x2F;8</strong>–[[计算机科学概论原书第5版.pdf#page&#x3D;103|计算机基础科学概论Pep&#x2F;8]]<ul><li><strong>体系结构</strong>![[Pasted image 20240808175802.png]]</li><li><strong>指令格式</strong>![[Pasted image 20240808180717.png]]<ul><li><strong>8位指令说明符(可选的)</strong>:说明要执行上面操作和如何解释操作数的位置.指令说明符的格式根据表示一个具体操作所用的比特数不同而不同![[Pasted image 20240808180741.png]]<ul><li><strong>操作码(4bit-8bit)</strong>:长度在4bit到8bit不等<ul><li><strong>4bit操作码</strong><ul><li>第5位为<strong>寄存器说明符</strong>:指定使用哪个寄存器</li><li>3bit<strong>寻址模式说明符</strong>:表示怎么解析指令中的操作数部分👇<ul><li><strong>寻址模式</strong><ul><li><strong>立即寻址模式</strong>![[Pasted image 20240808181718.png]]</li><li><strong>直接寻址模式</strong>![[Pasted image 20240808181731.png]]</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><strong>16位操作数说明符</strong>:操作数的本身或者操作数的地址(有些指令没有操作数说明符)</li><li><strong>一元指令</strong>:没有操作数(要处理的数据)</li></ul></li></ul></li></ul></li></ul></li></ul></li><li><strong>[[汇编语言（Assembly Language）]]</strong>:一种低级语言,用助记码表示特定计算机的机器语言指令<ul><li>汇编器(assembler):把汇编语言程序翻译成机器码的程序![[Pasted image 20240808221123.png]]</li><li><strong>汇编器指令(assembler directive)</strong>:翻译程序使用的指令</li></ul></li><li><strong>伪代码(peseudocode)</strong>:一种表达算法的语言</li></ul></li><li><strong>算法与数据结构</strong><ul><li><strong>[[算法(algorithm)]]</strong>:在有限的时间内用有效的数据解决问题或子问题的明确指令集合</li><li><strong>[[数据结构(data structure)]]</strong>:一种抽象数据类型中的符合数据域的实现</li></ul></li><li><strong>面向对象设计与高级程序语言设计</strong><ul><li><strong>面向对象设计OOD</strong></li><li><strong>高级程序语言</strong><ul><li><strong>翻译过程</strong><ul><li><strong>编译器(compiler)</strong>:把高级语言编写的程序翻译成机器码的程序![[Pasted image 20240808223347.png]]<ul><li>同样具有硬件依赖性,多类型机器上使用一个高级语言,需有多个编译器</li></ul></li><li><strong>解释器(interpreter)</strong>:输入用高级语言编写的程序,指导计算机执行每个语言指定的动作的程序(边翻译边执行)</li><li><strong>[[JVM]]</strong><ul><li><strong>[[java语法回眸|java]]</strong></li><li><strong>字节码(bytecode)</strong>:编译Java源代码使用的标准机器语言</li></ul></li></ul></li><li><strong>[[程序设计语言范型]]</strong><ul><li><strong>面向过程编程（Procedural Programming）</strong></li><li><strong>面向对象编程（Object-Oriented Programming，OOP）</strong></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机科学概论】操作系统层</title>
      <link href="/tangBlog/2024/08/09/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E3%80%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B1%82/"/>
      <url>/tangBlog/2024/08/09/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E3%80%91%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统层"><a href="#操作系统层" class="headerlink" title="操作系统层"></a>操作系统层</h1><p>操作系统层负责将硬件和软件结合起来，负责计算机资源的分配</p><ul><li><strong>操作系统(operating system,OS)</strong>:管理计算机资源并为系统交互提供界面的系统软件![[Pasted image 20240809203501.png]]<ul><li><strong>软件分类</strong><ul><li><strong>应用软件(application software):</strong> 帮助我们解决现实世界问题的程序</li><li><strong>系统软件(system software):</strong> 管理计算机系统并与硬件进行交互的程序</li></ul></li><li><strong>多道程序设计(multiprogramming):</strong> 同时在主存中驻留多个程序,由它们竞争CPU的技术</li><li><strong>[[操作系统发展史]]</strong><ul><li><strong>[[批处理]]</strong></li><li><strong>[[分时]]</strong><ul><li><strong>虚拟机(virtual machine)</strong></li></ul></li></ul></li><li><strong>[[内存管理(memory management)]]</strong>–[[计算机科学概论原书第5版.pdf#page&#x3D;235|计算机科学概论10.2内存管理]]<ul><li><strong>主存</strong>:所有程序在执行时都存储在主存中.这些程序的数据也都存储在主存中,以便程序能够访问它们<ul><li><strong>逻辑地址(logical address)</strong>:对一个存储值的引用,是相对于引用它的程序的</li><li><strong>物理地址(physical address)</strong>: 主存设备中的真实地址</li><li><strong>地址联编(address binding</strong>):逻辑地址和物理地址间的映射</li></ul></li><li><strong>单块内存管理(single contiguous memory management):</strong> 把应用程序载入一段连续的内存区域的内存管理方法![[Pasted image 20240809224200.png]]</li><li><strong>分区内存管理</strong>![[Pasted image 20240809224601.png]]<ul><li><strong>固定分区法(fixed-partition technique):</strong> 把内存分成特定数目的分区以载入程序的内存管理方法<ul><li><strong>适合最先匹配和最佳匹配</strong></li></ul></li><li><strong>动态分区法(dynamic-partition technique):</strong> 根据容纳程序的需要对内存分区的内存管理方法<ul><li><strong>适合最差匹配</strong></li></ul></li><li><strong>基址寄存器(base register):</strong> 存放当前分区的起始地址的寄存器</li><li><strong>界限寄存器(bounds register):</strong> 存放当前分区的长度的寄存器</li><li><strong>分区选择法</strong><ul><li><strong>最先匹配</strong>:把第一个足够容纳程序的分区分配给程序</li><li><strong>最佳匹配</strong>:把最小的能够容纳程序的分区分配给它</li><li><strong>最差匹配</strong>:把最大的能够容纳程序的分区分配给它</li><li>![[Pasted image 20240809225318.png]]</li></ul></li></ul></li><li><strong>✨分页内存管理(paged memory technique):</strong> 主存被分成小的大小固定的存储块(帧),进程被划分成页–[[计算机科学概论原书第5版.pdf#page&#x3D;238|计算机科学概论10.2.3页式内存管理]]![[Pasted image 20240809231833.png]]<ul><li><strong>帧(frame):</strong> 大小固定的小部分主存,用于存放进程页</li><li><strong>页(page):</strong> 大小固定的一部分进程,存储在内存帧中</li><li><strong>✨页映射表(Page Map Table, PMT):</strong> 操作系统用于记录页和帧直接的关系的表 –[[计算机科学概论原书第5版.pdf#page&#x3D;239|计算机科学概论【页映射表】]]</li><li><strong>请求分页(demand paging):</strong>  页式内存管理法的拓展,只有当页面被引用(请求)时才会被载入内存<ul><li><strong>页面交换(page swap):</strong> 把一个页面从二级存储设备载入内存,通常会使另一个页面从内存中删除</li><li><strong>虚拟内存(virtual memory);</strong> 由于整个程序不必同时处于内存而造成的程序大小没有限制的假象</li><li><strong>系统颠簸(thrashing):</strong> 频繁的页面交换照成的低效处理</li></ul></li></ul></li></ul></li><li><strong>进程管理(process management)</strong>: 管理每个进程使用CPU的时间<ul><li><strong>进程状态(process state):</strong> 在操作系统的管理下,进程历经的概念性阶段![[Pasted image 20240809233933.png]]<ul><li><strong>创建</strong></li><li><strong>准备就绪</strong>:等待使用CPU</li><li><strong>运行</strong>:正在使用CPU</li><li><strong>等待</strong>:等待资源(处理CPU以外的资源)</li><li><strong>终止</strong>:进程硬件完成它的执行</li></ul></li><li><strong>[[进程控制块(process control block,  PCB)]]:</strong> 操作系统管理进程信息使用的数据结构<ul><li><strong>上下文切换(context switch):</strong> 当一个进程移出CPU,另一个进程取代它时发生的寄存器信息交换</li></ul></li></ul></li><li><strong>CPU调度</strong>:确定哪个处于准备状态的进程移入运行状态<ul><li><strong>[[CPU调度算法]]</strong><ul><li><strong>非抢先调度(nonpreemptive scheduling):</strong> 当当前执行的进程自愿放弃了CPU时发生的CPU调度<ul><li><strong>先到先服务(FCFS)</strong></li><li><strong>最短作业优先(SJN)</strong></li></ul></li><li><strong>抢先调度(preemptive scheduling):</strong> 当操作系统决定照顾另一个进程而抢占当前执行进程的CPU资源时发生的CPU调度<ul><li><strong>轮询法(RR)</strong><ul><li><strong>时间片(time slice):</strong> 在CPU轮询算法中分配给每个进程的时间量</li></ul></li></ul></li><li><strong>周转周期(turnaround time):</strong> 从进程进入准备就绪状态到它最终完成之间的时间间隔,是评估CPU调度算法的标准</li></ul></li></ul></li></ul></li><li><strong>文件系统和目录</strong><ul><li><strong>文件系统(file system):</strong> 操作系统为它管理的文件提供的逻辑视图<ul><li><strong>文件(file)</strong>:数据的有名集合,用于组织二级存储设备<ul><li><strong>文本文件(text file):</strong> 包含字符(ASCII或Unicode字符集里的字符)的文件,使用<strong>文本编辑器</strong>便可以创建,查看和修改文本文件的内容<ul><li><strong>源文件:</strong> 高级语言编写的程序会被存储位文本文件</li></ul></li><li><strong>二进制文件(binary file):</strong> 包含特定格式的数据的文件,要求给位串一个特定的解释,得使用<strong>特定的解释器</strong>来阅读或修改二进制文件</li></ul></li><li><strong>文件类型(file type)</strong>:文件中存放的关于类型的信息</li><li><strong>文件拓展名(file extension)</strong>:文件名中<strong>说明</strong>文件类型的部分(只是说明,改变文件拓展名不会改变文件中的数据或它的内部格式)</li><li>![[Pasted image 20240810011448.png]]</li><li>[[计算机科学概论原书第5版.pdf#page&#x3D;251|操作系统为不同文件类型根据文件拓展名匹配相应的解释器]]![[Pasted image 20240810011908.png]]</li><li><strong>文件操作</strong><ul><li><strong>具体的可执行操作</strong><ul><li><strong>创建文件</strong></li><li><strong>删除文件</strong></li><li><strong>打开文件</strong></li><li><strong>关闭文件</strong></li><li><strong>从文件中读取数据</strong></li><li><strong>把数据写入文件</strong></li><li><strong>重定位文件中的当前文件指针</strong></li><li><strong>把数据附加到文件结尾</strong></li><li><strong>删减文件(删除它的内容)</strong></li><li><strong>重命名文件</strong></li><li><strong>复制文件</strong></li></ul></li><li><strong>操作系统维护两个表</strong><ul><li>一个表说明哪些内存块是空的(也就是说可以用的)</li><li>为每个目录维护一个表,以记录该目录下的文件的信息</li></ul></li><li><strong>文件指针</strong><ul><li><strong>读指针(地址)</strong></li><li><strong>写指针(地址)</strong></li></ul></li><li><strong>[[文件访问(file access)]]</strong>![[Pasted image 20240810014048.png]]<ul><li><strong>顺序文件访问(sequential file access):</strong> 以线性方式访问文件中的数据的方式</li><li><strong>直接文件访问(direct file access):</strong> 通过指定逻辑记录编号直接访问文件中的数据方法</li></ul></li><li><strong>[[文件保护]]</strong></li></ul></li></ul></li></ul></li><li><strong>目录(directory):</strong> 文件的有名集合、![[Pasted image 20240810015125.png]]<ul><li><strong>目录树(directory tree):</strong> 展示文件系统的嵌套目录组织的结构</li><li><strong>根目录(root directory):</strong> 包含其他所有目录的最高层目录</li><li><strong>工作目录(working directory):</strong> 当前活动的子目录</li></ul></li><li><strong>路径名</strong><ul><li><strong>路径(path):</strong> 文件或子目录在文件系统中的位置的文本名字</li><li><strong>绝对路径(absolute path):</strong> 从根目录开始，包括后面所有后继子目录的路径</li><li><strong>相对路径(relative path):</strong> 从当前工作目录开始的路径</li></ul></li><li><strong>磁盘调度(disk scheduling):</strong> 决定先满足哪个磁盘I&#x2F;O请求的操作<ul><li>先到先服务磁盘调度法</li><li>最短寻道时间优先磁盘调度法</li><li>SCAN磁盘调度法</li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机科学概论】硬件层</title>
      <link href="/tangBlog/2024/08/08/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E3%80%91%E7%A1%AC%E4%BB%B6%E5%B1%82/"/>
      <url>/tangBlog/2024/08/08/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E3%80%91%E7%A1%AC%E4%BB%B6%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="硬件层"><a href="#硬件层" class="headerlink" title="硬件层"></a>硬件层</h1><p>硬件层从构成计算机的硬件角度研究计算机如何如何使用电信号来表示和操作二进制值</p><ul><li><strong>门和电路</strong><ul><li><strong>电信号</strong></li><li><strong>电平</strong></li><li><strong>[[门(gate)|门(gate)]]</strong>:对电信号执行基本运算的设备,介绍一个或多个输入信号,生产一个输出信号<ul><li>门的分类</li><li>门的构造</li></ul></li><li><strong>[[电路(circuit)]]</strong>:相互关联的门组合,用于实现特定的逻辑函数</li><li><strong>[[布尔代数（Boolean algebra）]]</strong></li></ul></li><li><strong>计算部件</strong>–[[计算机科学概论原书第5版.pdf#page&#x3D;95|计算机科学概论第5章]]<ul><li><strong>[[计算机硬件]]</strong></li><li><strong>[[计算机科学概论原书第5版.pdf#page&#x3D;99|计算机科学概论【5.2存储程序的概念】]]</strong><ul><li><strong>冯诺依曼体系结构</strong>![[Pasted image 20240807224846.png]]<ul><li><strong>存储单元</strong></li><li><strong>算数逻辑单元(Arithmetic&#x2F;Logic Uint , ALU):</strong> 执行算数运算(加减乘除)和逻辑运算(俩个值的比较)的计算机部件<ul><li><strong>[[寄存器(register)]]</strong>:CPU中的小块存储区域,用于存储中间值或特殊数据</li></ul></li><li><strong>输入单元</strong></li><li><strong>输出单元</strong></li><li>✨<strong>控制单元(control unit)</strong>  [[计算机科学概论原书第5版.pdf#page&#x3D;103]] <ul><li><strong>特殊寄存器</strong><ul><li><strong>指令寄存器(Instruction Register , IR)</strong>:存放当前正在执行的指令的寄存器</li><li><strong>程序计数器(Program Counter , PC)</strong>:存放下一条要执行的指令的地址的寄存器</li></ul></li></ul></li><li><strong>CPU</strong>:算数逻辑单元和控制单元的组合</li></ul></li><li>✨<strong>读取-执行周期</strong>–[[计算机科学概论原书第5版.pdf#page&#x3D;104|计算机科学概论5.2.2]]<ul><li>读取下一条指令</li><li>译解指令</li><li>如果需要,读取数据</li><li>执行指令</li></ul></li></ul></li><li><strong>嵌入式系统</strong>:作为大型系统的一部分,为完成小范围功能而专门设计的计算机.通常将一个嵌入式系统集成在单个微型处理器芯片上,程序被存储在ROM上<ul><li><strong>只读存储器（ROM，Read-Only Memory）</strong>:计算机中的一种非易失性存储器，这意味着即使在断电后，存储在其中的数据也不会丢失。ROM通常用于存储固件，即计算机在启动时所需的基本程序和操作系统的初始加载代码</li></ul></li><li><strong>并行体系结构</strong><ul><li><strong>并行计算</strong></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【计算机科学概论】信息层</title>
      <link href="/tangBlog/2024/08/07/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E3%80%91%E4%BF%A1%E6%81%AF%E5%B1%82/"/>
      <url>/tangBlog/2024/08/07/%E3%80%90%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A7%91%E5%AD%A6%E6%A6%82%E8%AE%BA%E3%80%91%E4%BF%A1%E6%81%AF%E5%B1%82/</url>
      
        <content type="html"><![CDATA[<h1 id="信息层"><a href="#信息层" class="headerlink" title="信息层"></a>信息层</h1><p>信息层介绍计算机科学中如何理解和处理信息,通过数字化的方法将现实的模拟信号转化为数字信号.以二进制的形式记录</p><ul><li><p><strong>数字</strong></p><ul><li><strong>数的分类</strong><ul><li><strong>自然数：</strong> 从1开始的正整数（1, 2, 3, …）。有时也包括0（0, 1, 2, 3, …）。</li><li><strong>整数：</strong> 包括所有自然数、它们的负数以及0（… -3, -2, -1, 0, 1, 2, 3, …）。</li><li><strong>有理数：</strong> 可以表示为两个整数之比的数（a&#x2F;b，其中a和b都是整数且b≠0）。所有整数都是有理数，因为它们可以表示为自身与1的比（如5可以表示为5&#x2F;1）。</li><li><strong>实数：</strong> 包括所有有理数和无理数。无理数是不能表示为两个整数之比的数（如√2, π）。</li><li><strong>复数：</strong> 包括实数和虚数。形式为a + bi，其中a和b是实数，i是虚数单位，满足i² &#x3D; -1。</li></ul></li><li><strong>基数（base）</strong><ul><li><strong>二进制计数系统</strong></li><li><strong>进制转换</strong></li></ul></li></ul></li><li><p><strong>数据表示法</strong></p><ul><li><strong>数据（data）:</strong> 基本值或事实<ul><li><strong>模拟数据（analog data）：</strong> 用连续形式表示的信息 </li><li><strong>数字数据（digital data）：</strong> 用离散形式表示的信息</li></ul></li><li><strong>信息（infomation）：</strong> 用有效的方式组织或处理过的数据</li><li><strong>多媒体数据类型</strong><ul><li><strong>数字</strong></li><li><strong>文本</strong></li><li><strong>音频</strong></li><li><strong>图像和图形</strong></li><li><strong>视频</strong></li></ul></li><li><strong>数据压缩（data compression）</strong><ul><li><strong>压缩率（compression ratio）：</strong> 压缩后的数据大小除以原始数据大小的值，说明了压缩的程度</li><li><strong>无损压缩（lossless compression）：</strong> 不会丢失信息的数据压缩技术</li><li><strong>有损压缩（lossy compression）：</strong> 会丢失信息的数据压缩技术</li></ul></li><li><strong>数字数据表示法</strong><ul><li><strong>负数表示法</strong><ul><li><strong>符号数值表示法(signed-magnitude representation)</strong>: 通过+-符号的形式表示数所属的分类(正数或负数)</li><li><strong>定长量数</strong>:若只允许用定量的数值,则可以用一半数来表示正数,另一半数表示负数,符号由数的数值决定<ul><li>[[补码|补码(Two’s Complement)]]</li></ul></li></ul></li><li><strong>实数表示法</strong><ul><li><strong>浮点表示法(floating point):</strong> 表面了符号,尾数和指数的实数表示法</li><li><strong>科学计数法(scientific notation)</strong></li></ul></li><li><strong>文本表示法</strong><ul><li><strong>字符集(character set):</strong><ul><li><strong>ASCII字符集</strong></li><li><strong>Unicode字符集</strong></li></ul></li><li><strong>[[文本压缩]]</strong><ul><li><strong>关键字编码</strong></li><li><strong>行程程度编码</strong></li><li><strong>[[文本压缩#^c05359|赫夫曼编码]]</strong></li></ul></li></ul></li><li><strong>音频数据表示法</strong><ul><li><strong>[[音频数据格式]]</strong></li></ul></li><li><strong>图像和图像表示法</strong><ul><li><strong>颜色表示法</strong></li><li><strong>数字化图像和图形</strong><ul><li><strong>像素(pixel)</strong></li></ul></li><li><strong>图像的矢量表示法</strong><ul><li><strong>矢量图形</strong></li></ul></li></ul></li><li><strong>视频表示法</strong><ul><li><strong>[[视频格式]]</strong></li><li><strong>[[视频格式所涉及的技术]]</strong><ul><li><strong>编码方式</strong></li><li><strong>容器</strong></li><li><strong>压缩技术</strong></li></ul></li></ul></li></ul></li></ul></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ios原生开发初体验</title>
      <link href="/tangBlog/2024/07/30/ios%E5%8E%9F%E7%94%9F%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/"/>
      <url>/tangBlog/2024/07/30/ios%E5%8E%9F%E7%94%9F%E5%BC%80%E5%8F%91%E5%88%9D%E4%BD%93%E9%AA%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="ios原生开发初体验"><a href="#ios原生开发初体验" class="headerlink" title="ios原生开发初体验"></a>ios原生开发初体验</h1><h2 id="🍎前言"><a href="#🍎前言" class="headerlink" title="🍎前言"></a>🍎前言</h2><p>机缘巧合之下参加了“移动应用创新赛”，借此机会被迫主动接触ios应用的开发相关方面的知识与技术，也因此有了这篇文章，来记录下我的感受。从开始学习到这篇文章开始撰写，约一周时间，估摸着每天断断续续敲三四个小时左右，自认为收获颇丰。</p><h2 id="MacOS操作系统"><a href="#MacOS操作系统" class="headerlink" title="MacOS操作系统"></a>MacOS操作系统</h2><p>本打算直接谈Swift的，但不得不先提一嘴Mac，想要搞apple相关应用的开发就离不开要有台Mac（虚拟机除外）。我觉得这一步就难倒许多大学生了，显然目前国内的绝大多数大学生的操作系统是Windows。本人平时也是用习惯了Windows，一时间上手Mac真是哪哪都别扭，在这就折腾了好一会。</p><h2 id="Swift语言"><a href="#Swift语言" class="headerlink" title="Swift语言"></a>Swift语言</h2><p>我一上来就直接跟着apple官网的开发者教程走的，基础语法就嫖了眼菜鸟教程的目录，就按照官网教程直接开始敲代码了</p><h3 id="语法糖"><a href="#语法糖" class="headerlink" title="语法糖"></a>语法糖</h3><p>讲讲我喜欢的几个语法糖（不全），就一些语法看和python很像</p><ul><li><p><strong>换行：</strong>直接用换行来分割代码行，省去了敲<code>;</code>的步骤，必须点赞。我认为分号的意义在软件开发中就是为了恶心人，一行代码写完直接回车既能分割代码有能保持可读性，何乐而不为呢，没必要多此一举以<code>；</code>结尾。</p></li><li><p><strong>类型推断：</strong>这让定义变量时又可以少敲一点代码，像是Int、String、double、bool这些常用到的基础数据类型可以直接通过赋初值来由编译器自动判断</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> message <span class="operator">=</span> <span class="string">&quot;Hello, World!&quot;</span>  <span class="comment">// 推断为 String 类型</span></span><br><span class="line"><span class="keyword">var</span> count <span class="operator">=</span> <span class="number">10</span>  <span class="comment">// 推断为 Int 类型</span></span><br></pre></td></tr></table></figure></li><li><p><strong>简化 for-in 循环</strong>：简化了遍历数组和字典的语法。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruits <span class="operator">=</span> [<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;banana&quot;</span>, <span class="string">&quot;cherry&quot;</span>]</span><br><span class="line"><span class="keyword">for</span> fruit <span class="keyword">in</span> fruits &#123;</span><br><span class="line">    <span class="built_in">print</span>(fruit)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> scores <span class="operator">=</span> [<span class="string">&quot;Alice&quot;</span>: <span class="number">90</span>, <span class="string">&quot;Bob&quot;</span>: <span class="number">85</span>]</span><br><span class="line"><span class="keyword">for</span> (name, score) <span class="keyword">in</span> scores &#123;</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;<span class="subst">\(name)</span>: <span class="subst">\(score)</span>&quot;</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="语法特色"><a href="#语法特色" class="headerlink" title="语法特色"></a>语法特色</h3><ul><li><strong>可选类型：</strong>Swift 使用可选类型来处理可能为 nil 的值，避免了传统语言中的空指针异常。</li><li><strong>闭包（Closure）</strong></li></ul><h4 id="闭包（Closure）"><a href="#闭包（Closure）" class="headerlink" title="闭包（Closure）"></a><strong>闭包（Closure）</strong></h4><p>这对我来说也是一个新语法，还不知道能在哪里用到。</p><blockquote><p>一种能够捕获并存储其所在上下文中变量和常量的引用的函数。闭包不仅包含代码，还包含执行时所需的环境。闭包可以在其定义的作用域外被调用，并且能够访问和修改其捕获的变量。</p></blockquote><p>我发现它有个神奇的特性<em><strong>捕获环境</strong></em>：<em>闭包可以捕获并保存其上下文中的变量，即使这些变量在闭包定义的作用域外已不存在。</em></p><p>我就查了下捕获环境的实现机制：</p><ul><li><p><strong>捕获列表</strong>：闭包内创建变量的引用。</p></li><li><p><strong>堆存储</strong>：被捕获的变量在堆上存储，确保它们在闭包存活期间不会被释放。</p></li><li><p><strong>自动引用计数（ARC）</strong>：管理捕获变量的引用计数，确保变量在闭包使用期间不会被释放。</p></li></ul><ol><li><strong>捕获列表</strong></li></ol><p>当闭包捕获一个变量时，它实际上是在闭包内创建了该变量的一个引用。这个引用可以指向局部变量，也可以指向堆上的对象。捕获列表是闭包用来跟踪这些变量的结构。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> total <span class="operator">=</span> <span class="number">0</span></span><br><span class="line"><span class="keyword">let</span> incrementer: () -&gt; <span class="type">Int</span> <span class="operator">=</span> &#123;</span><br><span class="line">    total <span class="operator">+=</span> incrementAmount</span><br><span class="line">    <span class="keyword">return</span> total</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个例子中，闭包捕获了 <code>total</code> 和 <code>incrementAmount</code>。这些变量被捕获为引用，闭包内可以通过这些引用访问和修改它们。</p><ol start="2"><li><strong>堆存储</strong></li></ol><p>当闭包捕获一个变量时，如果这个变量在闭包执行结束后仍需存在，那么这个变量会被存储在堆上，而不是栈上。这样可以确保即使闭包执行结束后，这些变量仍然存在。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">func</span> <span class="title function_">makeIncrementer</span>(<span class="params">incrementAmount</span>: <span class="type">Int</span>) -&gt; () -&gt; <span class="type">Int</span> &#123;</span><br><span class="line">    <span class="keyword">var</span> total <span class="operator">=</span> <span class="number">0</span></span><br><span class="line">    <span class="keyword">let</span> incrementer: () -&gt; <span class="type">Int</span> <span class="operator">=</span> &#123;</span><br><span class="line">        total <span class="operator">+=</span> incrementAmount</span><br><span class="line">        <span class="keyword">return</span> total</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> incrementer</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个函数中，当 <code>makeIncrementer</code> 返回时，<code>total</code> 和 <code>incrementAmount</code> 被捕获到堆上，因此 <code>incrementer</code> 闭包可以在函数返回后继续访问这些变量。</p><ol start="3"><li><strong>自动引用计数（ARC）</strong></li></ol><p>Swift 使用自动引用计数（ARC）来管理内存。当闭包捕获一个变量时，ARC 会增加这个变量的引用计数，确保变量在闭包存活期间不会被释放。当闭包不再使用时，ARC 会减少引用计数，并在没有其他引用时释放变量。</p><figure class="highlight swift"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> incrementByTwo <span class="operator">=</span> makeIncrementer(incrementAmount: <span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(incrementByTwo())  <span class="comment">// 输出 2</span></span><br><span class="line"><span class="built_in">print</span>(incrementByTwo())  <span class="comment">// 输出 4</span></span><br></pre></td></tr></table></figure><p>在这个例子中，<code>incrementByTwo</code> 持有 <code>incrementer</code> 闭包的引用，因此捕获的变量 <code>total</code> 和 <code>incrementAmount</code> 也不会被释放。当 <code>incrementByTwo</code> 被调用时，闭包中的代码可以继续访问和修改 <code>total</code> 和 <code>incrementAmount</code>。</p><h2 id="Xcode"><a href="#Xcode" class="headerlink" title="Xcode"></a>Xcode</h2><p>Xcode是Apple 官方开发应用程序工具和Android Studio类似，个人喜欢的点就coding的时候UI效果可以实时预览，便于页面的调整。而与我以往的Android开发感觉明显不同，我思考了一下觉得应该是采取的设计模式不同，一查也确实大致如此（MVC和MVVM的区别）</p><p>在查询资料的过程中也发现我的不足🤷‍♂️，其实现代Android开发也是推荐使用MVVM模式，同时也是可以通过Jetpack Compose 的预览功能类似于 SwiftUI，允许开发者在代码编写过程中实时查看 UI 变化。</p><p>下面就来看看MVVM和MVC究竟是什么吧👇</p><h3 id="MVC-和-MVVM"><a href="#MVC-和-MVVM" class="headerlink" title="MVC 和 MVVM"></a>MVC 和 MVVM</h3><p>MVC（Model-View-Controller）和 MVVM（Model-View-ViewModel）是两种常见的软件架构模式，它们主要用于分离代码中的关注点，从而使代码更加模块化、可维护和可测试。虽然它们都有类似的目的，但在具体实现和关注点上有明显的区别。</p><h4 id="MVC（Model-View-Controller）"><a href="#MVC（Model-View-Controller）" class="headerlink" title="MVC（Model-View-Controller）"></a>MVC（Model-View-Controller）</h4><p><strong>1. Model（模型）：</strong></p><ul><li>表示应用的数据结构和业务逻辑。</li><li>与数据库和其他数据源交互。</li></ul><p><strong>2. View（视图）：</strong></p><ul><li>负责显示数据和用户界面。</li><li>通过 Controller 获取数据，并根据这些数据更新视图。</li></ul><p><strong>3. Controller（控制器）：</strong></p><ul><li>处理用户输入和应用逻辑。</li><li>作为 Model 和 View 之间的桥梁，接收用户输入并更新 Model，然后通知 View 更新显示。</li></ul><h4 id="MVVM（Model-View-ViewModel）"><a href="#MVVM（Model-View-ViewModel）" class="headerlink" title="MVVM（Model-View-ViewModel）"></a>MVVM（Model-View-ViewModel）</h4><p><strong>1. Model（模型）：</strong></p><ul><li>表示应用的数据结构和业务逻辑。</li><li>与数据库和其他数据源交互。</li></ul><p><strong>2. View（视图）：</strong></p><ul><li>负责显示数据和用户界面。</li><li>通过绑定（Binding）直接获取 ViewModel 提供的数据，并根据这些数据更新视图。</li></ul><p><strong>3. ViewModel（视图模型）：</strong></p><ul><li>负责处理业务逻辑和准备数据供 View 显示。</li><li>不直接引用 View，而是通过绑定将数据和命令暴露给 View。</li></ul><h4 id="MVC-与-MVVM-的主要区别"><a href="#MVC-与-MVVM-的主要区别" class="headerlink" title="MVC 与 MVVM 的主要区别"></a>MVC 与 MVVM 的主要区别</h4><p><strong>1. 关注点的分离：</strong></p><ul><li>在 MVC 中，Controller 通常会变得非常复杂，因为它需要处理很多视图和业务逻辑。</li><li>在 MVVM 中，ViewModel 处理业务逻辑和数据准备，视图只负责展示，通过绑定机制从 ViewModel 获取数据。这使得视图更加轻量和专注。</li></ul><p><strong>2. 数据绑定：</strong></p><ul><li>MVC 没有内置的数据绑定机制。Controller 必须显式地将数据推送到 View。</li><li>MVVM 中，数据绑定是核心特性。视图绑定到 ViewModel 的属性，当属性发生变化时，视图会自动更新。</li></ul><p><strong>3. 测试：</strong></p><ul><li>MVC 中，Controller 和 View 耦合紧密，测试起来比较困难，特别是单元测试。</li><li>MVVM 中，ViewModel 是与视图无关的纯 Swift 类，容易进行单元测试。</li></ul><p><strong>4. 依赖关系：</strong></p><ul><li>MVC 中，View 和 Controller 之间存在直接依赖，Controller 需要知道 View 的具体实现。</li><li>MVVM 中，View 和 ViewModel 通过绑定和协议进行解耦，View 不直接依赖 ViewModel 的具体实现。</li></ul><h3 id="SwiftUI"><a href="#SwiftUI" class="headerlink" title="SwiftUI"></a>SwiftUI</h3><p>这是我最最最想夸的点，在我整个学习和实操过程中最佩服的就是苹果的美学思想，实在是太优美了，简洁又高效，感觉轻轻松松就能做出果味十足的各种界面，这在提升审美方面有很大帮助。在视图部分的制作过程中主要就是用到了SwiftUI，目的类似于Android开发中的xml，下面提一下我喜欢的优点。</p><ul><li><strong>三维画布：</strong>通过HStack(Horizontal)、VStack(Vertical)、ZStack(我也布吉岛单词是哪个)等等通用布局来实现复杂的UI效果，ZStack我也是第一次见，像是把布局从二维的画板添加了Z轴,拔高到了三维,有了前后关系。</li><li><strong>动态布局：</strong>在确定不同组件（image、button、Text之类）和布局尺寸时可以很方便的根据屏幕的尺寸动态改变，且属性命名也很统一符合直觉。Space()也非常好用，能自动占满剩余空间。</li><li><strong>动画优美：</strong>基础动画效果的实现可以很简单，通过几行代码就能实现果味十足的各种动画效果。</li></ul><h3 id="资源管理"><a href="#资源管理" class="headerlink" title="资源管理"></a>资源管理</h3><p>我也特别喜欢Xcode中对图片、颜色等资源的集中管理，<strong>色彩集</strong>的使用可以很好的实现昼夜模式颜色的切换，用起来也相当顺手可以用各种格式定义颜色。</p><h2 id="🍎后记"><a href="#🍎后记" class="headerlink" title="🍎后记"></a>🍎后记</h2><p>通过总结反思ios学习的体验让我可以更好的体悟苹果公司的技术思想，当然我这篇不过是些许皮毛，当对我而言已是受益匪浅。</p><p>我这几天的ios应用开发体验感觉实属愉悦，也是长了见识，真心建议任何对移动应用开发方面的人可以大胆试试，感受苹果公司的软件开发智慧。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>HTML学习</title>
      <link href="/tangBlog/2024/07/02/HTML%E5%AD%A6%E4%B9%A0/"/>
      <url>/tangBlog/2024/07/02/HTML%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML基础学习记录"><a href="#HTML基础学习记录" class="headerlink" title="HTML基础学习记录"></a>HTML基础学习记录</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>知识是互通的嘛，个人粗浅的感觉就是Android中xml和markdown的杂交（这么说可能是有点倒反天罡了，但毕竟本人接触前两者更早）入门倒是挺快的，也感觉没啥好系统写的。</p><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><p><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Introduction_to_HTML/Getting_started">HTML 入门 - 学习 Web 开发 |MDN的 — Getting started with HTML - Learn web development | MDN (mozilla.org)</a></p><p><a href="https://www.runoob.com/html/html-tutorial.html">HTML 教程 | 菜鸟教程 (runoob.com)</a></p><p><a href="https://github.com/denysdovhan/learnyouhtml?tab=readme-ov-file">denysdovhan&#x2F;learnyouhtml: Learn you how to create your first web page (github.com)</a>👈英文好的可以试试这个，边学边练</p><h2 id="什么是HTML"><a href="#什么是HTML" class="headerlink" title="什么是HTML"></a>什么是HTML</h2><p>HTML（HyperText Markup Language，超文本标记语言）是一种用于创建网页的标准标记语言。它被用来描述网页的结构和内容。HTML使用标记标签（tags）来定义不同的元素，如标题、段落、链接、图片等。每个标签都以尖括号（&lt; 和 &gt;）包围，并通常成对出现，一个开始标签和一个结束标签。</p><p><strong>HyperText（超文本）</strong>：</p><ul><li><strong>超文本</strong> 是一种文本，它不仅仅是线性的，用户可以通过点击链接在不同的文档之间跳转。这种能力使得信息在互联网上以网络结构呈现，而不是简单的线性结构。</li></ul><p><strong>Markup（标记）</strong>：</p><ul><li><strong>标记</strong> 指的是使用标签（tags）来标记文本的不同部分。HTML 使用标签来定义网页的结构和内容，例如标题、段落、链接、图像等。</li><li>这些标签帮助浏览器理解和呈现网页内容。</li></ul><p><strong>Language（语言）</strong>：</p><ul><li><strong>语言</strong> 表明 HTML 不是一种编程语言，而是一种标记语言（markup language）。它使用预定义的标记标签来描述网页内容的结构和呈现。</li></ul><h2 id="相关专业术语"><a href="#相关专业术语" class="headerlink" title="相关专业术语"></a>相关专业术语</h2><ul><li><p><strong>元素（Element）</strong>：由开始标签、内容和结束标签组成的HTML结构。例如，<code>&lt;p&gt;这是一个段落&lt;/p&gt;</code> 是一个段落元素。</p></li><li><p><strong>标签（Tag）</strong>：用尖括号包围的HTML标记，用于定义HTML元素。例如，<code>&lt;p&gt;</code> 是段落标签。</p></li><li><p><strong>属性（Attribute）</strong>：用于提供有关元素的附加信息，位于开始标签内。例如，<code>&lt;a href=&quot;https://www.example.com&quot;&gt;链接&lt;/a&gt;</code> 中的 <code>href</code> 是一个属性，定义了链接的目标。</p></li><li><p><strong>块级元素（Block-level Element）</strong>：在页面上占据整个行的元素，常用于布局。例如，<code>&lt;div&gt;</code>, <code>&lt;p&gt;</code>, <code>&lt;h1&gt;</code> 等。</p></li><li><p><strong>行内元素（Inline Element）</strong>：仅占据其内容所需空间的元素，常用于文本格式化。例如，<code>&lt;span&gt;</code>, <code>&lt;a&gt;</code>, <code>&lt;img&gt;</code> 等。</p></li></ul><h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="基础语法-1"><a href="#基础语法-1" class="headerlink" title="基础语法"></a>基础语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>HTML 基础语法示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 外部css --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;styles.css&quot;</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 内联css --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.inline-style</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: blue;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 标题和段落 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">&quot;inline-style&quot;</span>&gt;</span>这是一级标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>这是二级标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 超链接和图片 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个包含<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.example.com&quot;</span>&gt;</span>链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span>的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个包含图片的段落：<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;example.jpg&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;示例图片&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 列表 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>无序列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>有序列表<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 表格 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表格<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>列 1<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">th</span>&gt;</span>列 2<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格 1<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格 2<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格 3<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">td</span>&gt;</span>单元格 4<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 表单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;submit_form.php&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;name&quot;</span>&gt;</span>姓名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;name&quot;</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;email&quot;</span>&gt;</span>电子邮件：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">id</span>=<span class="string">&quot;email&quot;</span> <span class="attr">name</span>=<span class="string">&quot;email&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;message&quot;</span>&gt;</span>留言：<span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">id</span>=<span class="string">&quot;message&quot;</span> <span class="attr">name</span>=<span class="string">&quot;message&quot;</span> <span class="attr">rows</span>=<span class="string">&quot;4&quot;</span> <span class="attr">cols</span>=<span class="string">&quot;50&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;提交&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 媒体元素 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>音频和视频<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line">            您的浏览器不支持音频元素。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;320&quot;</span> <span class="attr">height</span>=<span class="string">&quot;240&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;video.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">            您的浏览器不支持视频元素。</span><br><span class="line">        <span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 内联脚本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">document</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;DOMContentLoaded&#x27;</span>, <span class="keyword">function</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;h1&#x27;</span>).<span class="property">textContent</span> = <span class="string">&#x27;这是使用 JavaScript 修改的标题&#x27;</span>;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 外部脚本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;script.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>标题和段落</strong>：</p><ul><li>使用 <code>&lt;h1&gt;</code> 到 <code>&lt;h6&gt;</code> 标签定义标题。</li><li>使用 <code>&lt;p&gt;</code> 标签定义段落。</li></ul><p><strong>链接和图片</strong>：</p><ul><li>使用 <code>&lt;a&gt;</code> 标签创建超链接。</li><li>使用 <code>&lt;img&gt;</code> 标签嵌入图像，<code>src</code> 属性指定图像路径，<code>alt</code> 属性提供替代文本。</li></ul><p><strong>列表</strong>：</p><ul><li>使用 <code>&lt;ul&gt;</code> 和 <code>&lt;ol&gt;</code> 标签创建无序列表和有序列表。</li><li>使用 <code>&lt;li&gt;</code> 标签定义列表项。</li></ul><p><strong>表格</strong>：</p><ul><li>使用 <code>&lt;table&gt;</code> 标签创建表格，<code>&lt;tr&gt;</code> 定义行，<code>&lt;th&gt;</code> 和 <code>&lt;td&gt;</code> 定义表头和单元格。</li></ul><p><strong>表单</strong>：</p><ul><li>使用 <code>&lt;form&gt;</code> 标签创建表单。</li><li>使用 <code>&lt;input&gt;</code>、<code>&lt;textarea&gt;</code> 和 <code>&lt;label&gt;</code> 标签定义表单控件。</li></ul><p><strong>媒体元素</strong>：</p><ul><li>使用 <code>&lt;audio&gt;</code> 和 <code>&lt;video&gt;</code> 标签嵌入音频和视频。</li></ul><p><strong>内联样式和外部样式表</strong>：</p><ul><li>使用 <code>&lt;style&gt;</code> 标签定义内联样式。</li><li>使用 <code>&lt;link&gt;</code> 标签链接外部样式表。</li></ul><p><strong>脚本</strong>：</p><ul><li>使用 <code>&lt;script&gt;</code> 标签嵌入内联脚本或引用外部脚本。</li></ul><h3 id="文本格式化"><a href="#文本格式化" class="headerlink" title="文本格式化"></a>文本格式化</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>常用文本格式化示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">h1</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#333</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">p</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.highlight</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: yellow;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>HTML 常用文本格式化示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 粗体和斜体 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段包含<span class="tag">&lt;<span class="name">strong</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">strong</span>&gt;</span>和<span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span>文本的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 粗体和斜体的另一种表示方式 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段包含<span class="tag">&lt;<span class="name">b</span>&gt;</span>粗体<span class="tag">&lt;/<span class="name">b</span>&gt;</span>和<span class="tag">&lt;<span class="name">i</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">i</span>&gt;</span>文本的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 下划线和删除线 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段包含<span class="tag">&lt;<span class="name">u</span>&gt;</span>下划线<span class="tag">&lt;/<span class="name">u</span>&gt;</span>和<span class="tag">&lt;<span class="name">del</span>&gt;</span>删除线<span class="tag">&lt;/<span class="name">del</span>&gt;</span>文本的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 上标和下标 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段包含<span class="tag">&lt;<span class="name">sup</span>&gt;</span>上标<span class="tag">&lt;/<span class="name">sup</span>&gt;</span>和<span class="tag">&lt;<span class="name">sub</span>&gt;</span>下标<span class="tag">&lt;/<span class="name">sub</span>&gt;</span>文本的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 代码文本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段包含<span class="tag">&lt;<span class="name">code</span>&gt;</span>代码文本<span class="tag">&lt;/<span class="name">code</span>&gt;</span>的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引用 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段包含<span class="tag">&lt;<span class="name">q</span>&gt;</span>短引用<span class="tag">&lt;/<span class="name">q</span>&gt;</span>的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">blockquote</span>&gt;</span></span><br><span class="line">        这是一段块引用，用于引用较长的文本。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个包含缩写的段落：<span class="tag">&lt;<span class="name">abbr</span> <span class="attr">title</span>=<span class="string">&quot;Hypertext Markup Language&quot;</span>&gt;</span>HTML<span class="tag">&lt;/<span class="name">abbr</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 引用地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个包含引用地址的段落：<span class="tag">&lt;<span class="name">cite</span>&gt;</span>《HTML &amp; CSS: Design and Build Websites》<span class="tag">&lt;/<span class="name">cite</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 变量 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个包含变量的段落：<span class="tag">&lt;<span class="name">var</span>&gt;</span>x<span class="tag">&lt;/<span class="name">var</span>&gt;</span> + <span class="tag">&lt;<span class="name">var</span>&gt;</span>y<span class="tag">&lt;/<span class="name">var</span>&gt;</span> = <span class="tag">&lt;<span class="name">var</span>&gt;</span>z<span class="tag">&lt;/<span class="name">var</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 预格式化文本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pre</span>&gt;</span></span><br><span class="line">这是一些预格式化的文本。</span><br><span class="line">它保留了所有的空格和换行。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">pre</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 高亮 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段包含<span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">&quot;highlight&quot;</span>&gt;</span>高亮文本<span class="tag">&lt;/<span class="name">span</span>&gt;</span>的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">&lt;!-- 地址 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">address</span>&gt;</span></span><br><span class="line">        这是一个地址块：<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        John Doe<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        1234 Main St<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        Springfield, IL 62704<span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        USA</span><br><span class="line">    <span class="tag">&lt;/<span class="name">address</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 标记 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一段包含<span class="tag">&lt;<span class="name">mark</span>&gt;</span>标记<span class="tag">&lt;/<span class="name">mark</span>&gt;</span>文本的段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="E:\markdown\img\image-20240702220942808.png" alt="image-20240702220942808"></p><p><strong>粗体和斜体</strong>：</p><ul><li><code>&lt;strong&gt;</code> 和 <code>&lt;em&gt;</code> 用于语义上的重要性和强调。</li><li><code>&lt;b&gt;</code> 和 <code>&lt;i&gt;</code> 用于视觉上的粗体和斜体效果。</li></ul><p><strong>下划线和删除线</strong>：</p><ul><li><code>&lt;u&gt;</code> 用于下划线。</li><li><code>&lt;del&gt;</code> 用于删除线。</li></ul><p><strong>上标和下标</strong>：</p><ul><li><code>&lt;sup&gt;</code> 用于上标。</li><li><code>&lt;sub&gt;</code> 用于下标。</li></ul><p><strong>代码文本</strong>：</p><ul><li><code>&lt;code&gt;</code> 用于表示代码片段。</li></ul><p><strong>引用</strong>：</p><ul><li><code>&lt;q&gt;</code> 用于短引用，通常会自动添加引号。</li><li><code>&lt;blockquote&gt;</code> 用于块引用，通常用于长段引用。</li></ul><p><strong>缩写</strong>：</p><ul><li><code>&lt;abbr&gt;</code> 用于缩写，<code>title</code> 属性提供完整的描述。</li></ul><p><strong>引用地址</strong>：</p><ul><li><code>&lt;cite&gt;</code> 用于引用书名、文章名等。</li></ul><p><strong>变量</strong>：</p><ul><li><code>&lt;var&gt;</code> 用于表示变量。</li></ul><p><strong>预格式化文本</strong>：</p><ul><li><code>&lt;pre&gt;</code> 用于保留文本中的空格和换行。</li></ul><p><strong>高亮</strong>：</p><ul><li>使用 <code>&lt;span&gt;</code> 和 CSS 类来实现高亮效果。</li></ul><p><strong>地址</strong>：</p><ul><li><code>&lt;address&gt;</code> 用于表示联系信息或地址。</li></ul><p><strong>标记</strong>：</p><ul><li><code>&lt;mark&gt;</code> 用于高亮显示文本，通常用于表示搜索结果中的匹配项。</li></ul><h3 id="块级元素和行内元素"><a href="#块级元素和行内元素" class="headerlink" title="块级元素和行内元素"></a>块级元素和行内元素</h3><h4 id="块级元素的特点"><a href="#块级元素的特点" class="headerlink" title="块级元素的特点"></a>块级元素的特点</h4><ol><li><strong>独占一行</strong>：块级元素通常从新的一行开始，并且会独占一行。</li><li><strong>宽度自动填充父元素</strong>：块级元素的宽度默认会自动填充它的父元素的宽度。</li><li><strong>可以包含其他块级元素和内联元素</strong>：块级元素内部可以包含其他块级元素和内联元素。</li><li><strong>常用于布局</strong>：块级元素通常用于创建页面布局结构。</li></ol><h4 id="内联元素的特点"><a href="#内联元素的特点" class="headerlink" title="内联元素的特点"></a>内联元素的特点</h4><ol><li><strong>不独占一行</strong>：内联元素不会从新的一行开始，它们与相邻的内联元素和文本内容在同一行内显示。</li><li><strong>宽度随内容变化</strong>：内联元素的宽度根据其内容的宽度变化，不会像块级元素那样自动填满父元素的宽度。</li><li><strong>只能包含内联元素</strong>：内联元素通常只能包含其他内联元素或文本，不能包含块级元素。</li></ol> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>块级元素示例<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">header</span>, <span class="selector-tag">footer</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f4f4f4</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">section</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ddd</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">article</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#eee</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h1</span>&gt;</span>块级元素示例<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>章节 1<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文章 1<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是文章 1 的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">article</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">h3</span>&gt;</span>文章 2<span class="tag">&lt;/<span class="name">h3</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是文章 2 的内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">section</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">h2</span>&gt;</span>章节 2<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">li</span>&gt;</span>列表项 3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">section</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是页脚内容。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="常见的块级元素"><a href="#常见的块级元素" class="headerlink" title="常见的块级元素"></a>常见的块级元素</h4><ol><li>**<div>**：通用容器，用于组合内容和创建布局。</li><li>**<p>**：段落，用于包含文本段落。</li><li><strong><h1></strong> 到 **<h6>**：标题标签，用于定义六级标题。</li><li><strong><ul></strong> 和 **<ol>**：无序列表和有序列表，用于创建列表。</li><li>**<li>**：列表项，用于列表中的每一项。</li><li>**<table>**：表格，用于显示表格数据。</li><li>**<header>**：页面或区块的头部，用于包含介绍内容或导航链接。</li><li>**<footer>**：页面或区块的底部，用于包含作者信息、版权声明或导航链接。</li><li>**<section>**：文档的区段，用于划分页面内容的不同部分。</li><li>**<article>**：独立的内容片段，用于表示文章、博文、评论等。</li></ol><h4 id="常见的内联元素"><a href="#常见的内联元素" class="headerlink" title="常见的内联元素"></a>常见的内联元素</h4><ol><li><strong><a></strong> - Anchor（锚点）</li><li><strong><abbr></strong> - Abbreviation（缩写）</li><li><strong><b></strong> - Bold（粗体）</li><li><strong><bdi></strong> - Bidirectional Isolate（双向隔离）</li><li><strong><bdo></strong> - Bidirectional Override（双向覆盖）</li><li><strong><br></strong> - Break（换行）</li><li><strong><cite></strong> - Citation（引用）</li><li><strong><code></strong> - Code（代码）</li><li><strong><dfn></strong> - Definition（定义）</li><li><strong><em></strong> - Emphasis（强调）</li><li><strong><i></strong> - Italic（斜体）</li><li><strong><img></strong> - Image（图像）</li><li><strong><input></strong> - Input（输入）</li><li><strong><kbd></strong> - Keyboard Input（键盘输入）</li><li><strong><label></strong> - Label（标签）</li><li><strong><mark></strong> - Mark（标记）</li><li><strong><q></strong> - Quote（短引用）</li><li><strong><s></strong> - Strikethrough（删除线）</li><li><strong><samp></strong> - Sample Output（示例输出）</li><li><strong><small></strong> - Small Text（小号文本）</li><li><strong><span></strong> - Span（跨度）</li><li><strong><strong></strong> - Strong Emphasis（强烈强调）</li><li><strong><sub></strong> - Subscript（下标）</li><li><strong><sup></strong> - Superscript（上标）</li><li><strong><time></strong> - Time（时间）</li><li><strong><u></strong> - Underline（下划线）</li><li><strong><var></strong> - Variable（变量）</li></ol><h2 id="来学学英语单词"><a href="#来学学英语单词" class="headerlink" title="来学学英语单词"></a>来学学英语单词</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line">1. **&lt;a&gt;** - Anchor（锚点）</span><br><span class="line">2. **&lt;abbr&gt;** - Abbreviation（缩写）</span><br><span class="line">3. **&lt;address&gt;** - Address（地址）</span><br><span class="line">4. **&lt;article&gt;** - Article（文章）</span><br><span class="line">5. **&lt;aside&gt;** - Aside（旁注）</span><br><span class="line">6. **&lt;audio&gt;** - Audio（音频）</span><br><span class="line">7. **&lt;b&gt;** - Bold（粗体）</span><br><span class="line">8. **&lt;bdi&gt;** - Bidirectional Isolate（双向隔离）</span><br><span class="line">9. **&lt;blockquote&gt;** - Block Quote（块引用）</span><br><span class="line">10. **&lt;body&gt;** - Body（主体）</span><br><span class="line">11. **&lt;br&gt;**Break（换行）</span><br><span class="line">12. **&lt;button&gt;** - Button（按钮）</span><br><span class="line">13. **&lt;canvas&gt;** - Canvas（画布）</span><br><span class="line">14. **&lt;caption&gt;** - Caption（标题）</span><br><span class="line">15. **&lt;cite&gt;** - Citation（引用）</span><br><span class="line">16. **&lt;code&gt;** - Code（代码）</span><br><span class="line">17. **&lt;col&gt;** - Column（列）</span><br><span class="line">18. **&lt;colgroup&gt;** - Column Group（列组）</span><br><span class="line">19. **&lt;data&gt;** - Data（数据）</span><br><span class="line">20. **&lt;datalist&gt;** - Data List（数据列表）</span><br><span class="line">21. **&lt;dd&gt;** - Description Definition（定义描述）</span><br><span class="line">22. **&lt;del&gt;** - Deleted Text（删除文本）</span><br><span class="line">23. **&lt;details&gt;** - Details（细节）</span><br><span class="line">24. **&lt;dfn&gt;** - Definition（定义）</span><br><span class="line">25. **&lt;dialog&gt;** - Dialog（对话框）</span><br><span class="line">26. **&lt;div&gt;** - Division（分区）</span><br><span class="line">27. **&lt;dl&gt;** - Description List（定义列表）</span><br><span class="line">28. **&lt;dt&gt;** - Description Term（定义术语）</span><br><span class="line">29. **&lt;em&gt;** - Emphasis（强调）</span><br><span class="line">30. **&lt;embed&gt;** - Embed（嵌入）</span><br><span class="line">31. **&lt;fieldset&gt;** - Field Set（字段集）</span><br><span class="line">32. **&lt;figcaption&gt;** - Figure Caption（图表标题）</span><br><span class="line">33. **&lt;figure&gt;** - Figure（图表）</span><br><span class="line">34. **&lt;footer&gt;** - Footer（页脚）</span><br><span class="line">35. **&lt;form&gt;** - Form（表单）</span><br><span class="line">36. **&lt;h1&gt;** to **&lt;h6&gt;** - Heading 1 to Heading 6（标题1到标题6）</span><br><span class="line">37. **&lt;head&gt;** - Head（头部）</span><br><span class="line">38. **&lt;header&gt;** - Header（页头）</span><br><span class="line">39. **&lt;hr&gt;** - Horizontal Rule（水平线）</span><br><span class="line">40. **&lt;html&gt;** - HyperText Markup Language（超文本标记语言）</span><br><span class="line">41. **&lt;i&gt;** - Italic（斜体）</span><br><span class="line">42. **&lt;iframe&gt;** - Inline Frame（内联框架）</span><br><span class="line">43. **&lt;img&gt;** - Image（图像）</span><br><span class="line">44. **&lt;input&gt;** - Input（输入）</span><br><span class="line">45. **&lt;ins&gt;** - Inserted Text（插入文本）</span><br><span class="line">46. **&lt;kbd&gt;** - Keyboard Input（键盘输入）</span><br><span class="line">47. **&lt;label&gt;** - Label（标签）</span><br><span class="line">48. **&lt;legend&gt;** - Legend（图例）</span><br><span class="line">49. **&lt;li&gt;** - List Item（列表项）</span><br><span class="line">50. **&lt;link&gt;** - Link（链接）</span><br><span class="line">51. **&lt;main&gt;** - Main Content（主要内容）</span><br><span class="line">52. **&lt;map&gt;** - Image Map（图像地图）</span><br><span class="line">53. **&lt;mark&gt;** - Marked Text（标记文本）</span><br><span class="line">54. **&lt;meta&gt;** - Meta Information（元信息）</span><br><span class="line">55. **&lt;meter&gt;** - Meter（计量）</span><br><span class="line">56. **&lt;nav&gt;** - Navigation（导航）</span><br><span class="line">57. **&lt;noscript&gt;** - No Script（无脚本）</span><br><span class="line">58. **&lt;object&gt;** - Object（对象）</span><br><span class="line">59. **&lt;ol&gt;** - Ordered List（有序列表）</span><br><span class="line">60. **&lt;optgroup&gt;** - Option Group（选项组）</span><br><span class="line">61. **&lt;option&gt;** - Option（选项）</span><br><span class="line">62. **&lt;output&gt;** - Output（输出）</span><br><span class="line">63. **&lt;p&gt;** - Paragraph（段落）</span><br><span class="line">64. **&lt;picture&gt;** - Picture（图片）</span><br><span class="line">65. **&lt;pre&gt;** - Preformatted Text（预格式化文本）</span><br><span class="line">66. **&lt;progress&gt;** - Progress（进度）</span><br><span class="line">67. **&lt;q&gt;** - Quote（引用）</span><br><span class="line">68. **&lt;rp&gt;** - Ruby Parenthesis（注释括号）</span><br><span class="line">69. **&lt;rt&gt;** - Ruby Text（注释文本）</span><br><span class="line">70. **&lt;ruby&gt;** - Ruby Annotation（注释）</span><br><span class="line">71. **&lt;s&gt;** - Strikethrough（删除线）</span><br><span class="line">72. **&lt;samp&gt;** - Sample Output（示例输出）</span><br><span class="line">73. **&lt;script&gt;** - Script（脚本）</span><br><span class="line">74. **&lt;section&gt;** - Section（节）</span><br><span class="line">75. **&lt;select&gt;** - Select List（选择列表）</span><br><span class="line">76. **&lt;small&gt;** - Small Text（小号文本）</span><br><span class="line">77. **&lt;source&gt;** - Source（来源）</span><br><span class="line">78. **&lt;span&gt;** - Span（跨度）</span><br><span class="line">79. **&lt;strong&gt;** - Strong Emphasis（强烈强调）</span><br><span class="line">80. **&lt;style&gt;** - Style（样式）</span><br><span class="line">81. **&lt;sub&gt;** - Subscript（下标）</span><br><span class="line">82. **&lt;summary&gt;** - Summary（摘要）</span><br><span class="line">83. **&lt;sup&gt;** - Superscript（上标）</span><br><span class="line">84. **&lt;table&gt;** - Table（表格）</span><br><span class="line">85. **&lt;tbody&gt;** - Table Body（表格主体）</span><br><span class="line">86. **&lt;td&gt;** - Table Data（表格数据）</span><br><span class="line">87. **&lt;template&gt;** - Template（模板）</span><br><span class="line">88. **&lt;textarea&gt;** - Text Area（文本区域）</span><br><span class="line">89. **&lt;tfoot&gt;** - Table Footer（表格脚部）</span><br><span class="line">90. **&lt;th&gt;** - Table Header（表头）</span><br><span class="line">91. **&lt;thead&gt;** - Table Head（表头部）</span><br><span class="line">92. **&lt;time&gt;** - Time（时间）</span><br><span class="line">93. **&lt;title&gt;** - Title（标题）</span><br><span class="line">94. **&lt;tr&gt;** - Table Row（表格行）</span><br><span class="line">95. **&lt;track&gt;** - Text Track（文本轨道）</span><br><span class="line">96. **&lt;u&gt;** - Underline（下划线）</span><br><span class="line">97. **&lt;ul&gt;** - Unordered List（无序列表）</span><br><span class="line">98. **&lt;var&gt;** - Variable（变量）</span><br><span class="line">99. **&lt;video&gt;** - Video（视频）</span><br><span class="line">100. **&lt;wbr&gt;** - Word Break Opportunity（单词断点）</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>个人感觉核心知识不多，都是些细枝末节的记忆点，学起来很快，主要还是要尽快在实践中深化理解</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git本地与远程</title>
      <link href="/tangBlog/2024/06/14/Git%E6%9C%AC%E5%9C%B0%E4%B8%8E%E8%BF%9C%E7%A8%8B/"/>
      <url>/tangBlog/2024/06/14/Git%E6%9C%AC%E5%9C%B0%E4%B8%8E%E8%BF%9C%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="Git本地与远程"><a href="#Git本地与远程" class="headerlink" title="Git本地与远程"></a>Git本地与远程</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然用了github好久了，也学过一遍git但在项目实操的时候还是遇到好多问题，于是痛定思痛写下这篇文章结合实践中暴露出的毛病来重新学习学习Git，问题主要集中在远程仓库方面。</p><h2 id="美化下git"><a href="#美化下git" class="headerlink" title="美化下git"></a>美化下git</h2><p>工欲善其事必先利其器，磨刀不误砍柴工，配置下branch相关的颜色，更好康些，用起来也更舒服😁</p><p>git中输入</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global --edit</span><br></pre></td></tr></table></figure><p>在里面加上这个👇</p> <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[color &quot;branch&quot;]</span><br><span class="line">        current = yellow reverse</span><br><span class="line">        local = green bold</span><br><span class="line">        remote = cyan ul</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>：wq保存退出后,看下效果吧</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git branch -v</span></span><br></pre></td></tr></table></figure><p>这样就把当前分支设置为好看的黄色，远端分支设置成青色，当地分支设为绿色o(￣▽￣)ｄ</p><hr><p>你也可以按自己喜好来配置</p><p>以下是如何在 Git 配置文件中应用这些样式的示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[color &quot;branch&quot;]</span><br><span class="line">    current = yellow bold</span><br><span class="line">    local = green dim</span><br><span class="line">    remote = cyan ul</span><br><span class="line">    plain = white blink</span><br><span class="line">    upstream = magenta reverse</span><br><span class="line">    gone = red italic</span><br></pre></td></tr></table></figure><p><strong>颜色</strong>👇</p><p><strong>normal</strong>：默认终端颜色</p><p><strong>black</strong>：黑色文字</p><p><strong>red</strong>：红色文字</p><p><strong>green</strong>：绿色文字</p><p><strong>yellow</strong>：黄色文字</p><p><strong>blue</strong>：蓝色文字</p><p><strong>magenta</strong>：洋红色文字</p><p><strong>cyan</strong>：青色文字</p><p><strong>white</strong>：白色文字</p><p><strong>样式</strong>👇</p><p><strong>bold</strong>：加粗</p><p><strong>dim</strong>：暗淡</p><p><strong>ul</strong>：下划线</p><p><strong>blink</strong>：闪烁</p><p><strong>reverse</strong>：反转</p><p><strong>italic</strong>：斜体</p><h2 id="将本地分支推到远程仓库"><a href="#将本地分支推到远程仓库" class="headerlink" title="将本地分支推到远程仓库"></a>将本地分支推到远程仓库</h2><h3 id="深入解析-git-remote-add-origin"><a href="#深入解析-git-remote-add-origin" class="headerlink" title="深入解析 git remote add origin"></a>深入解析 git remote add origin</h3><p>进入要上传的仓库，右键git bash，添加远程地址：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin git@github.com:yourName/yourRepo.git</span></span><br></pre></td></tr></table></figure><blockquote><p>别小看这句经常使用的命令，里面可大有门道</p><p>之后常要用到<strong>origin</strong>，那它到底是什么？</p></blockquote><p>可以通过👇查看</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote -v</span></span><br></pre></td></tr></table></figure><p><code>origin</code> 是 Git 中的一个默认命名惯例，通常用于指代克隆的远程仓库。它是一个远程仓库的别名，用于简化和方便地引用和操作远程仓库。</p><p>1.<strong>默认远程仓库</strong>： 当你使用 <code>git clone</code> 命令克隆一个远程仓库时，Git 会自动将这个远程仓库命名为 <code>origin</code>。例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/username/repository.git</span><br></pre></td></tr></table></figure><p>这会创建一个名为 <code>origin</code> 的远程指针，指向克隆的仓库。</p><p>2.<strong>远程仓库的别名</strong>： <code>origin</code> 是一个指向远程仓库 URL 的别名。你可以使用 <code>origin</code> 来代替实际的远程仓库 URL，简化命令操作。</p><p>也就是说我们其实可以将本地仓库和多个远程仓库建立联系</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git remote add origin2 git@github.com:yourName/yourRepo.git</span></span><br></pre></td></tr></table></figure><p>即将另一个远程仓库的ssh记为<strong>origin2</strong></p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240614195740221.png" alt="image-20240614195740221"></p><h4 id="相关操作👇"><a href="#相关操作👇" class="headerlink" title="相关操作👇"></a>相关操作👇</h4><p><strong>添加新的远程仓库</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add new-origin https://github.com/another-user/another-repository.git</span><br></pre></td></tr></table></figure><p><strong>修改现有远程仓库 URL</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote set-url origin https://github.com/username/new-repository.git</span><br></pre></td></tr></table></figure><p><strong>删除远程仓库</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote remove origin</span><br></pre></td></tr></table></figure><h3 id="深入解析git-push"><a href="#深入解析git-push" class="headerlink" title="深入解析git push"></a>深入解析git push</h3><p>然后就是git正常操作了</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br><span class="line">git commit -m &quot;abab&quot;</span><br><span class="line">git push</span><br></pre></td></tr></table></figure><p>真就这么简单吗？</p><p><em><strong>nonono，too young too simple</strong></em>，必须得好好讲讲<strong>git push</strong></p><blockquote><p>git push</p><p>其实是一种缩写</p><p>如果你当前在 <code>main</code> 分支上，并且该分支已经设置了仅有的远程分支，才可以直接使用 <code>git push</code> 命令来推送本地的 <code>main</code> 分支到远程仓库</p><p>所以当分支关联了多个远程仓库就不可以这么简单粗暴了</p></blockquote><h4 id="1-push到远程仓库的同名分支中（若无则建立）"><a href="#1-push到远程仓库的同名分支中（若无则建立）" class="headerlink" title="1.push到远程仓库的同名分支中（若无则建立）"></a>1.push到远程仓库的同名分支中（若无则建立）</h4><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt;</span><br></pre></td></tr></table></figure><p>当然记得要<code>git checkout &lt;branch&gt;</code>切换到要推送的分支上</p><h4 id="✨2-push到远程仓库的其他远程分支中"><a href="#✨2-push到远程仓库的其他远程分支中" class="headerlink" title="✨2.push到远程仓库的其他远程分支中"></a>✨2.push到远程仓库的其他远程分支中</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote&gt; &lt;local-branch&gt;:&lt;remote-branch&gt;</span><br></pre></td></tr></table></figure><blockquote><p>这个命令的语法是 <code>git push &lt;remote&gt; &lt;local-branch&gt;:&lt;remote-branch&gt;</code>。它的作用是将本地的 <code>local-branch</code> 分支推送到远程仓库<code>remote</code>的 <code>remote-branch</code> 分支。</p></blockquote><h4 id="相关操作👇-1"><a href="#相关操作👇-1" class="headerlink" title="相关操作👇"></a>相关操作👇</h4><p><strong>删除远程分支</strong>：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push &lt;remote-name&gt; --delete &lt;branch-name&gt;</span><br></pre></td></tr></table></figure><h3 id="补充下git-branch相关命令"><a href="#补充下git-branch相关命令" class="headerlink" title="补充下git branch相关命令"></a>补充下git branch相关命令</h3><p>这个其是就是一些补充操作</p><ul><li><p><code>git branch</code>：查看本地分支</p></li><li><p><code>git branch -r</code>：查看远程分支</p></li><li><p><code>git branch -a</code>：查看所有分支（本地和远程）</p></li><li><p><code>git branch -v</code>：显示分支详细信息</p></li><li><p><code>git branch &lt;branch-name&gt;</code>：创建新分支</p></li><li><p><code>git checkout -b &lt;branch-name&gt;</code>：创建并切换到新分支</p></li><li><p><code>git branch -d &lt;branch-name&gt;</code>：删除本地分支</p></li><li><p><code>git branch -D &lt;branch-name&gt;</code>：强制删除本地分支</p></li><li><p><code>git branch -m &lt;new-branch-name&gt;</code>：重命名当前分支</p></li><li><p><code>git branch -m &lt;old-branch-name&gt; &lt;new-branch-name&gt;</code>：重命名指定分支</p></li><li><p><code>git branch --set-upstream-to=&lt;remote&gt;/&lt;branch&gt; &lt;local-branch&gt;</code>：设置上游分支</p></li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>只有熟练了<code>git branch</code> 、<code>git remote </code>、 <code>git push</code>三类指令才能玩转<strong>本地仓库&#x2F;分支</strong>和<strong>远程仓库&#x2F;分支</strong></p><p>当然，在<strong>push or merge</strong>时候还会碰到个头疼问题，就是<strong>conflict</strong>冲突问题，有机会再说喽😁</p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式DesignPattern【2】--FactoryMethod</title>
      <link href="/tangBlog/2024/06/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FDesignPatterns%E3%80%902%E3%80%91-FactoryMethod/"/>
      <url>/tangBlog/2024/06/14/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FDesignPatterns%E3%80%902%E3%80%91-FactoryMethod/</url>
      
        <content type="html"><![CDATA[<h1 id="Factory-Method"><a href="#Factory-Method" class="headerlink" title="Factory Method"></a>Factory Method</h1><h2 id="学习资料"><a href="#学习资料" class="headerlink" title="学习资料"></a>学习资料</h2><ul><li>✨<a href="%5BJava%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E5%88%9B%E5%BB%BA%E5%9E%8B%EF%BC%9A%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E8%AF%A6%E8%A7%A3%EF%BC%88%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82+%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95+%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%EF%BC%89_%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F,%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F,%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F-CSDN%E5%8D%9A%E5%AE%A2%5D(https://blog.csdn.net/a745233700/article/details/120253639?ops_request_misc=%7B%22request_id%22:%22171721247816800227476690%22,%22scm%22:%2220140713.130102334..%22%7D&request_id=171721247816800227476690&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~top_positive~default-1-120253639-null-null.142%5Ev100%5Epc_search_result_base9&utm_term=%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F&spm=1018.2226.3001.4187)">CSDN-Java设计模式之创建型：工厂模式详解（简单工厂+工厂方法+抽象工厂）</a></li><li><a href="%5B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F(%E7%AE%80%E5%8D%95%E5%B7%A5%E5%8E%82%E3%80%81%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E3%80%81%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82">掘金-设计模式-工厂模式(简单工厂、工厂方法、抽象工厂) </a> - 掘金 (juejin.cn)](<a href="https://juejin.cn/post/7163177142577004558?searchId=202406011121230B6B30CF8DEB2B7469FB">https://juejin.cn/post/7163177142577004558?searchId=202406011121230B6B30CF8DEB2B7469FB</a>))</li><li><a href="https://refactoring.guru/design-patterns/factory-method">Factory Method (refactoring.guru)</a>)</li><li><a href="https://github.com/kamranahmedse/design-patterns-for-humans?tab=readme-ov-file#-simple-factory">kamranahmedse&#x2F;design-patterns-for-humans: An ultra-simplified explanation to design patterns (github.com)</a></li><li><a href="https://www.runoob.com/design-pattern/factory-pattern.html">工厂模式 | 菜鸟教程 (runoob.com)</a></li></ul><h2 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h2><h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>工厂方法模式将工厂抽象化，并定义一个创建对象的接口。每增加新产品，只需增加该产品以及对应的具体实现工厂类，由具体工厂类决定要实例化的产品是哪个，将对象的创建与实例化延迟到子类，这样工厂的设计就符合“开闭原则”了，<strong>扩展时不必去修改原来的代码</strong>。</p><p>在使用时，用于只需知道产品对应的具体工厂，关注具体的创建过程，甚至不需要知道具体产品类的类名，当我们选择哪个具体工厂时，就已经决定了实际创建的产品是哪个了。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>设计模式DesignPatterns</title>
      <link href="/tangBlog/2024/05/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FDesignPatterns/"/>
      <url>/tangBlog/2024/05/31/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8FDesignPatterns/</url>
      
        <content type="html"><![CDATA[<h2 id="学习资源"><a href="#学习资源" class="headerlink" title="学习资源"></a>学习资源</h2><ul><li>[菜鸟](<a href="https://www.runoob.com/design-pattern/design-pattern-intro.html">设计模式简介 | 菜鸟教程 (runoob.com)</a>)</li><li>[维基百科](<a href="https://en.wikipedia.org/wiki/Software_design_pattern">软件设计模式 - 维基百科，自由的百科全书 — Software design pattern - Wikipedia</a>)</li><li>⭐[**Refactoring.Guru**](<a href="https://refactoringguru.cn/design-patterns">常用设计模式有哪些？ (refactoringguru.cn)</a>)</li><li>[**github**](<a href="https://github.com/kamranahmedse/design-patterns-for-humans">kamranahmedse&#x2F;design-patterns-for-humans: An ultra-simplified explanation to design patterns (github.com)</a>)</li></ul><h2 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h2><p><em><strong>If all you have is a hammer, everything looks like a nail.</strong></em><br>如果你只有一把锤子，那么一切看起来都像钉子。</p><p>这是我看到的对于<strong>学习设计模式利弊</strong>的最好评语</p><p>学习设计模式的好处在于给于我们启示，以一种更加系统结构化的眼光看待问题，并在某种程度上有利于规避潜在问题的出现，但在另一反面一味的套用设计模式也僵化我们的思维，导致遇到什么问题都想机械的套用模板，哪怕是特别简单的问题，这反而会不利于项目的实现。</p><h3 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title="什么是设计模式"></a>什么是设计模式</h3><p>Design patterns are solutions to recurring problems; <strong>guidelines on how to tackle certain problems</strong>. They are not classes, packages or libraries that you can plug into your application and wait for the magic to happen. These are, rather, guidelines on how to tackle certain problems in certain situations.</p><blockquote><p>设计模式是反复出现的问题的解决方案;关于如何解决某些问题的指南。它们不是可以插入应用程序并等待奇迹发生的类、包或库。相反，这些是关于如何在某些情况下解决某些问题的指导方针。</p></blockquote><p>Design patterns are solutions to recurring problems; guidelines on how to tackle certain problems</p><blockquote><p>设计模式是反复出现的问题的解决方案;关于如何解决某些问题的指南</p></blockquote><p><strong>Design patterns</strong> are typical solutions to commonly occurring problems in software design. They are like pre-made blueprints that you can customize to solve a recurring design problem in your code.</p><blockquote><p>设计模式是软件设计中常见问题的典型解决方案。它们就像预制的蓝图，您可以对其进行自定义以解决代码中反复出现的设计问题。</p></blockquote><h4 id="与算法的区别"><a href="#与算法的区别" class="headerlink" title="与算法的区别"></a>与算法的区别</h4><p>Patterns are often confused with algorithms, because both concepts describe typical solutions to some known problems. While an algorithm always defines a clear set of actions that can achieve some goal, a pattern is a more high-level description of a solution. The code of the same pattern applied to two different programs may be different.</p><blockquote><p>模式经常与算法混淆，因为这两个概念都描述了一些已知问题的典型解决方案。虽然算法总是定义一组可以实现某些目标的明确操作，但模式是对解决方案的更高级描述。应用于两个不同程序的相同模式的代码可能不同。</p></blockquote><p>An analogy to an algorithm is a cooking recipe: both have clear steps to achieve a goal. On the other hand, a pattern is more like a blueprint: you can see what the result and its features are, but the exact order of implementation is up to you.</p><blockquote><p>算法的类比是烹饪食谱：两者都有明确的步骤来实现目标。另一方面，模式更像是蓝图：你可以看到结果和它的功能是什么，但确切的实现顺序取决于你。</p></blockquote><h4 id="设计模式的主要元素"><a href="#设计模式的主要元素" class="headerlink" title="设计模式的主要元素"></a>设计模式的主要元素</h4><ul><li><p><strong>Intent</strong> of the pattern briefly describes both the problem and the solution.</p><blockquote><p>模式的<strong>意图</strong>简要描述了问题和解决方案。</p></blockquote></li><li><p><strong>Motivation</strong> further explains the problem and the solution the pattern makes possible.</p><blockquote><p><strong>动机</strong>进一步解释了问题和模式使解决方案成为可能。</p></blockquote></li><li><p><strong>Structure</strong> of classes shows each part of the pattern and how they are related.</p><blockquote><p>类的<strong>结构</strong>显示了模式的每个部分以及它们之间的关系。</p></blockquote></li><li><p><strong>Code example</strong> in one of the popular programming languages makes it easier to grasp the idea behind the pattern.</p><blockquote><p>一种流行的编程语言的<strong>代码示例</strong>可以更轻松地掌握模式背后的思想。</p></blockquote></li></ul><h4 id="设计模式的六大原则"><a href="#设计模式的六大原则" class="headerlink" title="设计模式的六大原则"></a>设计模式的六大原则</h4><p><strong>1、开闭原则（Open Close Principle）</strong></p><p>开闭原则的意思是：<strong>对扩展开放，对修改关闭</strong>。在程序需要进行拓展的时候，不能去修改原有的代码，实现一个热插拔的效果。简言之，是为了使程序的扩展性好，易于维护和升级。想要达到这样的效果，我们需要使用接口和抽象类，后面的具体设计中我们会提到这点。</p><p><strong>2、里氏代换原则（Liskov Substitution Principle）</strong></p><p>里氏代换原则是面向对象设计的基本原则之一。 里氏代换原则中说，任何基类可以出现的地方，子类一定可以出现。LSP 是继承复用的基石，只有当派生类可以替换掉基类，且软件单位的功能不受到影响时，基类才能真正被复用，而派生类也能够在基类的基础上增加新的行为。里氏代换原则是对开闭原则的补充。实现开闭原则的关键步骤就是抽象化，而基类与子类的继承关系就是抽象化的具体实现，所以里氏代换原则是对实现抽象化的具体步骤的规范。</p><p><strong>3、依赖倒转原则（Dependence Inversion Principle）</strong></p><p>这个原则是开闭原则的基础，具体内容：针对接口编程，依赖于抽象而不依赖于具体。</p><p><strong>4、接口隔离原则（Interface Segregation Principle）</strong></p><p>这个原则的意思是：使用多个隔离的接口，比使用单个接口要好。它还有另外一个意思是：降低类之间的耦合度。由此可见，其实设计模式就是从大型软件架构出发、便于升级和维护的软件设计思想，它强调降低依赖，降低耦合。</p><p><strong>5、迪米特法则，又称最少知道原则（Demeter Principle）</strong></p><p>最少知道原则是指：一个实体应当尽量少地与其他实体之间发生相互作用，使得系统功能模块相对独立。</p><p><strong>6、合成复用原则（Composite Reuse Principle）</strong></p><p>合成复用原则是指：尽量使用合成&#x2F;聚合的方式，而不是使用继承。</p><h3 id="history-of-patterns"><a href="#history-of-patterns" class="headerlink" title="history of patterns"></a>history of patterns</h3><p> 设计模式的发明很难确定于某一具体的人，通常是在代码实践过程对于某类项目一次又一次的反复出现的解决方法，人们最终将其记录命名记录下来。</p><p>Who invented patterns? That’s a good, but not a very accurate, question. Design patterns aren’t obscure, sophisticated concepts—quite the opposite. Patterns are typical solutions to common problems in object-oriented design. When a solution gets repeated over and over in various projects, someone eventually puts a name to it and describes the solution in detail. That’s basically how a pattern gets discovered.</p><blockquote><p>谁发明了图案？这是一个很好的问题，但不是一个非常准确的问题。设计模式并不是晦涩难懂的复杂概念，恰恰相反。模式是面向对象设计中常见问题的典型解决方案。当一个解决方案在各种项目中一遍又一遍地重复时，最终会有人给它起一个名字并详细描述该解决方案。这基本上就是模式被发现的方式。</p></blockquote><p>The concept of patterns was first described by Christopher Alexander in <a href="https://refactoring.guru/pattern-language-book">A Pattern Language: Towns, Buildings, Construction</a>. The book describes a “language” for designing the urban environment. The units of this language are patterns. They may describe how high windows should be, how many levels a building should have, how large green areas in a neighborhood are supposed to be, and so on.</p><blockquote><p>模式的概念最早是由克里斯托弗·亚历山大（Christopher Alexander）在《模式语言：城镇、建筑物、建筑》一书中描述的。该书描述了一种设计城市环境的“语言”。这种语言的单位是模式。他们可能会描述窗户应该有多高，建筑物应该有多少层，社区中的绿地应该有多大，等等。</p></blockquote><p>The idea was picked up by four authors: Erich Gamma, John Vlissides, Ralph Johnson, and Richard Helm. In 1994, they published <a href="https://refactoring.guru/gof-book">Design Patterns: Elements of Reusable Object-Oriented Software</a>, in which they applied the concept of design patterns to programming. The book featured 23 patterns solving various problems of object-oriented design and became a best-seller very quickly. Due to its lengthy name, people started to call it “the book by the gang of four” which was soon shortened to simply “the GoF book”.</p><blockquote><p>这个想法被四位作者采纳：Erich Gamma、John Vlissides、Ralph Johnson 和 Richard Helm。1994 年，他们出版了《设计模式：可重用面向对象软件的元素》，其中他们将设计模式的概念应用于编程。这本书收录了 23 种模式，解决了面向对象设计的各种问题，并很快成为畅销书。由于它的名字很长，人们开始称它为“四人帮的书”，很快就被简称为“GoF书”。</p></blockquote><p>Since then, dozens of other object-oriented patterns have been discovered. The “pattern approach” became very popular in other programming fields, so lots of other patterns now exist outside of object-oriented design as well.</p><blockquote><p>从那时起，又发现了数十种其他面向对象的模式。“模式方法”在其他编程领域变得非常流行，因此现在在面向对象设计之外也存在许多其他模式。</p></blockquote><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li><p><strong>Creational patterns</strong> provide object creation mechanisms that increase flexibility and reuse of existing code.</p><blockquote><p>创建模式提供了对象创建机制，这些机制可提高现有代码的灵活性和重用性。</p></blockquote></li><li><p><strong>Structural patterns</strong> explain how to assemble objects and classes into larger structures, while keeping these structures flexible and efficient.</p><blockquote><p>结构模式解释了如何将对象和类组装成更大的结构，同时保持这些结构的灵活性和效率。</p></blockquote></li><li><p><strong>Behavioral patterns</strong> take care of effective communication and the assignment of responsibilities between objects.</p><blockquote><p>行为模式负责对象之间的有效沟通和责任分配。</p></blockquote></li></ul><table><thead><tr><th align="left">序号</th><th align="left">模式 &amp; 描述</th><th align="left">包括</th></tr></thead><tbody><tr><td align="left">1</td><td align="left"><strong>创建型模式</strong> 这些设计模式提供了一种在创建对象的同时隐藏创建逻辑的方式，<br />而不是使用 new 运算符直接实例化对象。这使得程序在判断针对某个给定实例需要创建哪些对象时更加灵活。</td><td align="left">工厂模式（Factory Pattern) <br />抽象工厂模式（Abstract Factory Pattern）<br />单例模式（Singleton Pattern）<br />建造者模式（Builder Pattern）<br />原型模式（Prototype Pattern）</td></tr><tr><td align="left">2</td><td align="left"><strong>结构型模式</strong> 这些模式关注对象之间的组合和关系，<br />旨在解决如何构建灵活且可复用的类和对象结构。</td><td align="left">适配器模式（Adapter Pattern）<br />桥接模式（Bridge Pattern）<br />过滤器模式（Filter、Criteria Pattern）<br />组合模式（Composite Pattern）<br />装饰器模式（Decorator Pattern）<br />外观模式（Facade Pattern）<br />享元模式（Flyweight Pattern）<br />代理模式（Proxy Pattern）</td></tr><tr><td align="left">3</td><td align="left"><strong>行为型模式</strong> 这些模式关注对象之间的通信和交互，<br />旨在解决对象之间的责任分配和算法的封装。</td><td align="left">责任链模式（Chain of Responsibility Pattern）<br />命令模式（Command Pattern）<br />解释器模式（Interpreter Pattern）<br />迭代器模式（Iterator Pattern）<br />中介者模式（Mediator Pattern）<br />备忘录模式（Memento Pattern）<br />观察者模式（Observer Pattern）<br />状态模式（State Pattern）<br />空对象模式（Null Object Pattern）<br />策略模式（Strategy Pattern）<br />模板模式（Template Pattern）<br />访问者模式（Visitor Pattern）</td></tr><tr><td align="left">4</td><td align="left"><strong>J2EE 模式</strong> 这些设计模式特别关注表示层。<br />这些模式是由 Sun Java Center 鉴定的。</td><td align="left">MVC 模式（MVC Pattern）<br />业务代表模式（Business Delegate Pattern）<br />组合实体模式（Composite Entity Pattern)数据访问对象模式（Data Access Object Pattern）<br />前端控制器模式（Front Controller Pattern）<br />拦截过滤器模式（Intercepting Filter Pattern）<br />服务定位器模式（Service Locator Pattern）<br />传输对象模式（Transfer Object Pattern）</td></tr></tbody></table>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>java语法回眸</title>
      <link href="/tangBlog/2024/05/21/java%E8%AF%AD%E6%B3%95%E5%9B%9E%E7%9C%B8/"/>
      <url>/tangBlog/2024/05/21/java%E8%AF%AD%E6%B3%95%E5%9B%9E%E7%9C%B8/</url>
      
        <content type="html"><![CDATA[<h1 id="java复习"><a href="#java复习" class="headerlink" title="java复习"></a>java复习</h1><h2 id="java特点"><a href="#java特点" class="headerlink" title="java特点"></a>java特点</h2><p>一些有关Java的专业术语</p><ul><li>JDK（Java Development Kit ）：编写Java程序的程序员使用的软件</li><li>JRE（Java Runtime Environment）：运行Java程序的用户使用的软件</li><li>Server JRE （Java SE Runtime Environment）：服务端使用的 Java 运行环境</li><li>SDK（Software Development Kit）：软件开发工具包，在Java中用于描述1998年~2006年之间的JDK</li><li>DAO（Data Access Object）：数据访问接口，数据访问，顾名思义就是与数据库打交道</li><li>MVC（Model View Controller）：模型(model)－视图(view)－控制器(controller)的缩写，一种软件设计典范，用于组织代码用一种业务逻辑和数据显示分离的方法</li><li>OOP（object-oriented programming）：面向对象程序设计</li></ul><p><strong>Java对所有参数都是按值传递的</strong></p><h2 id="修饰符"><a href="#修饰符" class="headerlink" title="修饰符"></a>修饰符</h2><h4 id="访问修饰符"><a href="#访问修饰符" class="headerlink" title="访问修饰符"></a>访问修饰符</h4><ul><li><strong>default</strong> (即默认，什么也不写）: 在同一包内可见，不使用任何修饰符。使用对象：类、接口、变量、方法。</li><li><strong>private</strong> : 在同一类内可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong></li><li><strong>public</strong> : 对所有类可见。使用对象：类、接口、变量、方法</li><li><strong>protected</strong> : 对同一包内的类和所有子类可见。使用对象：变量、方法。 <strong>注意：不能修饰类（外部类）</strong>。</li></ul><p><strong>private</strong> 的方法、变量和构造方法只能被所属类访问，并且类和接口不能声明为 <strong>private</strong></p><p><strong>public</strong> 的类、方法、构造方法和接口能够被任何其他类访问</p><h4 id="非访问修饰符"><a href="#非访问修饰符" class="headerlink" title="非访问修饰符"></a>非访问修饰符</h4><ul><li><p><strong>static</strong> 修饰符，用来修饰类方法和类变量。</p></li><li><p><strong>final</strong> 修饰符，用来修饰类、方法和变量，final 修饰的类不能够被继承，修饰的方法不能被继承类重新定义，修饰的变量为常量，是不可修改的。</p></li><li><p><strong>abstract</strong> 修饰符，用来创建抽象类和抽象方法。</p></li><li><p><strong>synchronized</strong> 和 <strong>volatile</strong> 修饰符，主要用于线程的编程。</p></li></ul><h5 id="final"><a href="#final" class="headerlink" title="final"></a><strong>final</strong></h5><ul><li><strong>final 变量</strong></li></ul><p>被 final 修饰的实例变量必须显式指定初始值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="variable">value</span> <span class="operator">=</span> <span class="number">10</span>;</span><br></pre></td></tr></table></figure><ul><li><strong>final 方法</strong></li></ul><p>父类中的 final 方法<strong>可以被子类继承</strong>，但是<strong>不能被子类重写</strong>。</p><p>声明 final 方法的主要目的是防止该方法的内容被修改</p><ul><li><strong>final 类</strong></li></ul><p>final 类<strong>不能被继承</strong>，没有类能够继承 final 类的任何特性</p><h5 id="static"><a href="#static" class="headerlink" title="static"></a>static</h5><ul><li><p><strong>静态变量：</strong></p><p>static 关键字用来声明独立于对象的静态变量，无论一个类实例化多少对象，它的静态变量只有一份拷贝。 静态变量也被称为类变量。局部变量不能被声明为 static 变量。</p></li><li><p><strong>静态方法：</strong></p><p>static 关键字用来声明独立于对象的静态方法。静态方法不能使用类的非静态变量。静态方法从参数列表得到数据，然后计算这些数据。</p></li></ul><p>静态字段（静态常量）</p><p>静态变量 static final</p><ul><li><strong>静态变量或类变量（Class Variables）：</strong>类变量是在类中用 static 关键字声明的变量，它们属于类而不是实例，所有该类的实例共享同一个类变量的值，类变量在类加载时被初始化，而且只初始化一次。</li></ul><p><strong>常量和静态变量的区别：</strong>常量也是与类相关的，但它是用 final 关键字修饰的变量，一旦被赋值就不能再修改。与静态变量不同的是，常量在编译时就已经确定了它的值，而静态变量的值可以在运行时改变。另外，常量通常用于存储一些固定的值，如数学常数、配置信息等，而静态变量通常用于存储可变的数据，如计数器、全局状态等。</p><p>总之，静态变量是与类相关的变量，具有唯一性和共享性，可以用于存储整个程序都需要使用的数据，但需要注意初始化时机和与常量的区别。</p><p><strong>静态变量和实例变量区别：</strong></p><p>静态变量属于类，该类不生产对象，通过类名就可以调用静态变量。</p><p>实例变量属于该类的对象，必须产生该类对象，才能调用实例变量。</p><p><strong>静态变量的使用场景</strong></p><p>静态变量通常用于以下场景：</p><ul><li>存储全局状态或配置信息</li><li>计数器或统计信息</li><li>缓存数据或共享资源</li><li>工具类的常量或方法</li><li>单例模式中的实例变量</li></ul><h5 id="abstract"><a href="#abstract" class="headerlink" title="abstract"></a>abstract</h5><ul><li>抽象类</li><li>抽象方法</li></ul><h5 id="synchronized"><a href="#synchronized" class="headerlink" title="synchronized"></a>synchronized</h5><h5 id="transient"><a href="#transient" class="headerlink" title="transient"></a>transient</h5><h5 id="volatile"><a href="#volatile" class="headerlink" title="volatile"></a>volatile</h5><h2 id="基本数据类型及其函数"><a href="#基本数据类型及其函数" class="headerlink" title="基本数据类型及其函数"></a>基本数据类型及其函数</h2><h3 id="Number-Math类"><a href="#Number-Math类" class="headerlink" title="Number &amp; Math类"></a>Number &amp; Math类</h3><p>[具体函数自己看](<a href="https://www.runoob.com/java/java-number.html">Java Number &amp; Math 类 | 菜鸟教程 (runoob.com)</a>)</p><h3 id="Character-String-StringBuffer类"><a href="#Character-String-StringBuffer类" class="headerlink" title="Character &amp; String &amp; StringBuffer类"></a>Character &amp; String &amp; StringBuffer类</h3><p>[具体函数自己看](<a href="https://www.runoob.com/java/java-string.html">Java String 类 | 菜鸟教程 (runoob.com)</a>)</p><ul><li><p><a href="https://www.runoob.com/java/java-string-concat.html"> String concat(String str)</a> 将指定字符串连接到此字符串的结尾。</p></li><li><p><a href="https://www.runoob.com/java/java-string-length.html"> int length()</a> 返回此字符串的长度。</p></li><li><p><a href="https://www.runoob.com/java/java-string-trim.html"> String trim()</a> 返回字符串的副本，忽略前导空白和尾部空白。</p></li></ul><h2 id="最重要的OOP思想"><a href="#最重要的OOP思想" class="headerlink" title="最重要的OOP思想"></a>最重要的OOP思想</h2><ul><li><p>类（class）</p></li><li><p>对象（object）</p></li><li><p>实例（instance）</p></li><li><p>多态</p></li><li><p>继承（inheritance）</p></li><li><p>封装（encapsulation）</p></li><li><p>方法</p></li><li><p>抽象类</p></li><li><p>重载</p></li><li><p>重写</p></li></ul><h3 id="对象是类的实例，类是对象的抽象"><a href="#对象是类的实例，类是对象的抽象" class="headerlink" title="对象是类的实例，类是对象的抽象"></a>对象是类的实例，类是对象的抽象</h3><p>构造器（constructor）用来创造实例</p><p>访问器 getter setter 实现封装</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Achievement</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//instance fields</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> achievementId;</span><br><span class="line">    <span class="keyword">private</span> String title;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> isfinished;</span><br><span class="line"></span><br><span class="line"><span class="comment">//constructor</span></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Achievement</span><span class="params">(<span class="type">int</span> achievementId, String title, <span class="type">boolean</span> isfinished)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.achievementId = achievementId;</span><br><span class="line">        <span class="built_in">this</span>.title = title;</span><br><span class="line">        <span class="built_in">this</span>.isfinished = isfinished;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//method</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAchievementId</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> achievementId+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getTitle</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> title;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isIsfinished</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> isfinished;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setIsfinished</span><span class="params">(<span class="type">boolean</span> isfinished)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.isfinished = isfinished;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="继承（inheritance）"><a href="#继承（inheritance）" class="headerlink" title="继承（inheritance）"></a>继承（inheritance）</h3><h4 id="extends关键字"><a href="#extends关键字" class="headerlink" title="extends关键字"></a>extends关键字</h4><p>在 Java 中，类的继承是单一继承，也就是说，一个子类只能拥有一个父类，所以 extends 只能继承一个类。</p><h4 id="implements关键字"><a href="#implements关键字" class="headerlink" title="implements关键字"></a>implements关键字</h4><p>使用 implements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">A</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">eat</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">sleep</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">B</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">show</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">C</span> <span class="keyword">implements</span> <span class="title class_">A</span>,B &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重写-Override-与重载-Overload"><a href="#重写-Override-与重载-Overload" class="headerlink" title="重写(Override)与重载(Overload)"></a>重写(Override)与重载(Overload)</h3><ul><li><p><strong>重写（Override）</strong>是指子类定义了一个与其父类中具有相同名称、参数列表和返回类型的方法，并且子类方法的实现覆盖了父类方法的实现。 <strong>即外壳不变，核心重写！</strong></p><p>当需要在子类中调用父类的被重写方法时，要使用 <strong>super</strong> 关键字。</p></li><li><p><strong>重载(overloading)</strong> 是在一个类里面，方法名字相同，而参数不同。返回类型可以相同也可以不同。</p></li><li><p><strong>方法重载</strong>是一个类的多态性表现,而<strong>方法重写</strong>是子类与父类的一种多态性表现</p></li></ul><p>重写是将父类的方法逻辑重写（儿子叛逆但未变异）</p><p>重载是使同名方法有不同逻辑</p><h4 id="方法的重写规则"><a href="#方法的重写规则" class="headerlink" title="方法的重写规则"></a>方法的重写规则</h4><ul><li>参数列表与被重写方法的参数列表必须完全相同。</li><li>返回类型与被重写方法的返回类型可以不相同，但是必须是父类返回值的派生类（java5 及更早版本返回类型要一样，java7 及更高版本可以不同）。</li><li>访问权限不能比父类中被重写的方法的访问权限更低。例如：如果父类的一个方法被声明为 public，那么在子类中重写该方法就不能声明为 protected。</li><li>父类的成员方法只能被它的子类重写。</li><li>声明为 final 的方法不能被重写。</li><li>声明为 static 的方法不能被重写，但是能够被再次声明。</li><li>子类和父类在同一个包中，那么子类可以重写父类所有方法，除了声明为 private 和 final 的方法。</li><li>子类和父类不在同一个包中，那么子类只能够重写父类的声明为 public 和 protected 的非 final 方法。</li><li>重写的方法能够抛出任何非强制异常，无论被重写的方法是否抛出异常。但是，重写的方法不能抛出新的强制性异常，或者比被重写方法声明的更广泛的强制性异常，反之则可以。</li><li>构造方法不能被重写。</li><li>如果不能继承一个类，则不能重写该类的方法。</li></ul><h4 id="重载规则"><a href="#重载规则" class="headerlink" title="重载规则"></a><strong>重载规则</strong></h4><ul><li>被重载的方法必须改变参数列表(参数个数或类型不一样)；</li><li>被重载的方法可以改变返回类型；</li><li>被重载的方法可以改变访问修饰符；</li><li>被重载的方法可以声明新的或更广的检查异常；</li><li>方法能够在同一个类中或者在一个子类中被重载。</li><li>无法以返回值类型作为重载函数的区分标准。</li></ul><h4 id="重写与重载之间的区别"><a href="#重写与重载之间的区别" class="headerlink" title="重写与重载之间的区别"></a>重写与重载之间的区别</h4><table><thead><tr><th align="left">区别点</th><th align="left">重载方法</th><th align="left">重写方法</th></tr></thead><tbody><tr><td align="left">参数列表</td><td align="left">必须修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">返回类型</td><td align="left">可以修改</td><td align="left">一定不能修改</td></tr><tr><td align="left">异常</td><td align="left">可以修改</td><td align="left">可以减少或删除，一定不能抛出新的或者更广的异常</td></tr><tr><td align="left">访问</td><td align="left">可以修改</td><td align="left">一定不能做更严格的限制（可以降低限制）</td></tr></tbody></table><h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul><li>抽象类中不一定包含抽象方法，但是有抽象方法的类必定是抽象类</li><li>抽象类的子类必须给出抽象类中的抽象方法的具体实现，除非该子类也是抽象类</li></ul><h3 id="枚举类（enum）"><a href="#枚举类（enum）" class="headerlink" title="枚举类（enum）"></a>枚举类（enum）</h3><h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类是定义在另一个类内部的类</p><h3 id="内部类的类型"><a href="#内部类的类型" class="headerlink" title="内部类的类型"></a>内部类的类型</h3><p>写着就明白了（帮忙简化代码的）</p><ol><li><strong>成员内部类</strong>（Member Inner Class）</li><li><strong>局部内部类</strong>（Local Inner Class）</li><li><strong>匿名内部类</strong>（Anonymous Inner Class）</li><li><strong>静态内部类</strong>（Static Nested Class）</li></ol><p>成员内部类定义在另一个类的内部，并且作为外部类的一个成员存在。它可以访问外部类的所有成员，包括私有成员。</p><p>局部内部类定义在方法或作用域块中。它只能在该方法或作用域块内使用。</p><p>匿名内部类是一种没有名字的内部类，通常用来简化代码，尤其是用于实现接口或抽象类的实例。</p><p>静态内部类使用 <code>static</code> 修饰，独立于外部类的实例。它只能访问外部类的静态成员。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HomePage</span> <span class="keyword">extends</span> <span class="title class_">BaseActivity</span> &#123; </span><br><span class="line">    <span class="comment">//内部类</span></span><br><span class="line">    <span class="keyword">private</span> ImageButton btnZhaomu;</span><br><span class="line">    btnZhaomu.setOnClickListener(<span class="keyword">new</span> <span class="title class_">View</span>.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onClick</span><span class="params">(View v)</span> &#123;</span><br><span class="line">                <span class="type">Intent</span> <span class="variable">intent</span> <span class="operator">=</span> Achievement_Activity.newIntent(HomePage.<span class="built_in">this</span>);</span><br><span class="line">                startActivity(intent);</span><br><span class="line">                finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Git基础</title>
      <link href="/tangBlog/2024/05/03/Git%E5%9F%BA%E7%A1%80/"/>
      <url>/tangBlog/2024/05/03/Git%E5%9F%BA%E7%A1%80/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h2><p>需要会点linux和shell才能方便进行一些基本操作</p><p>linux</p><ul><li>ls（英文全拼：list files）: 列出目录及文件名</li><li>cd（英文全拼：change directory）：切换目录</li><li>pwd（英文全拼：print work directory）：显示目前的目录</li><li>mkdir（英文全拼：make directory）：创建一个新的目录</li><li>rmdir（英文全拼：remove directory）：删除一个空的目录</li><li>cp（英文全拼：copy file）: 复制文件或目录</li><li>rm（英文全拼：remove）: 删除文件或目录</li><li>mv（英文全拼：move file）: 移动文件与目录，或修改文件与目录的名称</li></ul><p>shell</p><ul><li><strong>i</strong> – 切换到输入模式，在光标当前位置开始输入文本。</li><li><strong>x</strong> – 删除当前光标所在处的字符。</li><li><strong>:</strong> – 切换到底线命令模式，以在最底一行输入命令。</li><li><strong>a</strong> – 进入插入模式，在光标下一个位置开始输入文本。</li><li><strong>o</strong>：在当前行的下方插入一个新行，并进入插入模式。</li><li><strong>O</strong> – 在当前行的上方插入一个新行，并进入插入模式。</li><li><strong>dd</strong> – 剪切当前行。</li><li><strong>yy</strong> – 复制当前行。</li><li><strong>p</strong>（小写） – 粘贴剪贴板内容到光标下方。</li><li><strong>P</strong>（大写）– 粘贴剪贴板内容到光标上方。</li><li><strong>u</strong> – 撤销上一次操作。</li><li><strong>Ctrl + r</strong> – 重做上一次撤销的操作。</li><li><strong>:w</strong> – 保存文件。</li><li><strong>:q</strong> – 退出 Vim 编辑器。</li><li><strong>:q!</strong> – 强制退出Vim 编辑器，不保存修改。</li></ul><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git -v   </span><br><span class="line"></span><br><span class="line">git config  --global user.name &quot;&lt;username&gt;&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &lt;email&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">git环境配置信息</span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427132446217.png" alt="image-20240427132446217"></p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">create a new <span class="built_in">dir</span> to store the gitreso</span></span><br><span class="line">mkdir &lt;dirname&gt;</span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">look all resouce</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">create a new git reso <span class="keyword">in</span> the present <span class="built_in">dir</span></span></span><br><span class="line">git init &lt;newdirname&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427133258830.png" alt="image-20240427133258830"></p><h2 id="git-workspace-and-file-status"><a href="#git-workspace-and-file-status" class="headerlink" title="git workspace and file status"></a>git workspace and file status</h2><p>git workspace</p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427134557468.png" alt="image-20240427134557468">file status</p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427135209734.png" alt="image-20240427135209734"></p><p>untrack *the new created file</p><p>unmodified  *the unchanged git file</p><p>modified *the changed git file but haven’t add into the Staging Area</p><p>staged *the changed git file and already add into the SA</p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427135733187.png" alt="image-20240427135733187"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">present gitdir status</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add file to AS</span></span><br><span class="line">git add &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add present <span class="built_in">dir</span><span class="string">&#x27;s all changed file to AS</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;</span>.<span class="string">&#x27; means to present dir</span></span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">add all the type of files is .txt to AS</span></span></span><br><span class="line">git add *.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commit the files <span class="keyword">in</span> AS</span></span><br><span class="line">git commit -m &quot;&lt;title&gt;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">into Vim mode to commit files <span class="keyword">in</span> AS</span></span><br><span class="line">git commit </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">finish add and commit at onec</span></span><br><span class="line">git commit -am &quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">search past commit record</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">brief commit record</span></span><br><span class="line">git log --oneline</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427195749947.png" alt="image-20240427195749947"></p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427195931931.png" alt="image-20240427195931931"></p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427200045013.png" alt="image-20240427200045013"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git log --online</span><br><span class="line"></span><br><span class="line">git reset --soft &lt;commit_hash&gt;</span><br><span class="line">git reset --hard &lt;commit_hash&gt;</span><br><span class="line">git reset --mixed &lt;commit_hash&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">roolback to last version</span></span><br><span class="line">git reset --sofe HEAD^</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">roolback roolback to the last version</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># to get the version number</span></span></span><br><span class="line">git reflog</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># roolback roolback to the last version</span></span></span><br><span class="line">gir reset --hard &lt;commit_hash&gt;</span><br></pre></td></tr></table></figure><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>usually use the GUI tools</p><p>but sometimes we need to learn about it to run some machine which without GUI tools </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compare diffrences between the Working directory and Staging area</span></span><br><span class="line">git diff</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compare diffrences between the Working directory and <span class="built_in">local</span> repository</span></span><br><span class="line">git diff HEAD</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compare diffrences between the Staging area and <span class="built_in">local</span> repository</span></span><br><span class="line">git diff --cached</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compare diffrences between two version file</span></span><br><span class="line">git diff &lt;commit_hash1&gt; &lt;commit_hash2&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># two symbol</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;HEAD&#x27;</span> means present version</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;~&#x27;</span> or <span class="string">&#x27;^&#x27;</span> means last version</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">so we can <span class="keyword">do</span> like this to</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line">git diff HEAD~ HEAD</span><br><span class="line">git diff HEAD^ HEAD</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and we can input a number behind the ~ <span class="built_in">which</span> means last N verision</span></span><br><span class="line">git diff HEAD~2 HEAD</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check specific files diff</span></span><br><span class="line">git diff HEAD~2 HEAD &lt;filename&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427202747326.png" alt="image-20240427202747326"></p><h2 id="rm-files"><a href="#rm-files" class="headerlink" title="rm files"></a>rm files</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">just remove the files <span class="keyword">in</span> Working dirctory but doesn<span class="string">&#x27;s remove in AS</span></span> </span><br><span class="line">rm &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">so we need git add . to update the diff into AS</span></span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">or we can  rm directly by use git rm</span></span></span><br><span class="line">git rm &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">rm files in local repository but don&#x27;</span>t <span class="built_in">rm</span> <span class="keyword">in</span> WD</span></span><br><span class="line">git rm --cached &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">at last we need to commit to updata diff into <span class="built_in">local</span> repository</span></span><br><span class="line">git commit -m &quot;&quot;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427204153159.png" alt="image-20240427204153159"></p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427204329307.png" alt="image-20240427204329307"></p><p>we can search template in github</p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427205948513.png" alt="image-20240427205948513"></p><h2 id="clone-remote-Repo"><a href="#clone-remote-Repo" class="headerlink" title="clone remote Repo"></a>clone remote Repo</h2><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427210451419.png" alt="image-20240427210451419"></p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427210545105.png" alt="image-20240427210545105"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ROS</title>
      <link href="/tangBlog/2024/04/22/ROS/"/>
      <url>/tangBlog/2024/04/22/ROS/</url>
      
        <content type="html"><![CDATA[<h1 id="ROS"><a href="#ROS" class="headerlink" title="ROS"></a>ROS</h1><h2 id="Ros是什么"><a href="#Ros是什么" class="headerlink" title="Ros是什么"></a>Ros是什么</h2><p>模块化、分布式</p><p>ROS： An Open-Source Robot Operating System</p><p>机器人界的Android</p><h2 id="Ubuntu-入门"><a href="#Ubuntu-入门" class="headerlink" title="Ubuntu 入门"></a>Ubuntu 入门</h2><p>中英文切换 shift   win+space</p><p>系统文件</p><p>连接网络 右上角</p><p>终端程序 CTRL+L+T</p><ol><li>ls list 罗列清单</li><li>mkdir make directory 创建新的目录</li><li>cd change directory 进入目录</li><li>cd .. 回到上级目录</li><li>cd~ 回到主文件夹</li><li>Tap 自动补全指令或目录</li></ol><p>gedit  编辑 文本编辑器类似txt</p><p>source 执行文件</p><p>终端启动脚本 .bashrc</p><p>sudo 管理员执行</p><h2 id="github资源下载"><a href="#github资源下载" class="headerlink" title="github资源下载"></a>github资源下载</h2><p>scripts 目录用于放置脚本文件（安装依赖包等低频率的操作）和python程序</p><h3 id="资源寻找"><a href="#资源寻找" class="headerlink" title="资源寻找"></a>资源寻找</h3><ol><li>Index.ros上搜索</li><li>GitHub上搜索</li></ol><h3 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h3><p>cd catkin_ws&#x2F;src&#x2F;    进入src文件</p><p>git clone https…..     下载资源到src上</p><p>cd  ~&#x2F;catkin_ws&#x2F;    进入catkin_ws目录</p><p>catkin_make    编译</p><p>Terminator   超级终端 Ctrl+Alt+T</p><ol><li><p>ctrl +shift +E 左右分屏终端</p></li><li><p>ctrl +shift+O 上下分屏终端</p></li><li><p>ALT + ←方向键 切换终端操作焦点</p></li><li><p>ctrl +shift +W 关闭当前终端</p></li></ol><h2 id="Node-package"><a href="#Node-package" class="headerlink" title="Node &amp; package"></a>Node &amp; package</h2><p>vscode 快捷键</p><ol><li>ctrl + shift + B   编译</li></ol><p>基本流程</p><ol><li>使用catkin_create_pkg创建一个软件包</li><li>在软件包的src文件夹下创建一个节点的cpp源码文件</li><li>在节点的源码文件中#include  &lt;ros&#x2F;ros.h&gt;</li><li>构建一个main，并在函数的开头执行ros：：init（）</li><li>构建while循环，while（ros：：ok（））；</li><li>在CMakeLists.txt中设置节点源码的编译规则</li><li>ctrl shift b 编译</li><li>终端 rosrun &lt;packagename&gt; &lt;nodename&gt;运行</li></ol><h2 id="Topic-Message"><a href="#Topic-Message" class="headerlink" title="Topic &amp; Message"></a>Topic &amp; Message</h2><p>发送方publisher   接收方subscriber</p><ol><li>Topic 是nodes间进行<strong>持续通信</strong>的一种形式</li><li>nodes间通过话题名称建立其话题通讯连接</li><li>Message 通讯的数据</li><li>Message 按一定频率持续不断的发送，以保证消息数据的实时性</li></ol>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>python数据分析</title>
      <link href="/tangBlog/2024/04/12/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/"/>
      <url>/tangBlog/2024/04/12/python%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90/</url>
      
        <content type="html"><![CDATA[<p>﻿# 数据分析(1)</p><p>这篇简单介绍一下数据分析中常用到的几个库函数，强烈推荐使用<strong>JupyterNotebook</strong>，有机会写一篇教程速通一下，下面的图也都是直接从Jupyter中截取出来的。</p><h2 id="基础库介绍"><a href="#基础库介绍" class="headerlink" title="基础库介绍"></a>基础库介绍</h2><table><thead><tr><th>Numpy</th><th>Pandas</th><th>Matplotlib</th></tr></thead><tbody><tr><td>主要用于<strong>处理多维数组和矩阵运算</strong></td><td>用于<strong>数据处理和分析</strong>的库，提供了DataFrame数据结构和各种数据操作功能，如数据清洗、转换、筛选等</td><td>用于<strong>数据可视化</strong>的库，提供了各种绘图函数和工具，可以创建各种类型的图表，如折线图、柱状图、散点图等</td></tr></tbody></table><h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a><a href="https://numpy.org/">Numpy</a></h3><p>简介：NumPy 是 Python 中科学计算的基础包。它是一个 Python 库，提供多维数组对象、各种派生对象（例如掩码数组和矩阵）以及用于对数组进行快速操作的各种例程，包括数学、逻辑、形状操作、排序、选择、I&#x2F;O、离散傅里叶变换、基本线性代数、基本统计运算、随机模拟等等。</p><p><strong>数组array</strong>是 NumPy 库的中心数据结构。数组是值的网格，它包含有关原始数据、如何定位元素以及如何解释元素的信息。它有一个元素网格，可以以各种方式进行索引。这些元素都属于同一类型，称为数组 dtype 。</p><p><em><strong>人话就是方便进行数组、矩阵运算</strong></em></p><p><a href="https://scipy.org/">Scipy</a></p><p>简介：Scipy是一个基于NumPy的Python科学计算库，提供了更多高级的数学、科学和工程计算功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建初始数组(矩阵)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1d array&quot;</span>)</span><br><span class="line">a = np.arange(<span class="number">6</span>)                    <span class="comment"># 1d array</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2d array&quot;</span>)</span><br><span class="line">b = np.arange(<span class="number">12</span>).reshape(<span class="number">4</span>, <span class="number">3</span>)     <span class="comment"># 2d array</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3d array&quot;</span>)</span><br><span class="line">c = np.arange(<span class="number">30</span>).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>)  <span class="comment"># 3d array</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">arr = np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/bde94e8e101d49bab9136bf332631ba0.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数组运算 maximum, minimum, sum, mean, product, standard deviation, and more</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.hist(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max:&quot;</span>,arr.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;min:&quot;</span>,arr.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mean:&quot;</span>,arr.mean())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum:&quot;</span>,arr.<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># import matplotlib.pyplot as plt</span></span><br><span class="line"><span class="comment"># plt.hist(arr,bins=15)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;std:&quot;</span>,arr.std())</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e6ba736217df40c4b32f8b4c0e7501f7.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#矩阵运算</span></span><br><span class="line">matrix=np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b245afa4796b469b9a92d4d5515e3b50.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按行/列求最大值 列：axis=0，行：axis=1</span></span><br><span class="line">m0=matrix.<span class="built_in">max</span>(axis=<span class="number">0</span>)</span><br><span class="line">m1=matrix.<span class="built_in">max</span>(axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(m0)</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/08615b67de6645d4919e376a72c3bb94.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reshape重塑矩阵 arr.reshape()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;reshape&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br><span class="line">rmatrix=matrix.reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(rmatrix)</span><br><span class="line"></span><br><span class="line"><span class="comment">#transpose 转置  arr.transpose() arr.T</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;transpose&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(matrix.transpose())</span><br><span class="line"><span class="built_in">print</span>(matrix.T)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/5d7625b6714d41baa519f51a0e38fee5.png#pic_center" alt="在这里插入图片描述"></p><h3 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a><a href="https://matplotlib.org/">Matplotlib</a></h3><p><em><strong>人话就是画图的</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x1=np.random.rand(<span class="number">10</span>)</span><br><span class="line">x2=np.random.rand(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">221</span>) </span><br><span class="line">ax.plot(x1)</span><br><span class="line">ax = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">ax.plot(x2)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/22057b4953214adaac6d4b14e14117fb.png#pic_center" alt="在这里插入图片描述"></p><p>你可以一个一个设置基础属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating subplot/axes</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting plot title</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;My plot title&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting X-axis and Y-axis limits</span></span><br><span class="line">ax.set_xlim([<span class="number">0</span>, <span class="number">10</span>])</span><br><span class="line">ax.set_ylim([-<span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting X-axis and Y-axis labels</span></span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;My y-axis label&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;My x-axis label&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Showing the plot</span></span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/bb5c3514784b44d99054795fe3995679.png#pic_center" alt="在这里插入图片描述"></p><p>也可以一口气设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating subplot/axes</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting title and axes properties</span></span><br><span class="line">ax.<span class="built_in">set</span>(title=<span class="string">&#x27;An Axes Title&#x27;</span>, xlim=[<span class="number">0</span>, <span class="number">10</span>], ylim=[-<span class="number">5</span>, <span class="number">5</span>], ylabel=<span class="string">&#x27;My y-axis label&#x27;</span>, xlabel=<span class="string">&#x27;My x-axis label&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/a3bbafbdc78e406c816d304662bc608f.png#pic_center" alt="在这里插入图片描述"></p><p>下面主要以plot为例，matplotlib的<a href="https://matplotlib.org/stable/plot_types/index.html">图像类型</a>其实相当丰富</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x=np.random.rand(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot lists &#x27;x&#x27; </span></span><br><span class="line">plt.plot(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot axes labels and show the plot</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;X-axis Label&#x27;</span>)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4efd91dfed2c4959bc298a1b273cb5f7.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a figure with four subplots and shared axes</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.random.rand(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Upper Left&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].plot(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置颜色</span></span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Upper Right&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].plot(x,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置线条</span></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Lower Left&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].plot(x,<span class="string">&#x27;g*--&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##标记点和线条颜色分开</span></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Lower Right&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].plot(x,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].plot(x,<span class="string">&#x27;r*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/d4c9a34ab336413784c696061ed460dc.png#pic_center" alt="在这里插入图片描述"></p><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a><a href="https://pandas.pydata.org/">Pandas</a></h3><p>Pandas 提供两种基本类型的数据结构:Series和Dataframe</p><p>Series是可以保存任何类型数据的一维数组</p><p>Dataframe 一种二维结构，用于将数据保存在包含行和列的表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s1 = pd.Series([<span class="number">23</span>,<span class="number">324</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;ABC&quot;</span>,<span class="string">&quot;DEF&quot;</span>,-<span class="number">123</span>])</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4cb7bf87e7e247b68135f182390da732.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s2 = pd.Series([<span class="number">23</span>,<span class="number">324</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;ABC&quot;</span>,<span class="string">&quot;DEF&quot;</span>,-<span class="number">123</span>],index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我们设置的index&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s2[<span class="string">&quot;b&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/8382a524a0ad48ebb4ab5bc769b125e5.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s3 = pd.Series(np.random.rand(<span class="number">100000</span>))</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"></span><br><span class="line"><span class="comment">##使用pandas自带的制图函数</span></span><br><span class="line">ax = s3.plot.hist(bins=<span class="number">100</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;Number&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;Entries per bin&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;Uniform distribution&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/32647e00425a4ad9b5dcabaf44c45681.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">##也可以使用matplotlib的</span></span><br><span class="line">plt.hist(s3,bins=<span class="number">100</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Uniform distribution&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/0c1e5dc6afc34d1fadedf1e199ce97d1.png#pic_center" alt="在这里插入图片描述"></p><p>Dataframes</p><p>一些主要功能：<br>数据表示：以包含行和列的表格式存储数据。<br>异构数据类型：可以在不同的列（例如，整数、浮点数、字符串、布尔值）中保存不同的数据类型。<br>标签：每行和每列都有一个标签（索引和列名称）。<br>可变：允许数据操作和修改。<br>强大的操作：提供用于数据分析、操作和探索的各种功能和方法。<br>可扩展：可以通过库和用户定义的函数使用其他功能进行自定义和扩展。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: [<span class="string">&quot;drunksweet&quot;</span>, <span class="string">&quot;jiaotangjiu&quot;</span>,<span class="string">&quot;soubai&quot;</span>,<span class="string">&quot;drunksweet&quot;</span>, <span class="string">&quot;jiaotangjiu&quot;</span>,<span class="string">&quot;soubai&quot;</span>,],</span><br><span class="line">    <span class="string">&quot;Age&quot;</span>: [<span class="number">18</span>, <span class="number">19</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">18</span>],</span><br><span class="line">    <span class="string">&quot;Sex&quot;</span>: [<span class="string">&quot;male&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;male&quot;</span>,<span class="string">&quot;male&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;male&quot;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;Age&quot;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/48fb2ba722e840ffae5ffe62b3ab79b0.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;Age&quot;</span>].mean()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/2f917b9360464112ab1dddff45f1cfc7.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
