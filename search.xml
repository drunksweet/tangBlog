<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/05/12/Ros/"/>
      <url>/2024/05/12/Ros/</url>
      
        <content type="html"><![CDATA[<h1 id="2024年4月13日"><a href="#2024年4月13日" class="headerlink" title="2024年4月13日"></a>2024年4月13日</h1><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://www.bilibili.com/video/BV1nG411V7HW/?p=11&spm_id_from=pageDriver">11.初学ROS，年轻人的第一个Node节点_哔哩哔哩_bilibili</a></p><h2 id="编写结点基本流程"><a href="#编写结点基本流程" class="headerlink" title="编写结点基本流程"></a>编写结点基本流程</h2><img src="faststudy.assets/image-20240413224756435.png" alt="image-20240413224756435" style="zoom:67%;" /><h3 id="1-创建Package-软件包"><a href="#1-创建Package-软件包" class="headerlink" title="1. 创建Package 软件包"></a>1. 创建Package 软件包</h3><img src="faststudy.assets/image-20240414120625515.png" alt="image-20240414120625515" style="zoom: 67%;" /><img src="faststudy.assets/image-20240414120740631.png" alt="image-20240414120740631" style="zoom:80%;" /><img src="faststudy.assets/image-20240414120821932.png" alt="image-20240414120821932" style="zoom:50%;" /><img src="faststudy.assets/image-20240414120845381.png" alt="image-20240414120845381" style="zoom:50%;" /><img src="faststudy.assets/image-20240414120911758.png" alt="image-20240414120911758" style="zoom:67%;" /><img src="faststudy.assets/image-20240414120941512.png" alt="image-20240414120941512" style="zoom:80%;" /><h3 id="2-创建node结点"><a href="#2-创建node结点" class="headerlink" title="2. 创建node结点"></a>2. 创建node结点</h3><img src="faststudy.assets/image-20240414121151446.png" alt="image-20240414121151446" style="zoom:50%;" /><h3 id="3-编译程序"><a href="#3-编译程序" class="headerlink" title="3. 编译程序"></a>3. 编译程序</h3><p>CMake编译指令：</p><ol><li><p>为包添加一个可执行程序</p><p><code>add_executable(chao_node src/char_node.cpp)</code></p></li><li><p>提供链接ROS系统库</p><p><code>target_link_libraries(chao_node</code></p><p>​    <code>    $&#123;catkin_LIBRARIES&#125;</code></p><p><code>)</code></p></li></ol><img src="faststudy.assets/image-20240414121324029.png" alt="image-20240414121324029" style="zoom:50%;" /><h3 id="4-运行可执行程序"><a href="#4-运行可执行程序" class="headerlink" title="4. 运行可执行程序"></a>4. 运行可执行程序</h3><p><img src="/faststudy.assets/image-20240414121353961.png" alt="image-20240414121353961"></p><p>添加终端启动自动加载指令</p><img src="faststudy.assets/image-20240414121453971.png" alt="image-20240414121453971" style="zoom:50%;" /><h2 id="保持程序不断运行代码示例"><a href="#保持程序不断运行代码示例" class="headerlink" title="保持程序不断运行代码示例"></a>保持程序不断运行代码示例</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;chao_node&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;hello, world!\n&quot;</span>);</span><br><span class="line">    <span class="keyword">while</span>(ros::<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;别投，我还能秀！\n&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p style="color:red"> 遇到程序报错，千万不要惊慌，报错才能发现问题，解决问题才能学到新的东西，所以大家要保持一个良好的心态，就把这些报错信息都看作一场修行，只有磨练到处乱不惊、心如止水，才能成为最后的王者</p><h1 id="2024年4月14日"><a href="#2024年4月14日" class="headerlink" title="2024年4月14日"></a>2024年4月14日</h1><h2 id="Topic-话题"><a href="#Topic-话题" class="headerlink" title="Topic 话题"></a>Topic 话题</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>ROS程序的分布式结构</p><img src="faststudy.assets/image-20240414123407654.png" alt="image-20240414123407654" style="zoom: 33%;" /><p>最常用的ROS结点通信方式：Topic 话题 和Message 消息</p><img src="faststudy.assets/image-20240414123728005.png" alt="image-20240414123728005" style="zoom:50%;" /><p>这两个传感器不是一个包的，之前没有打过交道，这就需要一个共同话题才能让它们俩快速的熟络起来，比如下面以打游戏举例，这样两个节点就因为一个共同的话题产生了缘分。</p><img src="faststudy.assets/image-20240414123736548.png" alt="image-20240414123736548" style="zoom:50%;" /><p>发消息，只说一句可不行，要保证自己的消息被别人听到，就得不断发，刷屏发。刷屏的人被称为发布者，接收的人被称为订阅者</p><h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><img src="faststudy.assets/image-20240414124208173.png" alt="image-20240414124208173" style="zoom:67%;" /><h3 id="多方消息"><a href="#多方消息" class="headerlink" title="多方消息"></a>多方消息</h3><p>IMU是可以实时发布机器人的旋转倾斜这些姿态信息的单元模块</p><img src="faststudy.assets/image-20240414124347287.png" alt="image-20240414124347287" style="zoom:50%;" /><p>为了防止接收者看到消息混乱，对将不同传感器发布的消息话题进行相互分离，单独新开一个话题，在新建的话题里刷屏</p><img src="faststudy.assets/image-20240414125021619.png" alt="image-20240414125021619" style="zoom:50%;" /><p>这种话题 发布者 和 订阅者 的随意组合，为节点功能的划分提供了极大的灵活性，我们可以根据情况自由的组合以及拆分任务中的功能模块，以适应团队成员的任务分配和节点功能复用的需要</p><img src="faststudy.assets/image-20240414125415950.png" alt="image-20240414125415950" style="zoom:50%;" /><img src="faststudy.assets/image-20240414125358954.png" alt="image-20240414125358954" style="zoom:67%;" /><h2 id="Message消息"><a href="#Message消息" class="headerlink" title="Message消息"></a>Message消息</h2><img src="faststudy.assets/image-20240414125617632.png" alt="image-20240414125617632" style="zoom:50%;" /><p>消息的数据类型和容量有很多样，所以消息的格式也会分为很多种类型，以满足不同的数据传输要求</p><p>我们在生成数据包的时候，通信要指定消息的类型。</p><p>使用std_megs的基础依赖包里的消息类型</p><blockquote><p> index.ros.org 里 搜索 看看std_msgs website</p><p>消息类型就类似C语言的结构体，进行嵌套组合就行</p></blockquote><h2 id="Publisher-的-C-实现"><a href="#Publisher-的-C-实现" class="headerlink" title="Publisher 的 C++ 实现"></a>Publisher 的 C++ 实现</h2><p>实现目标：发布者-话题-信息-接收者</p><img src="faststudy.assets/image-20240414130155886.png" alt="image-20240414130155886" style="zoom:67%;" /><p>需要明确</p><ol><li>话题名称</li><li>发布信息的类型</li></ol><p>下面把chao_node打造成一个消息发布者</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;std_msgs/String.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span>* argv[])</span> </span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;chao_node&quot;</span>);</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;我的枪去而复返，你的生命有去无回!\n&quot;</span>);</span><br><span class="line">    <span class="comment">// 在节点初始化后 </span></span><br><span class="line">    <span class="comment">// 定义一个NodeHandle对象，是咱们节点和ROS通信的关键</span></span><br><span class="line">    <span class="comment">// 这个作为ROS系统的管家，咱们有啥需要直接吩咐它就行了</span></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    <span class="comment">// Publisher 可以理解为能往QQ群里发消息的手机</span></span><br><span class="line">    <span class="comment">// 下面这句的意思是 管家，快把能往开黑群里发消息的手机拿来</span></span><br><span class="line">    ros::Publisher pub = nh.<span class="built_in">advertise</span>&lt;std_msgs::String&gt;(<span class="string">&quot;kuai_shang_che_kai_hei_qun&quot;</span>, <span class="number">10</span>); <span class="comment">// 参数1 是话题名称，只能用ascii，2是缓存长度</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 控制频率</span></span><br><span class="line">    <span class="function">ros::Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">// 每秒执行次数</span></span><br><span class="line">    </span><br><span class="line">   <span class="keyword">while</span>(ros::<span class="built_in">ok</span>()) &#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;我要开始刷屏了\n&quot;</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 创建消息</span></span><br><span class="line">        std_msgs::String msg;</span><br><span class="line">        msg.data = <span class="string">&quot;国服马超，带飞&quot;</span>;</span><br><span class="line">        pub.<span class="built_in">publish</span>(msg);</span><br><span class="line">        </span><br><span class="line">        loop_rate.<span class="built_in">sleep</span>(); <span class="comment">// 进行阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240414131221561.png" alt="image-20240414131221561" style="zoom:50%;" /><p>因为信息处理和信息到来的速度不匹配，需要一个消息等待区，这个区域大小即缓存长度，满了就抛弃最先来的消息，让最新（后）消息进来。</p><p>这个值太大太小都不好，某些情况下需要根据处理的延迟进行计算。一般情况下，消息发出后立刻被接收者处理，那么只要设置一个比0大的值就行。这里我们设置10 </p><h3 id="小结-1"><a href="#小结-1" class="headerlink" title="小结"></a>小结</h3><img src="faststudy.assets/image-20240414133134073.png" alt="image-20240414133134073" style="zoom:50%;" /><h3 id="复制新节点"><a href="#复制新节点" class="headerlink" title="复制新节点"></a>复制新节点</h3><img src="faststudy.assets/image-20240414133833608.png" alt="image-20240414133833608" style="zoom: 50%;" /><h2 id="Subscriber-的-C-实现"><a href="#Subscriber-的-C-实现" class="headerlink" title="Subscriber 的 C++ 实现"></a>Subscriber 的 C++ 实现</h2><img src="faststudy.assets/image-20240414133946674.png" alt="image-20240414133946674" style="zoom: 33%;" /><ul><li>订阅者 ma_node 属于 atr_pkg 包，由于和发布者不在一个包里，所以需要<strong>新建一个包</strong></li></ul><img src="faststudy.assets/image-20240414134736157.png" alt="image-20240414134736157" style="zoom: 33%;" /><ul><li>roscpp这里负责<strong>消息中转</strong></li></ul><p>subscribe 这里的缓存长度，这里也就可以排队接收坑位数，这里某些情况下，需要根据订阅者的处理周期以及发布者的消息发送频率来进行计算。一般情况下，处理周期非常短，根本不会出现排满的情况，就设置一个比0大的数就行。</p><img src="faststudy.assets/image-20240414135225597.png" alt="image-20240414135225597" style="zoom: 33%;" /><ul><li><p><strong>回调函数</strong>需要在这里对接收到的消息包进行处理就行。</p></li><li><p>使用带时间戳的中文输出</p></li></ul><p>ROS_INFO等函数的编码方式会受程序的Locale环境设置影响，一般的C语言程序模式默认是一个叫做C的Locale设置，会让一些std输出函数只支持英文字符的显示</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">chao_callback</span><span class="params">(std_msgs::String msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// printf(msg.data.c_str());</span></span><br><span class="line">    <span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;zh_CN.UTF-8&quot;</span>); <span class="comment">// 第一个参数，表示将所有的环境参数都设置为新的模式 将程序的Locale设置为中文环境</span></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(msg.data.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240414141247274.png" alt="image-20240414141247274" style="zoom:50%;" /><p>而是看两个时间戳之间的差值。可以看到连续10条消息的整数部分是一样的，说明是同一秒钟接收到的信息</p><ul><li><p>完整程序：</p><p><img src="faststudy.assets/image-20240414142803977.png" alt="image-20240414142803977" style="zoom: 50%;" /><img src="faststudy.assets/image-20240414142810606.png" alt="image-20240414142810606" style="zoom:50%;" /></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;std_msgs/String.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">chao_callback</span><span class="params">(std_msgs::String msg)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// printf(msg.data.c_str());</span></span><br><span class="line">    <span class="comment">// printf(&quot;\n&quot;);</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(msg.data.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">yao_callback</span><span class="params">(std_msgs::String msg)</span> </span>&#123;</span><br><span class="line">    <span class="built_in">ROS_WARN</span>(msg.data.<span class="built_in">c_str</span>());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;zh_CN.UTF-8&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;ma_node&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::NodeHandle nh;</span><br><span class="line">    ros::Subscriber sub = nh.<span class="built_in">subscribe</span>(<span class="string">&quot;kuai_shang_che_kai_hei_qun&quot;</span>, <span class="number">10</span>, chao_callback);</span><br><span class="line"></span><br><span class="line">    ros::Subscriber sub2 = nh.<span class="built_in">subscribe</span>(<span class="string">&quot;gie_gie_dai_wo&quot;</span>, <span class="number">10</span>, yao_callback);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        ros::<span class="built_in">spinOnce</span>(); <span class="comment">// bi xu diao yong zheg:zhuang guo shen chou yi yan: when the node is busy with its work, run this func and the node will spin itself to see if there is new messages</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="小结-2"><a href="#小结-2" class="headerlink" title="小结"></a>小结</h3><img src="faststudy.assets/image-20240414142555856.png" alt="image-20240414142555856" style="zoom:50%;" /><img src="faststudy.assets/image-20240414142612659.png" alt="image-20240414142612659" style="zoom:67%;" /><h2 id="使用launch文件一次启动多个节点"><a href="#使用launch文件一次启动多个节点" class="headerlink" title="使用launch文件一次启动多个节点"></a>使用launch文件一次启动多个节点</h2><p>launch 文件是一种使用xml语法的描述文件，批量启动节点的功能是其中一种功能，指令如下：</p><img src="faststudy.assets/image-20240414143116620.png" alt="image-20240414143116620" style="zoom:50%;" /><img src="faststudy.assets/image-20240414143220774.png" alt="image-20240414143220774" style="zoom:50%;" /><p>描述一组多层嵌套的数据结构就是xml语言的主要作用之一，如果小纸盒里还有小小纸盒，就可以继续嵌套下去</p><img src="faststudy.assets/image-20240414143432212.png" alt="image-20240414143432212" style="zoom:50%;" /><img src="faststudy.assets/image-20240414143550673.png" alt="image-20240414143550673" style="zoom:50%;" /><img src="faststudy.assets/image-20240414143620452.png" alt="image-20240414143620452" style="zoom:50%;" /><p>roscore 不用描述，只要有一个节点运行，launch文件会自动运行roscore</p><h3 id="编写运行launch文件"><a href="#编写运行launch文件" class="headerlink" title="编写运行launch文件"></a>编写运行launch文件</h3><p>luanch文件放在任意一个软件包都行</p> <img src="faststudy.assets/image-20240414143841151.png" alt="image-20240414143841151" style="zoom:50%;" /><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;ssr_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;yao_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;yao_node&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;ssr_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;chao_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;chao_node&quot;</span> <span class="attr">launch-prefix</span>=<span class="string">&quot;gnome-terminal -e&quot;</span>(<span class="attr">这个节点运行结构</span> <span class="attr">单独输出到一个屏幕</span>)/&gt;</span> </span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;atr_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ma_node&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ma_node&quot;</span> <span class="attr">output</span>=<span class="string">&quot;screen&quot;</span>(<span class="attr">使得ROSinfo输出到屏幕</span>)/&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>运行</p><p><code>roslaunch atr_pkg(放到它的目录下了) kai_hei.launch</code></p></li></ul><h3 id="小结-3"><a href="#小结-3" class="headerlink" title="小结"></a>小结</h3><img src="faststudy.assets/image-20240414145137868.png" alt="image-20240414145137868" style="zoom:50%;" /><p>同时launch文件也是一个软件包的重要入口，当我们拿到一个陌生的软件包，不知道它的用途时，就可以从launch文件入手，通过文件名猜测它的用途，然后打开文件，查看这个功能需要启动哪些节点，最后再循着这些线索，逐个击破，很快就可以搞清楚其内部的实现机制</p><h2 id="Python实现"><a href="#Python实现" class="headerlink" title="Python实现"></a>Python实现</h2><ol><li><p>建包</p><img src="faststudy.assets/image-20240414145744362.png" alt="image-20240414145744362" style="zoom:50%;" /></li><li><p>编译</p><p> Python软件包不需要编译，可以直接运行，这里编译是使得新建的ssr_pkg软件包进入ROS软件包列表</p><p>这个操作只用执行一次，以后就不用执行了</p></li><li><p>编写Python节点</p><p>包目录下src目录是写c++代码的，新建一个scripts目录是写Python代码的</p></li></ol><img src="faststudy.assets/image-20240414150525673.png" alt="image-20240414150525673" style="zoom:50%;" /><img src="faststudy.assets/image-20240414151205949.png" alt="image-20240414151205949" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;chao_node&quot;</span>)</span><br><span class="line">    rospy.logwarn(<span class="string">&quot;ma chao la ye!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    pub = rospy.Publisher(<span class="string">&quot;kuai_shang_che_kai_hei_qun&quot;</span>, String, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        rospy.loginfo(<span class="string">&quot;kai shi shua ping&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg = String()</span><br><span class="line">        msg.data = <span class="string">&quot;guo fu ma chao, dai fei&quot;</span></span><br><span class="line">        </span><br><span class="line">        pub.publish(msg)</span><br><span class="line">        rate.sleep()</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3 </span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;yao_node&quot;</span>)</span><br><span class="line">    rospy.logwarn(<span class="string">&quot;wo shi yao!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    pub = rospy.Publisher(<span class="string">&quot;gie_gie_dai_wo&quot;</span>, String, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        rospy.loginfo(<span class="string">&quot;kai shi shua ping&quot;</span>)</span><br><span class="line"></span><br><span class="line">        msg = String()</span><br><span class="line">        msg.data = <span class="string">&quot;qiu dai fei+++&quot;</span></span><br><span class="line">        </span><br><span class="line">        pub.publish(msg)</span><br><span class="line">        rate.sleep()</span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240414152510240.png" alt="image-20240414152510240" style="zoom:50%;" /><img src="faststudy.assets/image-20240414152520110.png" alt="image-20240414152520110" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#code=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chao_callback</span>(<span class="params">msg</span>):</span><br><span class="line">    rospy.loginfo(msg.data)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">yao_callback</span>(<span class="params">msg</span>):</span><br><span class="line">    rospy.logwarn(msg.data)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;ma_node&quot;</span>)</span><br><span class="line"></span><br><span class="line">    sub = rospy.Subscriber(<span class="string">&quot;kuai_shang_che_kai_hei_qun&quot;</span>, String, chao_callback, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    sub2 = rospy.Subscriber(<span class="string">&quot;gie_gie_dai_wo&quot;</span>, String, yao_callback, queue_size=<span class="number">10</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>launch 文件 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Python node launch file --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;ssr_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;chao_node.py(需要.py后缀)&quot;</span> <span class="attr">name</span>=<span class="string">&quot;chao_node&quot;</span>    /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;ssr_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;yao_node.py&quot;</span> <span class="attr">name</span>=<span class="string">&quot;yao_node&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;atr_pkg&quot;</span> <span class="attr">type</span>=<span class="string">&quot;ma_node.py&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ma_node&quot;</span>  <span class="attr">launch-prefix</span>=<span class="string">&quot;gnome-terminal -e&quot;</span>  /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="ROS机器人运动控制（六度控制）"><a href="#ROS机器人运动控制（六度控制）" class="headerlink" title="ROS机器人运动控制（六度控制）"></a>ROS机器人运动控制（六度控制）</h2><img src="faststudy.assets/image-20240414154134229.png" alt="image-20240414154134229" style="zoom:50%;" /><h3 id="方向"><a href="#方向" class="headerlink" title="方向"></a>方向</h3><h4 id="矢量运动"><a href="#矢量运动" class="headerlink" title="矢量运动"></a>矢量运动</h4><p>右手比枪</p><ul><li>食指指向机器人的<strong>正前方</strong>，是为<strong>x轴</strong>正方向</li><li>中指指向机器人的<strong>正左方</strong>，是为<strong>y轴</strong>正方向</li><li>拇指指向机器人的<strong>正上方</strong>，是为<strong>z轴</strong>正上方</li></ul><p>机器人在三维空间的任何平移（矢量）运动，都可以看成是这<strong>三个轴的平移（矢量）运动</strong>的合成</p><h4 id="旋转运动"><a href="#旋转运动" class="headerlink" title="旋转运动"></a>旋转运动</h4><p>右手点赞</p><ul><li>拇指指向<strong>x轴</strong>正方向，四指方向是为<strong>翻滚</strong>运动正方向</li><li>拇指指向<strong>y轴</strong>正方向，四指方向是为<strong>俯仰</strong>运动正方向</li><li>拇指指向<strong>z轴</strong>正方向，四指方向是为<strong>自转</strong>运动正方向</li></ul><p>机器人在三维空间的任何旋转运动，都可以看成是这<strong>三个轴的旋转运动</strong>的合成</p><h3 id="量纲"><a href="#量纲" class="headerlink" title="量纲"></a>量纲</h3><p>矢量运动的速度单位统一都是<strong>米&#x2F;秒</strong></p><p>旋转运动的速度单位统一都是<strong>弧度&#x2F;秒</strong></p><img src="faststudy.assets/image-20240414155506789.png" alt="image-20240414155506789" style="zoom:67%;" /><h3 id="速度控制层次"><a href="#速度控制层次" class="headerlink" title="速度控制层次"></a>速度控制层次</h3><div style="display:flex">    &nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  <img src="faststudy.assets/image-20240414155855154.png" alt="image-20240414155855154" style="zoom:50%;" /> <img src="faststudy.assets/image-20240414155919927.png" alt="image-20240414155919927" style="zoom:60%;" />&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp  </div><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++ 代码"></a>C++ 代码</h3><img src="faststudy.assets/image-20240414160647233.png" alt="image-20240414160647233" style="zoom:67%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;geometry_msgs/Twist.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;vel_node&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">    ros::Publisher vel_pub = n.<span class="built_in">advertise</span>&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;/cmd_vel&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// msg package</span></span><br><span class="line">    geometry_msgs::Twist vel_msg;</span><br><span class="line">    vel_msg.linear.x = <span class="number">0</span>;</span><br><span class="line">    vel_msg.linear.y = <span class="number">0</span>;</span><br><span class="line">    vel_msg.linear.z = <span class="number">0</span>;</span><br><span class="line">    vel_msg.angular.x = <span class="number">0</span>;</span><br><span class="line">    vel_msg.angular.y = <span class="number">0</span>;</span><br><span class="line">    vel_msg.angular.z = <span class="number">0.5</span>;</span><br><span class="line"></span><br><span class="line">    ros::Rate r&#123;<span class="number">30</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        vel_pub.<span class="built_in">publish</span>(vel_msg);</span><br><span class="line">        r.<span class="built_in">sleep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Python代码"><a href="#Python代码" class="headerlink" title="Python代码"></a>Python代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Twist</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;demo_vel_ctrl&quot;</span>)</span><br><span class="line">    <span class="comment"># 发布速度控制话题</span></span><br><span class="line">    vel_pub = rospy.Publisher(<span class="string">&quot;cmd_vel&quot;</span>,Twist,queue_size=<span class="number">10</span>)</span><br><span class="line">    <span class="comment"># 构建速度消息包并赋值</span></span><br><span class="line">    vel_msg = Twist()</span><br><span class="line">    vel_msg.linear.x = <span class="number">0.1</span></span><br><span class="line">    <span class="comment"># 构建发送频率对象</span></span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>)</span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        vel_pub.publish(vel_msg)</span><br><span class="line">        rate.sleep()</span><br></pre></td></tr></table></figure><h1 id="2024年4月15日"><a href="#2024年4月15日" class="headerlink" title="2024年4月15日"></a>2024年4月15日</h1><h2 id="获取激光雷达数据"><a href="#获取激光雷达数据" class="headerlink" title="获取激光雷达数据"></a>获取激光雷达数据</h2><img src="faststudy.assets/image-20240415105611751.png" alt="image-20240415105611751" style="zoom:50%;" /><img src="faststudy.assets/image-20240415103852936.png" alt="image-20240415103852936" style="zoom:50%;" /><ul><li>激光雷达节点由厂商提供，消息包格式是 sensor_msgs::LaserScan </li><li>雷达数据话题约定为&#x2F;scan</li></ul><img src="faststudy.assets/image-20240415103932449.png" alt="image-20240415103932449" style="zoom:50%;" /><p>激光雷达数据获取就是典型的订阅者应用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sensor_msgs/LaserScan.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LidarCallback</span><span class="params">(<span class="type">const</span> sensor_msgs::LaserScan msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> fMidDist = msg.ranges[<span class="number">180</span>];</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;front distance ranages[180] = %f m&quot;</span>, fMidDist);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;lidar_node&quot;</span>);</span><br><span class="line"></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">    ros::Subscriber lidar_sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;/scan&quot;</span>, <span class="number">10</span>, &amp;LidarCallback);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python3</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> LaserScan</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">LidarCallback</span>(<span class="params">msg</span>):</span><br><span class="line">    dist = msg.ranges[<span class="number">180</span>]</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;front distance ranges[180] = %f m&quot;</span>, dist)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;lidar_node&quot;</span>)</span><br><span class="line">    lidar_sub = rospy.Subscriber(<span class="string">&quot;/scan&quot;</span>, LaserScan, LidarCallback, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><h2 id="激光雷达避障"><a href="#激光雷达避障" class="headerlink" title="激光雷达避障"></a>激光雷达避障</h2><p>获取激光雷达是一个订阅者节点，而实现一个节点既是订阅者，又是发布者，例如使用激光雷达避障</p><img src="faststudy.assets/image-20240415110059799.png" alt="image-20240415110059799" style="zoom:50%;" /><img src="faststudy.assets/image-20240415110145714.png" alt="image-20240415110145714" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sensor_msgs/LaserScan.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;geometry_msgs/Twist.h&gt;</span> <span class="comment">// 速度消息包头文件</span></span></span><br><span class="line"></span><br><span class="line">ros::Publisher vel_pub; <span class="comment">// 回调函数里也要用，设计为全局变量</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 每收到一个消息包就调用回调函数，其中根据获取的消息，将构建速度包，使用发布者发布</span></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">LidarCallback</span><span class="params">(<span class="type">const</span> sensor_msgs::LaserScan msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="type">float</span> fMidDist = msg.ranges[<span class="number">180</span>];</span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;front distance ranages[180] = %f m&quot;</span>, fMidDist);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构建消息包</span></span><br><span class="line">    geometry_msgs::Twist vel_cmd;</span><br><span class="line">    <span class="keyword">if</span> (fMidDist &lt; <span class="number">1.5</span>) &#123;</span><br><span class="line">        vel_cmd.angular.z = <span class="number">0.3</span>;</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        vel_cmd.linear.x = <span class="number">0.05</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 发布消息包</span></span><br><span class="line">    vel_pub.<span class="built_in">publish</span>(vel_cmd); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;&quot;</span>);</span><br><span class="line"><span class="comment">// 创建节点</span></span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;lidar_node&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用大管家进行订阅、发布</span></span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    ros::Subscriber lidar_sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;/scan&quot;</span>, <span class="number">10</span>, &amp;LidarCallback);</span><br><span class="line"></span><br><span class="line">    vel_pub = n.<span class="built_in">advertise</span>&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;/cmd_vel&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/faststudy.assets/image-20240415111537972.png" alt="image-20240415111537972"></p><p>雷达每扫描一圈 会调用一次回调函数</p><p>根据扫描时间我们可以确定频率，一秒钟调用回调函数11次，我们设置一个变量nCount 每调用一次 nCount – 这样可以控制机器人旋转5秒钟</p><img src="faststudy.assets/image-20240415111830083.png" alt="image-20240415111830083" style="zoom:50%;" /><p>遇到障碍物时，初始化nCount &#x3D; 50; 然后 if (nCount &gt; 0) { nCount–; return ;}</p><h2 id="IMU-惯性测量单元"><a href="#IMU-惯性测量单元" class="headerlink" title="IMU 惯性测量单元"></a>IMU 惯性测量单元</h2><p>用于测量机器人的空间姿态。ROS 描述如下：</p><img src="faststudy.assets/image-20240415162303197.png" alt="image-20240415162303197" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">header: 时间戳和坐标系</span><br><span class="line">orientation: 空间姿态</span><br><span class="line">angular_velocity: 角速度</span><br><span class="line">linear_acceleration: 矢量加速度</span><br><span class="line">以及各自的协方差矩阵</span><br><span class="line"></span><br><span class="line">角速度和矢量加速度都各自包含了x, y, z 三个分量 -- 六轴IMU</span><br></pre></td></tr></table></figure><p>为了方便用户使用：根据角速度、矢量加速度，进行融合得到的空间姿态描述，即orientation。它描述的是机器人的朝向，相对于空间中xyz三个坐标轴的偏移量</p><img src="faststudy.assets/image-20240415163049252.png" alt="image-20240415163049252" style="zoom:33%;" /><p>orientation 空间姿态信息是一个Quaternion类型的数值，四元数描述法和欧拉角（绕x,y,z三轴旋转）的作用都是对物体进行空间姿态的描述。</p><p>四元数描述法通常只在进行旋转变换的过程中使用，旋转后得到结果，还是会转换成欧拉角来进行处理。</p><img src="faststudy.assets/image-20240415163238900.png" alt="image-20240415163238900" style="zoom:50%;" /><h3 id="IMU数据获取"><a href="#IMU数据获取" class="headerlink" title="IMU数据获取"></a>IMU数据获取</h3><p>该节点以订阅者形式呈现。</p><p>要获取IMU的消息，需要知道消息包格式和话题名称。消息包格式如上。话题名称ROS标准：</p><img src="faststudy.assets/image-20240415175126555.png" alt="image-20240415175126555" style="zoom:50%;" /><img src="faststudy.assets/image-20240415175143752.png" alt="image-20240415175143752" style="zoom:50%;" /><img src="faststudy.assets/image-20240415175218745.png" alt="image-20240415175218745" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sensor_msgs/Imu.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf/tf.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IMUCallback</span><span class="params">(sensor_msgs::Imu msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.orientation_covariance[<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建tf 四元数</span></span><br><span class="line">    <span class="function">tf::Quaternion <span class="title">quaternion</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        msg.orientation.x, </span></span></span><br><span class="line"><span class="params"><span class="function">        msg.orientation.y,</span></span></span><br><span class="line"><span class="params"><span class="function">        msg.orientation.z,</span></span></span><br><span class="line"><span class="params"><span class="function">        msg.orientation.w</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 使用tf工具，将四元数转换成欧拉角</span></span><br><span class="line">    <span class="type">double</span> roll, pitch, yaw;</span><br><span class="line">    tf::<span class="built_in">Matrix3x3</span>(quaternion).<span class="built_in">getRPY</span>(roll, pitch, yaw);</span><br><span class="line">    roll = roll * <span class="number">180</span> / M_PI;</span><br><span class="line">    pitch = pitch * <span class="number">180</span> / M_PI;</span><br><span class="line">    yaw = yaw * <span class="number">180</span> / M_PI;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;roll = %.0f, pitch = %.0f, yaw = %.0f &quot;</span>, roll, pitch, yaw);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;imu_node&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    ros::Subscriber imu_sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;/imu/data&quot;</span>, <span class="number">10</span>, IMUCallback);</span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240415200459747.png" alt="image-20240415200459747" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> Imu</span><br><span class="line"><span class="keyword">from</span> tf.transformations <span class="keyword">import</span> euler_from_quaternion</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imu_callback</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">if</span> msg.orientation_covariance[<span class="number">0</span>] &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    quaternion = [</span><br><span class="line">        msg.orientation.x, msg.orientation.y, msg.orientation.z, msg.orientation.w</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    (roll, pitch, yaw) = euler_from_quaternion(quaternion)</span><br><span class="line">    roll = roll * <span class="number">180</span> / math.pi</span><br><span class="line">    pitch = pitch * <span class="number">180</span> / math.pi</span><br><span class="line">    yaw = yaw * <span class="number">180</span> / math.pi</span><br><span class="line"></span><br><span class="line">    rospy.loginfo(<span class="string">&quot;roll=%.0f, pitch=%.0f, yaw=%.0f&quot;</span>, roll, pitch, yaw)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;imu_node&quot;</span>)</span><br><span class="line">    imu_sub = rospy.Subscriber(<span class="string">&quot;/imu/data&quot;</span>, Imu, imu_callback, queue_size=<span class="number">10</span>)</span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><h3 id="实现IMU航向锁定"><a href="#实现IMU航向锁定" class="headerlink" title="实现IMU航向锁定"></a>实现IMU航向锁定</h3><img src="faststudy.assets/image-20240415203423237.png" alt="image-20240415203423237" style="zoom:50%;" /><p>让一个节点在订阅IMU数据的同时，还能发布运动控制指令，使机器人能对姿态变化做出反应，实现一个航向锁定的效果</p><img src="faststudy.assets/image-20240415203553496.png" alt="image-20240415203553496" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;ros/ros.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;sensor_msgs/Imu.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;tf/tf.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;geometry_msgs/Twist.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">ros::Publisher vel_pub;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">IMUCallback</span><span class="params">(sensor_msgs::Imu msg)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (msg.orientation_covariance[<span class="number">0</span>] &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">tf::Quaternion <span class="title">quaternion</span><span class="params">(</span></span></span><br><span class="line"><span class="params"><span class="function">        msg.orientation.x, </span></span></span><br><span class="line"><span class="params"><span class="function">        msg.orientation.y,</span></span></span><br><span class="line"><span class="params"><span class="function">        msg.orientation.z,</span></span></span><br><span class="line"><span class="params"><span class="function">        msg.orientation.w</span></span></span><br><span class="line"><span class="params"><span class="function">    )</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="type">double</span> roll, pitch, yaw;</span><br><span class="line">    tf::<span class="built_in">Matrix3x3</span>(quaternion).<span class="built_in">getRPY</span>(roll, pitch, yaw);</span><br><span class="line">    roll = roll * <span class="number">180</span> / M_PI;</span><br><span class="line">    pitch = pitch * <span class="number">180</span> / M_PI;</span><br><span class="line">    yaw = yaw * <span class="number">180</span> / M_PI;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">ROS_INFO</span>(<span class="string">&quot;roll = %.0f, pitch = %.0f, yaw = %.0f &quot;</span>, roll, pitch, yaw);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置一个目标朝向角，当当前朝向角和目标朝向角不同时，就控制机器人转动</span></span><br><span class="line">    <span class="type">double</span> target_yaw = <span class="number">90</span>;</span><br><span class="line">    <span class="type">double</span> diff_angle = target_yaw - yaw;</span><br><span class="line">    geometry_msgs::Twist vel_cmd;</span><br><span class="line">    vel_cmd.angular.z = diff_angle * <span class="number">0.01</span>;</span><br><span class="line">    vel_pub.<span class="built_in">publish</span>(vel_cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">setlocale</span>(LC_ALL, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;imu_node&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    ros::Subscriber imu_sub = n.<span class="built_in">subscribe</span>(<span class="string">&quot;/imu/data&quot;</span>, <span class="number">10</span>, IMUCallback);</span><br><span class="line"></span><br><span class="line">    vel_pub = n.<span class="built_in">advertise</span>&lt;geometry_msgs::Twist&gt;(<span class="string">&quot;/cmd_vel&quot;</span>, <span class="number">10</span>); <span class="comment">// 初始化 vel_pub</span></span><br><span class="line"></span><br><span class="line">    ros::<span class="built_in">spin</span>();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240415210025840.png" alt="image-20240415210025840" style="zoom:50%;" /><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python</span></span><br><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> sensor_msgs.msg <span class="keyword">import</span> Imu</span><br><span class="line"><span class="keyword">from</span> tf.transformations <span class="keyword">import</span> euler_from_quaternion</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">from</span> geometry_msgs.msg <span class="keyword">import</span> Twist</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">imu_callback</span>(<span class="params">msg</span>):</span><br><span class="line">    <span class="keyword">global</span> vel_pub</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> msg.orientation_covariance[<span class="number">0</span>] &lt; <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    </span><br><span class="line">    quaternion = [</span><br><span class="line">        msg.orientation.x, msg.orientation.y, msg.orientation.z, msg.orientation.w</span><br><span class="line">    ]</span><br><span class="line"></span><br><span class="line">    (roll, pitch, yaw) = euler_from_quaternion(quaternion)</span><br><span class="line">    roll = roll * <span class="number">180</span> / math.pi</span><br><span class="line">    pitch = pitch * <span class="number">180</span> / math.pi</span><br><span class="line">    yaw = yaw * <span class="number">180</span> / math.pi</span><br><span class="line">    rospy.loginfo(<span class="string">&quot;roll=%.0f, pitch=%.0f, yaw=%.0f&quot;</span>, roll, pitch, yaw)</span><br><span class="line"></span><br><span class="line">    target_yaw = <span class="number">90</span></span><br><span class="line">    diff_angle = target_yaw - yaw</span><br><span class="line">    vel_cmd = Twist()</span><br><span class="line">    vel_cmd.angular.z = diff_angle * <span class="number">0.01</span></span><br><span class="line">    vel_cmd.linear.x = <span class="number">0.1</span></span><br><span class="line">    vel_pub.publish(vel_cmd)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    rospy.init_node(<span class="string">&quot;imu_node&quot;</span>)</span><br><span class="line">    imu_sub = rospy.Subscriber(<span class="string">&quot;/imu/data&quot;</span>, Imu, imu_callback, queue_size=<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">    vel_pub = rospy.Publisher(<span class="string">&quot;/cmd_vel&quot;</span>, Twist, queue_size=<span class="number">10</span>)</span><br><span class="line">    rospy.spin()</span><br></pre></td></tr></table></figure><h2 id="消息包类型"><a href="#消息包类型" class="headerlink" title="消息包类型"></a>消息包类型</h2><h3 id="官方消息包"><a href="#官方消息包" class="headerlink" title="官方消息包"></a>官方消息包</h3><img src="faststudy.assets/image-20240415214021355.png" alt="image-20240415214021355" style="zoom:50%;" /><ul><li>ColorRGBA 可以完整描述一个像素</li><li>Duration 表示相对时间，可正可负</li><li>Time 表示绝对时间，只能为正</li><li>Header 包含时间戳和坐标系名称</li></ul><img src="faststudy.assets/image-20240415214405849.png" alt="image-20240415214405849" style="zoom:50%;" /><img src="faststudy.assets/image-20240415214430011.png" alt="image-20240415214430011" style="zoom:50%;" /><img src="faststudy.assets/image-20240415215323155.png" alt="image-20240415215323155" style="zoom:50%;" /><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>​现在ROS Index里搜消息包名称，找到wiki页面里的消息类型定义，按照定义里的消息包结构，进行数据的装填和读取，剩下的就是发布或订阅相关话题，进行消息报的发送和接收。</p><img src="faststudy.assets/image-20240415215338766.png" alt="image-20240415215338766" style="zoom:50%;" /><img src="faststudy.assets/image-20240415215408904.png" alt="image-20240415215408904" style="zoom:50%;" /><h3 id="自定义消息包"><a href="#自定义消息包" class="headerlink" title="自定义消息包"></a>自定义消息包</h3><ul><li>建包</li></ul><img src="faststudy.assets/image-20240415215814023.png" alt="image-20240415215814023" style="zoom: 33%;" /><img src="faststudy.assets/image-20240415220000643.png" alt="image-20240415220000643" style="zoom:45%;" /><p>消息报也是软件包，为了便于识别，一般会以_msgs作为结尾</p><ul><li>写定义文件</li></ul><img src="faststudy.assets/image-20240415220251244.png" alt="image-20240415220251244" style="zoom:45%;" /><img src="faststudy.assets/image-20240415220343429.png" alt="image-20240415220343429" style="zoom:50%;" /><ul><li><p>修改CMakeLists.txt</p><img src="faststudy.assets/image-20240415221141152.png" alt="image-20240415221141152" style="zoom:33%;" /><img src="faststudy.assets/image-20240415220931964.png" alt="image-20240415220931964" style="zoom:33%;" /></li></ul><img src="faststudy.assets/image-20240415220948974.png" alt="image-20240415220948974" style="zoom:33%;" /><img src="faststudy.assets/image-20240415221026319.png" alt="image-20240415221026319" style="zoom:33%;" /><img src="faststudy.assets/image-20240415221117445.png" alt="image-20240415221117445" style="zoom:33%;" /><img src="faststudy.assets/image-20240415221237294.png" alt="image-20240415221237294" style="zoom:33%;" /><p>编译消息包</p><ul><li><p>查看消息包</p><img src="faststudy.assets/image-20240415221420864.png" alt="image-20240415221420864" style="zoom:50%;" /></li><li><p>小结</p></li></ul><img src="faststudy.assets/image-20240415221526867.png" alt="image-20240415221526867" style="zoom:50%;" /><ul><li>使用自定义消息包</li></ul><img src="faststudy.assets/image-20240415222635523.png" alt="image-20240415222635523" style="zoom:50%;" /><p>在CMakeList文件里添加新消息包，使得先编译依赖的消息包，再编译项目文件</p><img src="faststudy.assets/image-20240415223258839.png" alt="image-20240415223258839" style="zoom:50%;" /><h2 id="ROS中的栅格地图格式"><a href="#ROS中的栅格地图格式" class="headerlink" title="ROS中的栅格地图格式"></a>ROS中的栅格地图格式</h2><p>机器人导航所使用的地图数据，就是ROS导航软件包里的map_server节点，在话题&#x2F;map中发布的消息数据，消息类型是nav_msgs消息包中的OccupancyGrid（占据栅格，就是一种正方形小格子组成的地图，每个格子填充一个数值表示障碍物的占据情况）</p><img src="faststudy.assets/image-20240416000047382.png" alt="image-20240416000047382" style="zoom:33%;" /><p>ros里默认边长为5厘米</p><p>没有障碍物的格子填0，有障碍物的格子里填100，未知填-1</p><img src="faststudy.assets/image-20240416000139042.png" alt="image-20240416000139042" style="zoom:40%;" /><img src="faststudy.assets/image-20240416000241470.png" alt="image-20240416000241470" style="zoom: 33%;" /><p>以上就是用来描述一个地图的数据信息<img src="faststudy.assets/image-20240416000303401.png" alt="image-20240416000303401" style="zoom:50%;" /></p><img src="faststudy.assets/image-20240416000356018.png" alt="image-20240416000356018" style="zoom:50%;" /><img src="faststudy.assets/image-20240416000517716.png" alt="image-20240416000517716" style="zoom:50%;" /><h3 id="发布自定义地图"><a href="#发布自定义地图" class="headerlink" title="发布自定义地图"></a>发布自定义地图</h3><ul><li><p>发布地图设定</p><img src="faststudy.assets/image-20240416000614529.png" alt="image-20240416000614529" style="zoom:33%;" /></li></ul><img src="faststudy.assets/image-20240416000649795.png" alt="image-20240416000649795" style="zoom:33%;" /><p>就是地图的起始位置了</p><img src="faststudy.assets/image-20240416000808751.png" alt="image-20240416000808751" style="zoom:50%;" /><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;ros/ros.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;nav_msgs/OccupancyGrid.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ros::<span class="built_in">init</span>(argc, argv, <span class="string">&quot;map_pub_node&quot;</span>);</span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">    ros::Publisher pub = n.<span class="built_in">advertise</span>&lt;nav_msgs::OccupancyGrid&gt;(<span class="string">&quot;/map&quot;</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function">ros::Rate <span class="title">r</span><span class="params">(<span class="number">1</span>)</span></span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::<span class="built_in">ok</span>())</span><br><span class="line">    &#123;</span><br><span class="line">        nav_msgs::OccupancyGrid msg;</span><br><span class="line"></span><br><span class="line">        msg.header.frame_id = <span class="string">&quot;map&quot;</span>;</span><br><span class="line">        msg.header.stamp = ros::Time::<span class="built_in">now</span>();</span><br><span class="line">        msg.info.origin.position.x = <span class="number">0</span>;</span><br><span class="line">        msg.info.origin.position.y = <span class="number">0</span>;</span><br><span class="line">        msg.info.resolution = <span class="number">1.0</span>;</span><br><span class="line">        msg.info.width = <span class="number">4</span>;</span><br><span class="line">        msg.info.height = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        msg.data.<span class="built_in">resize</span>(<span class="number">4</span>*<span class="number">2</span>);</span><br><span class="line">        msg.data[<span class="number">0</span>] = <span class="number">100</span>;</span><br><span class="line">        msg.data[<span class="number">1</span>] = <span class="number">100</span>;</span><br><span class="line">        msg.data[<span class="number">2</span>] = <span class="number">0</span>;</span><br><span class="line">        msg.data[<span class="number">3</span>] = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">        pub.<span class="built_in">publish</span>(msg);</span><br><span class="line">        r.<span class="built_in">sleep</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240416002859525.png" alt="image-20240416002859525" style="zoom: 50%;" /><h1 id="2024年4月16日"><a href="#2024年4月16日" class="headerlink" title="2024年4月16日"></a>2024年4月16日</h1><h2 id="SLAM"><a href="#SLAM" class="headerlink" title="SLAM"></a>SLAM</h2><blockquote><p>动画：<a href="https://www.bilibili.com/video/BV1FW4y1M7PV/?spm_id_from=333.788&vd_source=3a8da171b6712c0d36514697f676a905">什么是SLAM_哔哩哔哩_bilibili</a></p></blockquote><p>simulataneous locallization and mapping 同时定位与地图创建</p><p>定位：机器人知道自己在地图中的哪个位置</p><img src="faststudy.assets/image-20240416004233843.png" alt="image-20240416004233843" style="zoom:50%;" /><p>那么可以观察出两个参照物的具体坐标值，就以这种俯视平面地图来记录参照物的位置，如果迷路了，只要找到这两个参照物，就在知道自己的位置</p><img src="faststudy.assets/image-20240416004444809.png" alt="image-20240416004444809" style="zoom:50%;" /><img src="faststudy.assets/image-20240416004553988.png" alt="image-20240416004553988" style="zoom:50%;" /><img src="faststudy.assets/image-20240416004711746.png" alt="image-20240416004711746" style="zoom:50%;" /><img src="faststudy.assets/image-20240416004734968.png" alt="image-20240416004734968" style="zoom:50%;" /><p>轨迹的三角形</p><ul><li>视觉SLAM</li></ul><img src="faststudy.assets/image-20240416004835777.png" alt="image-20240416004835777" style="zoom:50%;" /><p>就是参照物的位置</p><ul><li><p>激光雷达slam </p><p>参照物地图又是如何建立的呢？</p><p>采用栅格地图，初始状态栅格地图都是灰色，不知道有无障碍，栅格值为-1</p></li></ul><img src="faststudy.assets/image-20240416005109814.png" alt="image-20240416005109814" style="zoom:50%;" /><p>用激光雷达扫除这些迷雾，被激光穿透的栅格标记为白色，数值为0，遮挡栅格标记为100，表示这个栅格存在障碍物，没有被扫描的栅格用-1表示</p><img src="faststudy.assets/image-20240416005156374.png" alt="image-20240416005156374" style="zoom:50%;" /><p>激光雷达扫描一周，得到周围的障碍物情况， 记录下这些已经探明的栅格状态和机器人当前的位置</p><img src="faststudy.assets/image-20240416005409074.png" alt="image-20240416005409074" style="zoom:50%;" /><p>机器人移动，到达第二个观测地点，和之前一样，记录扫描栅格状态和机器人的位置。这时候我们拿出刚才记录的初始位置的局部地图，进行拼合</p><p>在激光雷达SLAM中，可以进行合并的参照物特征，不是物体的外观，而是障碍物栅格的排布形状</p><p>通过对不同观测点扫描的局部地图进行特征匹配和拼接，我们就得到一个比较完整的全局地图</p><img src="faststudy.assets/image-20240416005951726.png" alt="image-20240416005951726" style="zoom:50%;" /><p>没有障碍物的栅格，后面进行导航的时候，会在这些白色栅格区域里进行路径搜索</p><h2 id="Hector-Mapping-初体验"><a href="#Hector-Mapping-初体验" class="headerlink" title="Hector_Mapping 初体验"></a>Hector_Mapping 初体验</h2><img src="faststudy.assets/image-20240416010320448.png" alt="image-20240416010320448" style="zoom:50%;" /><p>hector_mapping API 文档</p><p><img src="/faststudy.assets/image-20240416010642194.png" alt="image-20240416010642194"></p><img src="faststudy.assets/image-20240416102953533.png" alt="image-20240416102953533" style="zoom:50%;" /><ul><li><p>参数设置</p><p>简单练习</p><img src="faststudy.assets/image-20240416103049711.png" alt="image-20240416103049711" style="zoom:50%;" /></li></ul><img src="faststudy.assets/image-20240416103216714.png" alt="image-20240416103216714" style="zoom:50%;" /><h2 id="初识ROS的TF系统"><a href="#初识ROS的TF系统" class="headerlink" title="初识ROS的TF系统"></a>初识ROS的TF系统</h2><img src="faststudy.assets/image-20240416111039655.png" alt="image-20240416111039655" style="zoom:50%;" /><p>关于机器人的定位，我们创建一个地图坐标系map，以机器人起始位置为原点，再创建一个机器人坐标系base_footprint（底盘的脚印），以底盘中心为原点，作为子坐标系。用子坐标系在父坐标系的偏移6度偏移来描述，即三个距离值和三个角度值。</p><img src="faststudy.assets/image-20240416104029631.png" alt="image-20240416104029631" style="zoom:50%;" /><img src="faststudy.assets/image-20240416104040363.png" alt="image-20240416104040363" style="zoom:50%;" /><p>弄明白了机器人在地图中的位置描述方式，获取具体的定位数值，依靠ROS里的TransForm系统，主要用来坐标系变换，即描述两个坐标系的空间关系，如地图坐标系和机器人坐标系的距离和角度偏移量，就属于一个TF关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rostopic <span class="built_in">list</span></span><br><span class="line">rostopic <span class="built_in">type</span> /tf</span><br><span class="line">tf2_msgs/TFMessage</span><br><span class="line">rostopic echo /tf</span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240416110721607.png" alt="image-20240416110721607" style="zoom:50%;" /><ul><li><p>理清楚tf（坐标系变换关系）的父子关系</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun rqt_tf_tree rqt_tf_tree</span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240416110927141.png" alt="image-20240416110927141" style="zoom:50%;" /></li></ul><p>当一个ROS程序，所有的空间坐标关系，都可以从这个tf树里获得</p><h2 id="里程计"><a href="#里程计" class="headerlink" title="里程计"></a>里程计</h2><img src="faststudy.assets/image-20240416114915227.png" alt="image-20240416114915227" style="zoom:33%;" /><p>里程计其实并不是一个硬件设备，而是一种软件算法，这个算法会运行在机器人的驱动节点中，根据电机的转动数据，计算机器人的位移信息，这个位移信息也是以TF消息包的形式，发布到话题&#x2F;tf中去的</p><p>激光雷达slam输出的是map到base_footprint的TF</p><img src="faststudy.assets/image-20240416115226318.png" alt="image-20240416115226318" style="zoom:50%;" /><p>里程计输出是odom到base_footprint的TF</p><img src="faststudy.assets/image-20240416115626319.png" alt="image-20240416115626319" style="zoom:45%;" /><p>障碍物点云配准算法作用就是计算校正，用来修正里程计的误差</p><img src="faststudy.assets/image-20240416120001069.png" alt="image-20240416120001069" style="zoom:50%;" /><p>先使用里程计推算机器人的位移，然后通过雷达点云贴合障碍物轮廓，修正里程计误差的方法就是Gmapping的核心算法</p><p>Hector Mapping 中 直接将雷达点云贴合障碍物轮廓，所得出的机器人位移作为机器人的定位结果，在tf树中，即scanmatcher_frame结果</p><img src="faststudy.assets/image-20240416120415014.png" alt="image-20240416120415014" style="zoom:50%;" /><p>想在rviz里显示机器人，必须要实现map到base_footprint的tf，hector mapping 算法也得输出一个map 到 odom的tf 才能接上 机器人本身的tf树，但是这个作用只是：使得rviz的base_footprint &#x3D;&#x3D; scanner_frame，目的不是修正里程计误差，仍以scanner_frame作为定位结果，里程计不作为定位结果。</p><img src="faststudy.assets/image-20240416120922953.png" alt="image-20240416120922953" style="zoom:50%;" /><img src="faststudy.assets/image-20240416121304159.png" alt="image-20240416121304159" style="zoom:50%;" /><p>从odom到base_footprint 确实在增长，所以为了base_footprint &#x3D;&#x3D; scanmatcher_frame 这里就生成反向的TF, 来抵消里程计的变化</p><img src="faststudy.assets/image-20240416121106158.png" alt="image-20240416121106158" style="zoom:50%;" /><h2 id="Gmapping-进行slam建图"><a href="#Gmapping-进行slam建图" class="headerlink" title="Gmapping 进行slam建图"></a>Gmapping 进行slam建图</h2><img src="faststudy.assets/image-20240416121644755.png" alt="image-20240416121644755" style="zoom:50%;" /><ul><li>一个是雷达坐标系 到 地盘坐标系base_link 的TF</li><li>base_link 到 odom 的 TF，也就是里程计输出的TF</li></ul><img src="faststudy.assets/image-20240416121844259.png" alt="image-20240416121844259" style="zoom:50%;" /><img src="faststudy.assets/image-20240416121859582.png" alt="image-20240416121859582" style="zoom:50%;" /><img src="faststudy.assets/image-20240416122446464.png" alt="image-20240416122446464" style="zoom:50%;" /><p>rosrun rqt_tf_tree rqt_tf_tree</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">    仿真/实体机器人</span><br><span class="line">    <span class="tag">&lt;<span class="name">include</span> <span class="attr">file</span>=<span class="string">&quot;$(find wpr_simulation)/launch/wpb_stage_robocup.launch&quot;</span> /&gt;</span></span><br><span class="line"> </span><br><span class="line">    因为仿真机器人提供了gmapping需要的话题和tf，直接运行即可</span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;gmapping&quot;</span> <span class="attr">type</span>=<span class="string">&quot;slam_gmapping&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;slam_gmapping&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">type</span>=<span class="string">&quot;rviz&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;rviz&quot;</span> <span class="attr">args</span>=<span class="string">&quot;-d $(find slam_pkg)/rviz/gmapping.rviz&quot;</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">&quot;wpr_simulation&quot;</span> <span class="attr">type</span>=<span class="string">&quot;keyboard_vel_ctrl&quot;</span>  <span class="attr">name</span>=<span class="string">&quot;keyboard_vel_ctrl&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure><img src="faststudy.assets/image-20240416124758576.png" alt="image-20240416124758576" style="zoom:50%;" /><img src="faststudy.assets/image-20240416125246859.png" alt="image-20240416125246859" style="zoom:50%;" /><h2 id="ROS地图的保存和加载"><a href="#ROS地图的保存和加载" class="headerlink" title="ROS地图的保存和加载"></a>ROS地图的保存和加载</h2><p>使用map_server软件包</p><p>保存：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun mapserver mapsaver -f 名字</span><br></pre></td></tr></table></figure><p>加载：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun mapserver map_server map.yaml</span><br></pre></td></tr></table></figure><p>启动rviz 添加map 监听&#x2F;map</p><h2 id="ROS-的-Navigation-导航系统"><a href="#ROS-的-Navigation-导航系统" class="headerlink" title="ROS 的 Navigation 导航系统"></a>ROS 的 Navigation 导航系统</h2><p>在前面的章节里，咱们完成了对环境地图的创建，现在我们来在ROS中如何使用创建好的环境地图进行自主导航的。</p><img src="faststudy.assets/image-20240416153135491.png" alt="image-20240416153135491" style="zoom:80%;" /><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><img src="faststudy.assets/image-20240416153526534.png" alt="image-20240416153526534" style="zoom:50%;" /><p>有move_base节点</p><p>我们需要提供四个输入，在仿真机器人环境中，我们只需要运行一下节点，其中仿真机器人负责提供 激光雷达、里程计、坐标系转换数据</p><img src="faststudy.assets/image-20240416153555047.png" alt="image-20240416153555047" style="zoom:67%;" /><p>【2】建图指令</p><p>roslaunch wpr_simulation wpb_gmapping.launch</p><p>rosrun wpr_simulation keyboard_vel_ctrl </p><p>rosrun map_server map_saver -f map </p><p>【3】创建软件包</p><p>catkin_create_pkg nav_pkg roscpp rospy move_base_msgs actionlib </p><p>【4】参考代码 </p><p>wpr_simulation&#x2F;launch&#x2F;wpb_demo_nav.launch </p><p>【5】导航运行 </p><p>roslaunch wpr_simulation wpb_stage_robocup.launch</p><p>roslaunch wpr_simulation wpb_demo_nav.launch</p><h3 id="全局规划器"><a href="#全局规划器" class="headerlink" title="全局规划器"></a>全局规划器</h3><p>可以输出一条从起始点到目标点的导航轨迹</p><img src="faststudy.assets/image-20240416205429102.png" alt="image-20240416205429102" style="zoom:50%;" /><p>这两种算法就是目前比较成熟的全局路径规划算法。</p><img src="faststudy.assets/image-20240416205345617.png" alt="image-20240416205345617" style="zoom:50%;" /><ul><li>Navfn 与 Global_planner 规划器</li></ul><img src="faststudy.assets/image-20240416205546497.png" alt="image-20240416205546497" style="zoom:50%;" /><img src="faststudy.assets/image-20240416205734042.png" alt="image-20240416205734042" style="zoom:50%;" /><p>我们使用代码更好的Global_planner 规划器，默认使用迪杰斯特拉算法，如果需要A* 需要下面的两个参数，不过目前算力来说，两者算法没有区别，建议直接不要写参数，用迪杰斯特拉，这样得到的算法最优，曲线也最平滑</p><ul><li><p>Carrot_planner 规划器</p><img src="faststudy.assets/image-20240416210210923.png" alt="image-20240416210210923" style="zoom:50%;" /></li></ul><p>从起始点到目标点射出一条线，当遇到障碍物时就停了。因为代码比较简单，通常用作自定义全局规划器的代码模板进行修改</p><img src="faststudy.assets/image-20240416210342537.png" alt="image-20240416210342537" style="zoom:67%;" /><p>它提供了一种Plugin插件接口，只要按照特定的格式，就能把自己的路径规划算法，编写成新的的规划器，加载到move_base节点中使用</p><img src="faststudy.assets/image-20240416210521766.png" alt="image-20240416210521766" style="zoom:50%;" /><img src="faststudy.assets/image-20240416210527727.png" alt="image-20240416210527727" style="zoom:50%;" /><p>而常规的路径规划任务，ros自带的全局路径规划器就已经足够了。</p><h3 id="AMCL-定位算法"><a href="#AMCL-定位算法" class="headerlink" title="AMCL 定位算法"></a>AMCL 定位算法</h3><p>前面的全局规划器可以输出一条从起始点到目标点的路径轨迹，接下来要想让机器人完成导航任务，还需要知道机器人的具体位置，来知道机器人是在轨迹的哪里（上or旁边，是刚出发or已到达）</p><p>这些都需要AMCL （Adaptive Monte Carlo Localization 自适应蒙特卡洛定位算法），是一种使用粒子滤波在已知地图中进行定位的算法， 它同时使用了里程计和激光雷达数据，具有较强的自我纠错功能</p><ul><li><p>不知道机器人的位置</p></li><li><p>先给机器人假设一个初始位置（并不准确）</p></li><li><p>然后将激光雷达扫描的障碍物特征叠加到刚才假设的机器人位置上</p><ul><li><p>发现这个特征和地图里的障碍物边缘匹配不上</p><img src="faststudy.assets/image-20240416211323279.png" alt="image-20240416211323279" style="zoom:33%;" /></li></ul></li><li><p>采用粒子滤波：往机器人身边撒粒子，于是用力使劲，制造多个分身（粒子），这些分身在<strong>坐标位置和机身的朝向上</strong>都和本体有一个偏差</p></li></ul><img src="faststudy.assets/image-20240416211442751.png" alt="image-20240416211442751" style="zoom:50%;" /><p>这些分身在rviz里通常用绿色的箭头表示（也就是粒子），它们会采用相同的运动方式来试错</p><ul><li><p>接下来让机器人往前移动一段距离，用里程计记录这段位移，并记录雷达扫描到的障碍物特征</p><img src="faststudy.assets/image-20240416211838423.png" alt="image-20240416211838423" style="zoom:50%;" /></li></ul><p>在rviz里，让机器人的假设的本体和分身都往前移动一段距离</p><img src="faststudy.assets/image-20240416211954177.png" alt="image-20240416211954177" style="zoom:50%;" /><p>然后把雷达扫描到的障碍物特征也叠加上去</p><img src="faststudy.assets/image-20240416212005035.png" alt="image-20240416212005035" style="zoom:50%;" /><ul><li><p>进行末尾淘汰</p><p>观察各个机器人扫描到的障碍物特征，剔除偏差最大的粒子，匹配的最好粒子是机器人最有可能所在的位置，它就成为新的本体。原来的本体降级成为粒子，支配拥有一个绿色箭头。</p></li><li><p>由于里程计的累计误差，不能保证新本体以后仍然准确，所以继续采用制造分身的法子</p></li></ul><p>在实际应用中，AMCL的粒子会非常多，默认是100到5000个。在机器人的移动过程中，AMCL就是通过不断的分裂、比对、再分裂、再比对，淘汰不靠谱的分身，保留匹配效果好的粒子，通过这种适者生存的方式，保证机器人即使在各种累计误差的叠加下，依然能够持续找到相对准确的机器人位置</p><p><img src="/faststudy.assets/image-20240416213407892.png" alt="image-20240416213407892"></p><p>rviz 查看分身</p><img src="faststudy.assets/image-20240416213543569.png" alt="image-20240416213543569" style="zoom:50%;" /><h3 id="代价地图"><a href="#代价地图" class="headerlink" title="代价地图"></a>代价地图</h3><img src="faststudy.assets/image-20240416214204644.png" alt="image-20240416214204644" style="zoom:50%;" /><p>给墙边进行点膨胀，生成会掉血的区域，从而避免机器人撞墙。</p><p>代价地图分为全局代价地图和局部代价地图</p><ul><li><p>全局代价地图只在全局导航路线的时候计算一次，计算耗时很长，但是很少计算</p></li><li><p>局部代价考虑的范围很小，计算耗时也很短，计算频率可以做到很高，实时性好，可以给局部规划器，用来做运动避障</p></li><li><p>参数设置</p><p>参数文件归属</p><img src="faststudy.assets/image-20240416221537946.png" alt="image-20240416221537946" style="zoom:50%;" /></li></ul><p><strong>第一个参数文件内容</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">robot_radius</span> <span class="string">机器人底盘半径</span></span><br><span class="line"><span class="string">inflatino_radius</span> <span class="string">膨胀区域半径</span></span><br></pre></td></tr></table></figure><p>通过危险程度不同的两层膨胀区域，保证了导航路线在开阔空间里，尽可能远离障碍物</p><img src="faststudy.assets/image-20240416221739883.png" alt="image-20240416221739883" style="zoom:50%;" /><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">obstacle_range:</span> <span class="string">设置为激光雷达的有效检测距离，将该距离里的障碍物都加到代价地图里，用来确保障碍物都是有效的</span></span><br><span class="line"><span class="attr">raytrace_range:</span> <span class="string">是激光穿透的格子都没有障碍物，用来去除动态障碍物的残留影子</span></span><br><span class="line"><span class="attr">observation_sources:</span> <span class="string">动态障碍物的观测来源，这里</span> <span class="string">base_lidar</span> <span class="string">底盘激光雷达</span></span><br><span class="line"><span class="attr">base_lidar:</span> &#123;</span><br><span class="line">   <span class="string">数据参数</span></span><br><span class="line">   <span class="attr">marking:</span> <span class="string">将扫描到的障碍物加到代价地图</span></span><br><span class="line">   <span class="attr">clearing:</span> <span class="string">清除残影</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="string">两个base_lidar</span> <span class="string">只要名字一样就行，可以换成其它名字</span></span><br></pre></td></tr></table></figure><p>增加三维相机</p><img src="faststudy.assets/image-20240416222616432.png" alt="image-20240416222616432" style="zoom:50%;" /><p><strong>第二个参数文件内容</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">global_costmap:</span> <span class="string">全局代价地图</span></span><br><span class="line"><span class="attr">global_frame:</span> <span class="string">map</span> <span class="string">地图坐标系名称</span></span><br><span class="line"><span class="attr">robot_base_frame:</span> <span class="string">base_footprint</span> <span class="string">机器人地盘坐标系名称</span></span><br><span class="line"><span class="attr">static_map:</span> <span class="literal">true</span> <span class="string">是否将mapserver发来的地图数据作为初始地图</span> <span class="literal">true</span><span class="string">就会把这个地图作为代价地图的基础，后面检测到新的动态障碍物，再往里添加。如果为false</span> <span class="string">初始就是一个空地图，需要构建一套动态建图机制来为它提供导航依据</span></span><br><span class="line"><span class="string">在位置区域就可以设置参数为false</span> <span class="string">一边建图一边导航</span></span><br><span class="line"><span class="string">update_frequency:1.0</span> <span class="string">1hz</span> <span class="string">地图更新频率</span> <span class="string">将传感器扫描的障碍物加入到代价地图的频率</span></span><br><span class="line"><span class="attr">publish_frequency:</span> <span class="string">和上面保持一致(发布频率，发布给rviz显示的频率)</span></span><br><span class="line"><span class="attr">transform_tolerance:</span> <span class="number">1.0</span> <span class="string">tf延迟容忍时间，单位秒</span></span><br></pre></td></tr></table></figure><p>这个tf是传感器到地图map的tf，包含了三段</p><img src="faststudy.assets/image-20240416223621665.png" alt="image-20240416223621665" style="zoom:50%;" /><p><strong>第三个参数文件内容</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">local_costmap:</span> <span class="string">全局代价地图</span></span><br><span class="line"><span class="attr">global_frame:</span> <span class="string">odom</span> <span class="string">里程计坐标系名称</span>  <span class="string">可以保证平滑</span></span><br><span class="line"><span class="attr">robot_base_frame:</span> <span class="string">base_footprint</span> <span class="string">机器人地盘坐标系名称</span></span><br><span class="line"><span class="attr">static_map:</span> <span class="literal">false</span> </span><br><span class="line"><span class="attr">rolling_window:</span> <span class="literal">false</span> <span class="string">局部代价地图是否跟随机器人移动</span></span><br><span class="line"><span class="attr">width:</span> <span class="number">3.0</span> <span class="string">宽高</span></span><br><span class="line"><span class="attr">height:</span> <span class="number">3.0</span> </span><br><span class="line"><span class="string">update_frequency:10</span> <span class="string">设置为激光雷达的扫描频率</span> <span class="string">使得扫描一圈就更新一次，使得能及时更新，对一些危险状况能迅速做出反应</span></span><br><span class="line"><span class="attr">publish_frequency:</span> <span class="string">和上面保持一致(发布频率，发布给rviz显示的频率)</span></span><br><span class="line"><span class="attr">transform_tolerance:</span> <span class="number">1.0</span> <span class="string">tf延迟容忍时间，单位秒</span></span><br></pre></td></tr></table></figure><h3 id="恢复行为"><a href="#恢复行为" class="headerlink" title="恢复行为"></a>恢复行为</h3><p>为全局路径规划服务</p><ul><li>遇到障碍的默认处理流程</li></ul><img src="faststudy.assets/image-20240416224624673.png" alt="image-20240416224624673" style="zoom:50%;" /><p>旋转清除，清除已经不存在的障碍物残影，适合有视野盲区的机器人。</p><p>就是多次尝试规划路径，如果不能就最终放弃任务，否则就进行正常导航</p><ul><li><p>参数设置</p><p>ros自带参数，进行组合</p><img src="faststudy.assets/image-20240416225014189.png" alt="image-20240416225014189" style="zoom:50%;" /></li></ul><p> 参数写到global_costmap文件里</p><img src="faststudy.assets/image-20240416225223929.png" alt="image-20240416225223929" style="zoom:50%;" /><p>这个列表建立了新的恢复流程，取代默认流程</p><p><img src="/faststudy.assets/image-20240416225404674.png" alt="image-20240416225404674"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/05/12/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%881%EF%BC%89/"/>
      <url>/2024/05/12/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%EF%BC%881%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分析-1"><a href="#数据分析-1" class="headerlink" title="数据分析(1)"></a>数据分析(1)</h1><p>这篇简单介绍一下数据分析中常用到的几个库函数，强烈推荐使用<strong>JupyterNotebook</strong>，有机会写一篇教程速通一下，下面的图也都是直接从Jupyter中截取出来的。</p><h2 id="基础库介绍"><a href="#基础库介绍" class="headerlink" title="基础库介绍"></a>基础库介绍</h2><table><thead><tr><th>Numpy</th><th>Pandas</th><th>Matplotlib</th></tr></thead><tbody><tr><td>主要用于<strong>处理多维数组和矩阵运算</strong></td><td>用于<strong>数据处理和分析</strong>的库，提供了DataFrame数据结构和各种数据操作功能，如数据清洗、转换、筛选等</td><td>用于<strong>数据可视化</strong>的库，提供了各种绘图函数和工具，可以创建各种类型的图表，如折线图、柱状图、散点图等</td></tr></tbody></table><h3 id="Numpy"><a href="#Numpy" class="headerlink" title="Numpy"></a><a href="https://numpy.org/">Numpy</a></h3><p>简介：NumPy 是 Python 中科学计算的基础包。它是一个 Python 库，提供多维数组对象、各种派生对象（例如掩码数组和矩阵）以及用于对数组进行快速操作的各种例程，包括数学、逻辑、形状操作、排序、选择、I&#x2F;O、离散傅里叶变换、基本线性代数、基本统计运算、随机模拟等等。</p><p><strong>数组array</strong>是 NumPy 库的中心数据结构。数组是值的网格，它包含有关原始数据、如何定位元素以及如何解释元素的信息。它有一个元素网格，可以以各种方式进行索引。这些元素都属于同一类型，称为数组 dtype 。</p><p><em><strong>人话就是方便进行数组、矩阵运算</strong></em></p><p><a href="https://scipy.org/">Scipy</a></p><p>简介：Scipy是一个基于NumPy的Python科学计算库，提供了更多高级的数学、科学和工程计算功能。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="comment">#创建初始数组(矩阵)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;1d array&quot;</span>)</span><br><span class="line">a = np.arange(<span class="number">6</span>)                    <span class="comment"># 1d array</span></span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;2d array&quot;</span>)</span><br><span class="line">b = np.arange(<span class="number">12</span>).reshape(<span class="number">4</span>, <span class="number">3</span>)     <span class="comment"># 2d array</span></span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;3d array&quot;</span>)</span><br><span class="line">c = np.arange(<span class="number">30</span>).reshape(<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>)  <span class="comment"># 3d array</span></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">arr = np.random.normal(size=<span class="number">1000</span>)</span><br><span class="line"><span class="built_in">print</span>(arr)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/bde94e8e101d49bab9136bf332631ba0.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#数组运算 maximum, minimum, sum, mean, product, standard deviation, and more</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">plt.hist(arr)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;max:&quot;</span>,arr.<span class="built_in">max</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;min:&quot;</span>,arr.<span class="built_in">min</span>())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;mean:&quot;</span>,arr.mean())</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;sum:&quot;</span>,arr.<span class="built_in">sum</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># import matplotlib.pyplot as plt</span></span><br><span class="line"><span class="comment"># plt.hist(arr,bins=15)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;std:&quot;</span>,arr.std())</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/e6ba736217df40c4b32f8b4c0e7501f7.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#矩阵运算</span></span><br><span class="line">matrix=np.array([[<span class="number">1</span>, <span class="number">2</span>], [<span class="number">5</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">6</span>]])</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/b245afa4796b469b9a92d4d5515e3b50.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#按行/列求最大值 列：axis=0，行：axis=1</span></span><br><span class="line">m0=matrix.<span class="built_in">max</span>(axis=<span class="number">0</span>)</span><br><span class="line">m1=matrix.<span class="built_in">max</span>(axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(m0)</span><br><span class="line"><span class="built_in">print</span>(m1)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/08615b67de6645d4919e376a72c3bb94.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#reshape重塑矩阵 arr.reshape()</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;reshape&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(matrix)</span><br><span class="line">rmatrix=matrix.reshape(<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(rmatrix)</span><br><span class="line"></span><br><span class="line"><span class="comment">#transpose 转置  arr.transpose() arr.T</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;transpose&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(matrix.transpose())</span><br><span class="line"><span class="built_in">print</span>(matrix.T)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/5d7625b6714d41baa519f51a0e38fee5.png#pic_center" alt="在这里插入图片描述"></p><h3 id="Matplotlib"><a href="#Matplotlib" class="headerlink" title="Matplotlib"></a><a href="https://matplotlib.org/">Matplotlib</a></h3><p><em><strong>人话就是画图的</strong></em></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x1=np.random.rand(<span class="number">10</span>)</span><br><span class="line">x2=np.random.rand(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fig = plt.figure()</span><br><span class="line">ax = fig.add_subplot(<span class="number">221</span>) </span><br><span class="line">ax.plot(x1)</span><br><span class="line">ax = fig.add_subplot(<span class="number">222</span>)</span><br><span class="line">ax.plot(x2)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/22057b4953214adaac6d4b14e14117fb.png#pic_center" alt="在这里插入图片描述"></p><p>你可以一个一个设置基础属性</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating subplot/axes</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting plot title</span></span><br><span class="line">ax.set_title(<span class="string">&#x27;My plot title&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting X-axis and Y-axis limits</span></span><br><span class="line">ax.set_xlim([<span class="number">0</span>, <span class="number">10</span>])</span><br><span class="line">ax.set_ylim([-<span class="number">5</span>, <span class="number">5</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting X-axis and Y-axis labels</span></span><br><span class="line">ax.set_ylabel(<span class="string">&#x27;My y-axis label&#x27;</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&#x27;My x-axis label&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Showing the plot</span></span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/bb5c3514784b44d99054795fe3995679.png#pic_center" alt="在这里插入图片描述"></p><p>也可以一口气设置</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fig = plt.figure()</span><br><span class="line"></span><br><span class="line"><span class="comment"># Creating subplot/axes</span></span><br><span class="line">ax = fig.add_subplot(<span class="number">111</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Setting title and axes properties</span></span><br><span class="line">ax.<span class="built_in">set</span>(title=<span class="string">&#x27;An Axes Title&#x27;</span>, xlim=[<span class="number">0</span>, <span class="number">10</span>], ylim=[-<span class="number">5</span>, <span class="number">5</span>], ylabel=<span class="string">&#x27;My y-axis label&#x27;</span>, xlabel=<span class="string">&#x27;My x-axis label&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/a3bbafbdc78e406c816d304662bc608f.png#pic_center" alt="在这里插入图片描述"></p><p>下面主要以plot为例，matplotlib的<a href="https://matplotlib.org/stable/plot_types/index.html">图像类型</a>其实相当丰富</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">x=np.random.rand(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot lists &#x27;x&#x27; </span></span><br><span class="line">plt.plot(x)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Plot axes labels and show the plot</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;X-axis Label&#x27;</span>)</span><br><span class="line">plt.show() </span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4efd91dfed2c4959bc298a1b273cb5f7.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Create a figure with four subplots and shared axes</span></span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line">x=np.random.rand(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line">fig, axes = plt.subplots(nrows=<span class="number">2</span>, ncols=<span class="number">2</span>, sharex=<span class="literal">True</span>, sharey=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Upper Left&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">0</span>].plot(x)</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置颜色</span></span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Upper Right&#x27;</span>)</span><br><span class="line">axes[<span class="number">0</span>, <span class="number">1</span>].plot(x,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##设置线条</span></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Lower Left&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">0</span>].plot(x,<span class="string">&#x27;g*--&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">##标记点和线条颜色分开</span></span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].<span class="built_in">set</span>(title=<span class="string">&#x27;Lower Right&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].plot(x,<span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">axes[<span class="number">1</span>, <span class="number">1</span>].plot(x,<span class="string">&#x27;r*&#x27;</span>)</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/d4c9a34ab336413784c696061ed460dc.png#pic_center" alt="在这里插入图片描述"></p><h3 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a><a href="https://pandas.pydata.org/">Pandas</a></h3><p>Pandas 提供两种基本类型的数据结构:Series和Dataframe</p><p>Series是可以保存任何类型数据的一维数组</p><p>Dataframe 一种二维结构，用于将数据保存在包含行和列的表中</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">s1 = pd.Series([<span class="number">23</span>,<span class="number">324</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;ABC&quot;</span>,<span class="string">&quot;DEF&quot;</span>,-<span class="number">123</span>])</span><br><span class="line"><span class="built_in">print</span>(s1)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/4cb7bf87e7e247b68135f182390da732.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s2 = pd.Series([<span class="number">23</span>,<span class="number">324</span>,<span class="number">2</span>,<span class="number">0</span>,<span class="string">&quot;ABC&quot;</span>,<span class="string">&quot;DEF&quot;</span>,-<span class="number">123</span>],index=[<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>,<span class="string">&quot;e&quot;</span>,<span class="string">&quot;f&quot;</span>,<span class="string">&quot;g&quot;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(s2)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;我们设置的index&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(s2[<span class="string">&quot;b&quot;</span>])</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/8382a524a0ad48ebb4ab5bc769b125e5.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line">s3 = pd.Series(np.random.rand(<span class="number">100000</span>))</span><br><span class="line"><span class="built_in">print</span>(s3)</span><br><span class="line"></span><br><span class="line"><span class="comment">##使用pandas自带的制图函数</span></span><br><span class="line">ax = s3.plot.hist(bins=<span class="number">100</span>)</span><br><span class="line">ax.set_xlabel(<span class="string">&quot;Number&quot;</span>)</span><br><span class="line">ax.set_ylabel(<span class="string">&quot;Entries per bin&quot;</span>)</span><br><span class="line">ax.set_title(<span class="string">&quot;Uniform distribution&quot;</span>)</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/32647e00425a4ad9b5dcabaf44c45681.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line"><span class="comment">##也可以使用matplotlib的</span></span><br><span class="line">plt.hist(s3,bins=<span class="number">100</span>)</span><br><span class="line">plt.title(<span class="string">&quot;Uniform distribution&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/0c1e5dc6afc34d1fadedf1e199ce97d1.png#pic_center" alt="在这里插入图片描述"></p><p>Dataframes</p><p>一些主要功能：<br>数据表示：以包含行和列的表格式存储数据。<br>异构数据类型：可以在不同的列（例如，整数、浮点数、字符串、布尔值）中保存不同的数据类型。<br>标签：每行和每列都有一个标签（索引和列名称）。<br>可变：允许数据操作和修改。<br>强大的操作：提供用于数据分析、操作和探索的各种功能和方法。<br>可扩展：可以通过库和用户定义的函数使用其他功能进行自定义和扩展。 </p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">df = pd.DataFrame(</span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">&quot;Name&quot;</span>: [<span class="string">&quot;drunksweet&quot;</span>, <span class="string">&quot;jiaotangjiu&quot;</span>,<span class="string">&quot;soubai&quot;</span>,<span class="string">&quot;drunksweet&quot;</span>, <span class="string">&quot;jiaotangjiu&quot;</span>,<span class="string">&quot;soubai&quot;</span>,],</span><br><span class="line">    <span class="string">&quot;Age&quot;</span>: [<span class="number">18</span>, <span class="number">19</span>, <span class="number">18</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">18</span>],</span><br><span class="line">    <span class="string">&quot;Sex&quot;</span>: [<span class="string">&quot;male&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;male&quot;</span>,<span class="string">&quot;male&quot;</span>, <span class="string">&quot;male&quot;</span>, <span class="string">&quot;male&quot;</span>],</span><br><span class="line">&#125;)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">df[<span class="string">&quot;Age&quot;</span>]</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/48fb2ba722e840ffae5ffe62b3ab79b0.png#pic_center" alt="在这里插入图片描述"></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df[<span class="string">&quot;Age&quot;</span>].mean()</span><br></pre></td></tr></table></figure><p><img src="https://img-blog.csdnimg.cn/direct/2f917b9360464112ab1dddff45f1cfc7.png#pic_center" alt="在这里插入图片描述"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/05/12/Git/"/>
      <url>/2024/05/12/Git/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="初始化配置"><a href="#初始化配置" class="headerlink" title="初始化配置"></a>初始化配置</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">git -v   </span><br><span class="line"></span><br><span class="line">git config  --global user.name &quot;&lt;username&gt;&quot;</span><br><span class="line"></span><br><span class="line">git config --global user.email &lt;email&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">git环境配置信息</span></span><br><span class="line">git config --global --list</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427132446217.png" alt="image-20240427132446217"></p><h2 id="创建仓库"><a href="#创建仓库" class="headerlink" title="创建仓库"></a>创建仓库</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">create a new <span class="built_in">dir</span> to store the gitreso</span></span><br><span class="line">mkdir &lt;dirname&gt;</span><br><span class="line">git init</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">look all resouce</span></span><br><span class="line">ls -a</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">create a new git reso <span class="keyword">in</span> the present <span class="built_in">dir</span></span></span><br><span class="line">git init &lt;newdirname&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427133258830.png" alt="image-20240427133258830"></p><h2 id="git-workspace-and-file-status"><a href="#git-workspace-and-file-status" class="headerlink" title="git workspace and file status"></a>git workspace and file status</h2><p>git workspace</p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427134557468.png" alt="image-20240427134557468">file status</p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427135209734.png" alt="image-20240427135209734"></p><p>untrack *the new created file</p><p>unmodified  *the unchanged git file</p><p>modified *the changed git file but haven’t add into the Staging Area</p><p>staged *the changed git file and already add into the SA</p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427135733187.png" alt="image-20240427135733187"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">present gitdir status</span></span><br><span class="line">git status</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add file to AS</span></span><br><span class="line">git add &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">add present <span class="built_in">dir</span><span class="string">&#x27;s all changed file to AS</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;</span>.<span class="string">&#x27; means to present dir</span></span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">add all the type of files is .txt to AS</span></span></span><br><span class="line">git add *.txt</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">commit the files <span class="keyword">in</span> AS</span></span><br><span class="line">git commit -m &quot;&lt;title&gt;&quot;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">into Vim mode to commit files <span class="keyword">in</span> AS</span></span><br><span class="line">git commit </span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">finish add and commit at onec</span></span><br><span class="line">git commit -am &quot;&quot;</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">search past commit record</span></span><br><span class="line">git log</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">brief commit record</span></span><br><span class="line">git log --oneline</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427195749947.png" alt="image-20240427195749947"></p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427195931931.png" alt="image-20240427195931931"></p><h2 id="git-reset"><a href="#git-reset" class="headerlink" title="git reset"></a>git reset</h2><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427200045013.png" alt="image-20240427200045013"></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">git log --online</span><br><span class="line"></span><br><span class="line">git reset --soft &lt;commit_hash&gt;</span><br><span class="line">git reset --hard &lt;commit_hash&gt;</span><br><span class="line">git reset --mixed &lt;commit_hash&gt;</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">roolback to last version</span></span><br><span class="line">git reset --sofe HEAD^</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">roolback roolback to the last version</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># to get the version number</span></span></span><br><span class="line">git reflog</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># roolback roolback to the last version</span></span></span><br><span class="line">gir reser --hard &lt;commit_hash&gt;</span><br></pre></td></tr></table></figure><h2 id="git-diff"><a href="#git-diff" class="headerlink" title="git diff"></a>git diff</h2><p>usually use the GUI tools</p><p>but sometimes we need to learn about it to run some machine which without GUI tools </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compare diffrences between the Working directory and Staging area</span></span><br><span class="line">git diff</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compare diffrences between the Working directory and <span class="built_in">local</span> repository</span></span><br><span class="line">git diff HEAD</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compare diffrences between the Staging area and <span class="built_in">local</span> repository</span></span><br><span class="line">git diff --cached</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">compare diffrences between two version file</span></span><br><span class="line">git diff &lt;commit_hash1&gt; &lt;commit_hash2&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment"># two symbol</span></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;HEAD&#x27;</span> means present version</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">&#x27;~&#x27;</span> or <span class="string">&#x27;^&#x27;</span> means last version</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">so we can <span class="keyword">do</span> like this to</span> </span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="comment">#</span></span></span><br><span class="line">git diff HEAD~ HEAD</span><br><span class="line">git diff HEAD^ HEAD</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">and we can input a number behind the ~ <span class="built_in">which</span> means last N verision</span></span><br><span class="line">git diff HEAD~2 HEAD</span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">check specific files diff</span></span><br><span class="line">git diff HEAD~2 HEAD &lt;filename&gt;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427202747326.png" alt="image-20240427202747326"></p><h2 id="rm-files"><a href="#rm-files" class="headerlink" title="rm files"></a>rm files</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">just remove the files <span class="keyword">in</span> Working dirctory but doesn<span class="string">&#x27;s remove in AS</span></span> </span><br><span class="line">rm &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash"><span class="string">so we need git add . to update the diff into AS</span></span></span><br><span class="line">git add .</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">or we can  rm directly by use git rm</span></span></span><br><span class="line">git rm &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_"></span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash"><span class="string">rm files in local repository but don&#x27;</span>t <span class="built_in">rm</span> <span class="keyword">in</span> WD</span></span><br><span class="line">git rm --cached &lt;filename&gt;</span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">at last we need to commit to updata diff into <span class="built_in">local</span> repository</span></span><br><span class="line">git commit -m &quot;&quot;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427204153159.png" alt="image-20240427204153159"></p><h2 id="gitignore"><a href="#gitignore" class="headerlink" title=".gitignore"></a>.gitignore</h2><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427204329307.png" alt="image-20240427204329307"></p><p>we can search template in github</p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427205948513.png" alt="image-20240427205948513"></p><h2 id="clone-remote-Repo"><a href="#clone-remote-Repo" class="headerlink" title="clone remote Repo"></a>clone remote Repo</h2><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427210451419.png" alt="image-20240427210451419"></p><p><img src="C:\Users\21418\AppData\Roaming\Typora\typora-user-images\image-20240427210545105.png" alt="image-20240427210545105"></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2024/05/12/hello-world/"/>
      <url>/2024/05/12/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;tang blog&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
